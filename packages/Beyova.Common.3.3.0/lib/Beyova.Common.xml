<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Beyova.Common</name>
    </assembly>
    <members>
        <member name="T:Beyova.AOP.AfterMethodInvokeDelegate">
            <summary>
            Delegate AfterMethodInvokeDelegate
            </summary>
            <param name="returnMessage">The return message.</param>
        </member>
        <member name="T:Beyova.AOP.BeforeMethodInvokeDelegate">
            <summary>
            Delegate BeforeMethodInvokeDelegate
            </summary>
            <param name="callMessage">The call message.</param>
        </member>
        <member name="T:Beyova.AOP.ProcessExceptionDelegate">
            <summary>
            Delegate HandleExceptionDelegate
            </summary>
            <param name="returnMessage">The return message.</param>
            <param name="exception">The exception.</param>
            <param name="data">The data.</param>
            <param name="removeException">if set to <c>true</c> [remove exception].</param>
            <returns>Exception.</returns>
        </member>
        <member name="T:Beyova.AOP.RetrieveMethodArgumentDelegate">
            <summary>
            Delegate RetrieveMethodArgumentDelegate
            </summary>
            <param name="callMessage">The call message.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Beyova.AOP.OverrideMethodReturnMessageDelegate">
            <summary>
            Delegate OverrideMethodReturnMessageDelegate
            </summary>
            <param name="callMessage">The call message.</param>
            <param name="returnMessage">The return message.</param>
            <param name="exception">The exception. This is the exception which from <see cref="T:Beyova.AOP.ProcessExceptionDelegate"/> delegate.</param>
            <returns>IMethodReturnMessage.</returns>
        </member>
        <member name="T:Beyova.AOP.MessageProcessDelegates">
            <summary>
            Class MessageProcessDelegates.
            </summary>
        </member>
        <member name="P:Beyova.AOP.MessageProcessDelegates.MethodInvokedEvent">
            <summary>
            Gets or sets the method invoked event.
            This delegate would be invoked after real method is invoked.
            </summary>
            <value>The method invoked event.</value>
        </member>
        <member name="P:Beyova.AOP.MessageProcessDelegates.MethodInvokingEvent">
            <summary>
            Gets or sets the method invoking event.
            This delegate would be invoked before real method is invoked.
            </summary>
            <value>The method invoking event.</value>
        </member>
        <member name="P:Beyova.AOP.MessageProcessDelegates.ExceptionDelegate">
            <summary>
            Gets or sets the exception delegate.
            This delegate would be invoked only when real method threw exception.
            It would be invoked after <c>ReturnMessageDelegate</c> is done.
            </summary>
            <value>The exception delegate.</value>
        </member>
        <member name="P:Beyova.AOP.MessageProcessDelegates.MethodArgumentDelegate">
            <summary>
            Gets or sets the method argument delegate.
            This delegate would be invoked for generating exception data.
            By default, it would use default method for generating key-value based argument dictionary.
            </summary>
            <value>The method argument delegate.</value>
        </member>
        <member name="P:Beyova.AOP.MessageProcessDelegates.ReturnMessageOverrideDelegate">
            <summary>
            Gets or sets the method return message delegate.
            This delegate would be invoked after <c>ReturnMessageDelegate</c> and <c>ExceptionDelegate</c>.
            This is to override <see cref="T:System.Runtime.Remoting.Messaging.ReturnMessage"/> (<see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage"/>).
            </summary>
            <value>The method return message delegate.</value>
        </member>
        <member name="T:Beyova.AOP.AOPSinkProcessor">
            <summary>
            Class AOPSinkProcessor.
            </summary>
        </member>
        <member name="F:Beyova.AOP.AOPSinkProcessor.messageDelegates">
            <summary>
            The method injection delegate
            </summary>
        </member>
        <member name="P:Beyova.AOP.AOPSinkProcessor.Sender">
            <summary>
            Gets or sets the sender.
            </summary>
            <value>The sender.</value>
        </member>
        <member name="P:Beyova.AOP.AOPSinkProcessor.NextSink">
            <summary>
            Gets the next message sink in the sink chain.
            </summary>
            <value>The next sink.</value>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Infrastructure" />
            </PermissionSet>
        </member>
        <member name="M:Beyova.AOP.AOPSinkProcessor.#ctor(System.MarshalByRefObject,System.Runtime.Remoting.Messaging.IMessageSink,Beyova.AOP.MessageProcessDelegates)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.AOP.AOPSinkProcessor" /> class.
            </summary>
            <param name="sender">The sender.</param>
            <param name="nextSink">The next sink.</param>
            <param name="messageDelegates">The message delegates.</param>
        </member>
        <member name="M:Beyova.AOP.AOPSinkProcessor.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
            <summary>
            Asynchronously processes the given message.
            </summary>
            <param name="msg">The message to process.</param>
            <param name="replySink">The reply sink for the reply message.</param>
            <returns>Returns an <see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /> interface that provides a way to control asynchronous messages after they have been dispatched.</returns>
        </member>
        <member name="M:Beyova.AOP.AOPSinkProcessor.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            Synchronously processes the given message.
            </summary>
            <param name="msg">The message to process.</param>
            <returns>A reply message in response to the request.</returns>
        </member>
        <member name="M:Beyova.AOP.AOPSinkProcessor.GetMethodArguments(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Methods the arguments to exception data.
            </summary>
            <param name="callMessage">The call message.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Beyova.AOP.AOPMessageProcessor">
            <summary>
            Class BaseAOPMessageProcessor.
            </summary>
        </member>
        <member name="F:Beyova.AOP.AOPMessageProcessor.messageDelegates">
            <summary>
            The handle exception delegate
            </summary>
        </member>
        <member name="M:Beyova.AOP.AOPMessageProcessor.#ctor(System.String,Beyova.AOP.MessageProcessDelegates)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.AOP.AOPMessageProcessor" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="messageDelegates">The message delegates.</param>
        </member>
        <member name="M:Beyova.AOP.AOPMessageProcessor.Freeze(System.Runtime.Remoting.Contexts.Context)">
            <summary>
            Called when the context is frozen.
            </summary>
            <param name="newContext">The context to freeze.</param>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Infrastructure" />
              </PermissionSet>
        </member>
        <member name="M:Beyova.AOP.AOPMessageProcessor.IsNewContextOK(System.Runtime.Remoting.Contexts.Context)">
            <summary>
            Returns a Boolean value indicating whether the context property is compatible with the new context.
            </summary>
            <param name="newCtx">The new context in which the <see cref="T:System.Runtime.Remoting.Contexts.ContextProperty" /> has been created.</param>
            <returns>true if the context property can coexist with the other context properties in the given context; otherwise, false.</returns>
        </member>
        <member name="P:Beyova.AOP.AOPMessageProcessor.Name">
            <summary>
            Gets the name of the property under which it will be added to the context.
            </summary>
            <value>The name.</value>
            <returns>The name of the property.</returns>
              <PermissionSet>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Infrastructure" />
              </PermissionSet>
        </member>
        <member name="M:Beyova.AOP.AOPMessageProcessor.GetObjectSink(System.MarshalByRefObject,System.Runtime.Remoting.Messaging.IMessageSink)">
            <summary>
            Chains the message sink of the provided server object in front of the given sink chain.
            </summary>
            <param name="obj">The server object which provides the message sink that is to be chained in front of the given chain.</param>
            <param name="nextSink">The chain of sinks composed so far.</param>
            <returns>The composite sink chain.</returns>
        </member>
        <member name="T:Beyova.AOP.BaseAOPAttribute">
            <summary>
            Class BaseAOPAttribute.
            </summary>
        </member>
        <member name="F:Beyova.AOP.BaseAOPAttribute.messageDelegates">
            <summary>
            The message delegates
            </summary>
        </member>
        <member name="M:Beyova.AOP.BaseAOPAttribute.#ctor(System.String,Beyova.AOP.MessageProcessDelegates)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.AOP.BaseAOPAttribute"/> class.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="messageDelegates">The message delegates.</param>
        </member>
        <member name="M:Beyova.AOP.BaseAOPAttribute.GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage)">
            <summary>
            Gets the properties for new context.
            </summary>
            <param name="constructionCallMessage">The construction call message.</param>
        </member>
        <member name="T:Beyova.AOP.HandleExceptionAttribute">
            <summary>
            Class HandleExceptionAttribute.
            </summary>
        </member>
        <member name="P:Beyova.AOP.HandleExceptionAttribute.ThrowException">
            <summary>
            The throw exception
            </summary>
        </member>
        <member name="M:Beyova.AOP.HandleExceptionAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.AOP.HandleExceptionAttribute" /> class.
            </summary>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
        </member>
        <member name="M:Beyova.AOP.HandleExceptionAttribute.HandleException(System.Runtime.Remoting.Messaging.IMethodReturnMessage,System.Exception,System.Object,System.Boolean@)">
            <summary>
            Handles the exception.
            </summary>
            <param name="returnedMessage">The returned message.</param>
            <param name="exception">The exception.</param>
            <param name="data">The data.</param>
            <param name="removeException">if set to <c>true</c> [remove exception].</param>
            <returns>Exception.</returns>
        </member>
        <member name="M:Beyova.AOP.HandleExceptionAttribute.GetMethodArguments(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Gets the method arguments.
            </summary>
            <param name="callMessage">The call message.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Beyova.AOP.AOPInterceptorObject">
            <summary>
            Class AOPInterceptorObject.
            </summary>
        </member>
        <member name="M:Beyova.AOP.AOPInterceptorObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.AOP.AOPInterceptorObject"/> class.
            </summary>
        </member>
        <member name="T:Beyova.Api.WebSockets.WebSocketApiContractAttribute">
            <summary>
            Class ApiContractAttribute. It is used to define interface which used as Web-Socket API.
            </summary>
        </member>
        <member name="P:Beyova.Api.WebSockets.WebSocketApiContractAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Beyova.Api.WebSockets.WebSocketApiContractAttribute.TokenRequired">
            <summary>
            Gets or sets a value indicating whether [token required].
            </summary>
            <value><c>true</c> if [token required]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Beyova.Api.WebSockets.WebSocketApiContractAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.Api.WebSockets.WebSocketApiContractAttribute" /> class.
            </summary>
            <param name="name">The name. This name would be used as destination for web-socket connection establish.</param>
            <param name="tokenRequired">if set to <c>true</c> [token required].</param>
        </member>
        <member name="T:Beyova.Api.WebSockets.WebSocketApiOperationAttribute">
            <summary>
            Class WebSocketApiOperationAttribute.
            </summary>
        </member>
        <member name="P:Beyova.Api.WebSockets.WebSocketApiOperationAttribute.Action">
            <summary>
            Gets or sets the action.
            </summary>
            <value>The action.</value>
        </member>
        <member name="M:Beyova.Api.WebSockets.WebSocketApiOperationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.Api.WebSockets.WebSocketApiOperationAttribute"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="T:Beyova.Api.WebSockets.WebSocketConnection">
            <summary>
            Class WebSocketConnection.
            </summary>
        </member>
        <member name="P:Beyova.Api.WebSockets.WebSocketConnection.UserCredential">
            <summary>
            Gets or sets the user credential.
            </summary>
            <value>The user credential.</value>
        </member>
        <member name="P:Beyova.Api.WebSockets.WebSocketConnection.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="T:Beyova.Api.WebSockets.WebSocketMessageMeta">
            <summary>
            Class WebSocketMessageMeta.
            </summary>
        </member>
        <member name="P:Beyova.Api.WebSockets.WebSocketMessageMeta.Action">
            <summary>
            Gets or sets the action.
            </summary>
            <value>The action.</value>
        </member>
        <member name="P:Beyova.Api.WebSockets.WebSocketMessageMeta.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value>The body.</value>
        </member>
        <member name="T:Beyova.Api.ApiDescriptionAttribute">
            <summary>
            Class ApiDescriptionAttribute. This attribute is used for generating API documentation only.
            </summary>
        </member>
        <member name="P:Beyova.Api.ApiDescriptionAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="M:Beyova.Api.ApiDescriptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.Api.ApiDescriptionAttribute" /> class.
            </summary>
            <param name="description">The description.</param>
        </member>
        <member name="T:Beyova.Api.ApiModuleAttribute">
            <summary>
            Class ApiModuleAttribute. This attribute is for indicating which module current interface are in, which is specified in Api Event.
            </summary>
        </member>
        <member name="P:Beyova.Api.ApiModuleAttribute.ModuleName">
            <summary>
            Gets or sets the name of the module.
            <remarks>
            This field is for tracking only.</remarks>
            </summary>
            <value>The name of the module.</value>
        </member>
        <member name="M:Beyova.Api.ApiModuleAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.Api.ApiModuleAttribute" /> class.
            </summary>
            <param name="moduleName">Name of the module.</param>
        </member>
        <member name="M:Beyova.Api.ApiModuleAttribute.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Beyova.Api.ApiEndpoint">
            <summary>
            Class ApiEndpoint.
            </summary>
        </member>
        <member name="P:Beyova.Api.ApiEndpoint.Protocol">
            <summary>
            Gets or sets the protocol.
            </summary>
            <value>The protocol.</value>
        </member>
        <member name="P:Beyova.Api.ApiEndpoint.Host">
            <summary>
            Gets or sets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="P:Beyova.Api.ApiEndpoint.Port">
            <summary>
            Gets or sets the port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="P:Beyova.Api.ApiEndpoint.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Beyova.Api.ApiEndpoint.Account">
            <summary>
            Gets or sets the account.
            </summary>
            <value>The account.</value>
        </member>
        <member name="P:Beyova.Api.ApiEndpoint.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="P:Beyova.Api.ApiEndpoint.SecondaryToken">
            <summary>
            Gets or sets the secondary token.
            </summary>
            <value>The secondary token.</value>
        </member>
        <member name="M:Beyova.Api.ApiEndpoint.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Beyova.Api.ApiSettings">
            <summary>
            Class ApiSettings.
            </summary>
        </member>
        <member name="P:Beyova.Api.ApiSettings.Name">
            <summary>
            Gets or sets the name. Name would not involve API feature, but would help <see cref="T:Beyova.ContextHelper"/> find token delegate for authentication.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Beyova.Api.ApiSettings.ApiTracking">
            <summary>
            Gets or sets the API tracking.
            </summary>
            <value>The API tracking.</value>
        </member>
        <member name="P:Beyova.Api.ApiSettings.TokenHeaderKey">
            <summary>
            Gets or sets the token header key.
            </summary>
            <value>The token header key.</value>
        </member>
        <member name="P:Beyova.Api.ApiSettings.ClientIdentifierHeaderKey">
            <summary>
            Gets or sets the client identifier header key.
            </summary>
            <value>The client identifier header key.</value>
        </member>
        <member name="P:Beyova.Api.ApiSettings.TrackingEvent">
            <summary>
            Gets or sets a value indicating whether [tracking event].
            </summary>
            <value><c>true</c> if [tracking event]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Beyova.Api.ApiPermissionAttribute">
            <summary>
            Class ApiPermissionAttribute.
            </summary>
        </member>
        <member name="P:Beyova.Api.ApiPermissionAttribute.PermissionIdentifier">
            <summary>
            Gets or sets the permission identifier.
            </summary>
            <value>The permission identifier.</value>
        </member>
        <member name="P:Beyova.Api.ApiPermissionAttribute.Permission">
            <summary>
            Gets or sets the permission.
            </summary>
            <value>The permission.</value>
        </member>
        <member name="M:Beyova.Api.ApiPermissionAttribute.#ctor(System.String,Beyova.Api.ApiPermission)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.Api.ApiPermissionAttribute" /> class.
            </summary>
            <param name="permissionIdentifier">The permission identifier.</param>
            <param name="permission">The permission.</param>
        </member>
        <member name="T:Beyova.Api.ApiPermission">
            <summary>
            Enum ApiPermission
            </summary>
        </member>
        <member name="F:Beyova.Api.ApiPermission.Undefined">
            <summary>
            Value indicating it is undefined
            </summary>
        </member>
        <member name="F:Beyova.Api.ApiPermission.Required">
            <summary>
            Value indicating it is required
            </summary>
        </member>
        <member name="F:Beyova.Api.ApiPermission.Denied">
            <summary>
            Value indicating it is denied
            </summary>
        </member>
        <member name="T:Beyova.Api.TokenRequiredAttribute">
            <summary>
            Class TokenRequiredAttribute.
            </summary>
        </member>
        <member name="P:Beyova.Api.TokenRequiredAttribute.TokenRequired">
            <summary>
            Gets or sets a value indicating whether [token required].
            </summary>
            <value><c>true</c> if [token required]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Beyova.Api.TokenRequiredAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.Api.TokenRequiredAttribute" /> class.
            </summary>
            <param name="tokenRequired">if set to <c>true</c> [token required].</param>
        </member>
        <member name="T:Beyova.RestApi.WebSocketSettings">
            <summary>
            Class WebSocketSettings.
            </summary>
        </member>
        <member name="T:Beyova.RestApi.ApiHeaderAttribute">
            <summary>
            Class ApiHeaderAttribute.
            </summary>
        </member>
        <member name="P:Beyova.RestApi.ApiHeaderAttribute.HeaderKey">
            <summary>
            Gets or sets the header key.
            </summary>
            <value>The header key.</value>
        </member>
        <member name="M:Beyova.RestApi.ApiHeaderAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.RestApi.ApiHeaderAttribute"/> class.
            </summary>
            <param name="headerKey">The header key.</param>
        </member>
        <member name="T:Beyova.RestApi.ApiTraceContext">
            <summary>
            Class ApiTraceContext.
            </summary>
        </member>
        <member name="F:Beyova.RestApi.ApiTraceContext._current">
            <summary>
            The _current
            </summary>
        </member>
        <member name="F:Beyova.RestApi.ApiTraceContext._root">
            <summary>
            The _root
            </summary>
        </member>
        <member name="P:Beyova.RestApi.ApiTraceContext.Root">
            <summary>
            Gets the root.
            </summary>
            <value>The root.</value>
        </member>
        <member name="P:Beyova.RestApi.ApiTraceContext.TraceId">
            <summary>
            Gets the trace identifier.
            </summary>
            <value>The trace identifier.</value>
        </member>
        <member name="M:Beyova.RestApi.ApiTraceContext.Initialize(System.String,System.Nullable{System.DateTime},System.String)">
            <summary>
            Initializes the specified trace identifier.
            </summary>
            <param name="traceId">The trace identifier.</param>
            <param name="entryStamp">The entry stamp.</param>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:Beyova.RestApi.ApiTraceContext.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Beyova.RestApi.ApiTraceContext.GetCurrentTraceLog(System.Boolean)">
            <summary>
            Gets the current trace log.
            </summary>
            <param name="dispose">if set to <c>true</c> [dispose].</param>
            <returns>ApiTraceLog.</returns>
        </member>
        <member name="M:Beyova.RestApi.ApiTraceContext.Enter(System.String,System.Boolean)">
            <summary>
            Enters the specified method.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="setNameAsMajor">The set name as major.</param>
        </member>
        <member name="M:Beyova.RestApi.ApiTraceContext.Enter(Beyova.RestApi.RuntimeContext,System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Enters the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="entryStamp">The entry stamp.</param>
            <param name="setNameAsMajor">The set name as major.</param>
        </member>
        <member name="M:Beyova.RestApi.ApiTraceContext.Enter(System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Enters the specified method call message.
            </summary>
            <param name="methodCallMessage">The method call message.</param>
            <param name="entryStamp">The entry stamp.</param>
            <param name="setNameAsMajor">The set name as major.</param>
        </member>
        <member name="M:Beyova.RestApi.ApiTraceContext.Enter(Beyova.ApiTracking.ApiTraceLogPiece,System.Boolean)">
            <summary>
            Enters the specified trace log.
            </summary>
            <param name="traceLog">The trace log.</param>
            <param name="setNameAsMajor">The set name as major.</param>
        </member>
        <member name="M:Beyova.RestApi.ApiTraceContext.SetMajorMethodName(System.String)">
            <summary>
            Sets the name of the major method.
            </summary>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:Beyova.RestApi.ApiTraceContext.Exit(System.Runtime.Remoting.Messaging.IMethodReturnMessage,System.Nullable{System.DateTime})">
            <summary>
            Exits the specified method message.
            </summary>
            <param name="methodMessage">The method message.</param>
            <param name="exitStamp">The exit stamp.</param>
        </member>
        <member name="M:Beyova.RestApi.ApiTraceContext.Exit(System.Nullable{System.Guid},System.Nullable{System.DateTime})">
            <summary>
            Exits the specified exception.
            </summary>
            <param name="exceptionKey">The exception key.</param>
            <param name="exitStamp">The exit stamp.</param>
        </member>
        <member name="M:Beyova.RestApi.ApiTraceContext.Exit(Beyova.ApiTracking.ApiTraceLogPiece,System.Nullable{System.Guid},System.Nullable{System.DateTime})">
            <summary>
            Fills the exit information.
            </summary>
            <param name="piece">The piece.</param>
            <param name="exceptionKey">The exception key.</param>
            <param name="exitStamp">The exit stamp.</param>
        </member>
        <member name="T:Beyova.RestApi.StrickContractOutputAttribute">
            <summary>
            Class StrickContractOutputAttribute.
            </summary>
        </member>
        <member name="M:Beyova.RestApi.StrickContractOutputAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.RestApi.StrickContractOutputAttribute"/> class.
            </summary>
        </member>
        <member name="T:Beyova.RestApi.RuntimeContext">
            <summary>
            Class RuntimeContext.
            </summary>
        </member>
        <member name="P:Beyova.RestApi.RuntimeContext.ApiMethod">
            <summary>
            Gets or sets the API method.
            </summary>
            <value>The API method.</value>
        </member>
        <member name="P:Beyova.RestApi.RuntimeContext.ApiInstance">
            <summary>
            Gets or sets the API instance.
            </summary>
            <value>The API instance.</value>
        </member>
        <member name="P:Beyova.RestApi.RuntimeContext.ApiServiceName">
            <summary>
            Gets or sets the name of the API service.
            </summary>
            <value>The name of the API service.</value>
        </member>
        <member name="P:Beyova.RestApi.RuntimeContext.ResourceName">
            <summary>
            Gets or sets the name of the resource.
            </summary>
            <value>The name of the resource.</value>
        </member>
        <member name="P:Beyova.RestApi.RuntimeContext.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Beyova.RestApi.RuntimeContext.Parameter1">
            <summary>
            Gets or sets the parameter1.
            </summary>
            <value>The parameter1.</value>
        </member>
        <member name="P:Beyova.RestApi.RuntimeContext.Parameter2">
            <summary>
            Gets or sets the parameter2.
            </summary>
            <value>The parameter2.</value>
        </member>
        <member name="P:Beyova.RestApi.RuntimeContext.IsActionUsed">
            <summary>
            Gets or sets a value indicating whether this instance is action used.
            </summary>
            <value><c>true</c> if this instance is action used; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Beyova.RestApi.RuntimeContext.UserIdentifier">
            <summary>
            Gets or sets the user identifier.
            </summary>
            <value>The user identifier.</value>
        </member>
        <member name="P:Beyova.RestApi.RuntimeContext.ModuleName">
            <summary>
            Gets or sets the name of the module.
            </summary>
            <value>The name of the module.</value>
        </member>
        <member name="P:Beyova.RestApi.RuntimeContext.Settings">
            <summary>
            Gets or sets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="P:Beyova.RestApi.RuntimeContext.IsVoid">
            <summary>
            Gets or sets a value indicating whether this instance is void.
            </summary>
            <value><c>true</c> if this instance is void; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Beyova.RestApi.RuntimeContext.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:Beyova.RestApi.RuntimeContext.EntityKey">
            <summary>
            Gets the entity key.
            </summary>
            <value>The entity key.</value>
        </member>
        <member name="P:Beyova.RestApi.RuntimeContext.ActionName">
            <summary>
            Gets the name of the action.
            </summary>
            <value>The name of the action.</value>
        </member>
        <member name="P:Beyova.RestApi.RuntimeContext.CustomizedHeaderKeys">
            <summary>
            Gets or sets the customized header keys.
            </summary>
            <value>The customized header keys.</value>
        </member>
        <member name="T:Beyova.RestApi.ApiContext">
            <summary>
            Class ApiContext.
            </summary>
        </member>
        <member name="P:Beyova.RestApi.ApiContext.UserAgent">
            <summary>
            Gets or sets the user agent.
            </summary>
            <value>The user agent.</value>
        </member>
        <member name="P:Beyova.RestApi.ApiContext.IpAddress">
            <summary>
            Gets or sets the ip address.
            </summary>
            <value>The ip address.</value>
        </member>
        <member name="P:Beyova.RestApi.ApiContext.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="P:Beyova.RestApi.ApiContext.Platform">
            <summary>
            Gets or sets the platform.
            </summary>
            <value>The platform.</value>
        </member>
        <member name="P:Beyova.RestApi.ApiContext.DeviceType">
            <summary>
            Gets or sets the type of the device.
            </summary>
            <value>The type of the device.</value>
        </member>
        <member name="P:Beyova.RestApi.ApiContext.CurrentCredential">
            <summary>
            Gets or sets the current credential.
            </summary>
            <value>The current credential.</value>
        </member>
        <member name="P:Beyova.RestApi.ApiContext.CurrentPermissionIdentifiers">
            <summary>
            Gets the current permission identifiers.
            </summary>
            <value>The current permission identifiers.</value>
        </member>
        <member name="P:Beyova.RestApi.ApiContext.CurrentUserInfo">
            <summary>
            Gets or sets the current user information.
            </summary>
            <value>The current user information.</value>
        </member>
        <member name="P:Beyova.RestApi.ApiContext.PermissionIdentifiers">
            <summary>
            Gets or sets the permission identifiers.
            </summary>
            <value>The permission identifiers.</value>
        </member>
        <member name="P:Beyova.RestApi.ApiContext.CultureCode">
            <summary>
            Gets or sets the culture code.
            </summary>
            <value>The culture code.</value>
        </member>
        <member name="P:Beyova.RestApi.ApiContext.CustomizedHeaders">
            <summary>
            Gets or sets the customized headers.
            </summary>
            <value>The customized headers.</value>
        </member>
        <member name="M:Beyova.RestApi.ApiContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.RestApi.ApiContext"/> class.
            </summary>
        </member>
        <member name="M:Beyova.RestApi.ApiContext.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Beyova.RestApi.ApiTraceExtension">
            <summary>
            Class ApiTraceExtension.
            </summary>
        </member>
        <member name="M:Beyova.RestApi.ApiTraceExtension.ToTraceLog(Beyova.RestApi.RuntimeContext,Beyova.ApiTracking.ApiTraceLogPiece,System.Nullable{System.DateTime})">
            <summary>
            To the trace log.
            </summary>
            <param name="context">The context.</param>
            <param name="parent">The parent.</param>
            <param name="entryStamp">The entry stamp.</param>
            <returns>Beyova.ApiTracking.ApiTraceLogPiece.</returns>
        </member>
        <member name="M:Beyova.RestApi.ApiTraceExtension.ToTraceLog(System.Reflection.MethodInfo,Beyova.ApiTracking.ApiTraceLogPiece,System.Nullable{System.DateTime})">
            <summary>
            To the trace log.
            </summary>
            <param name="methodInfo">The method information.</param>
            <param name="parent">The parent.</param>
            <param name="entryStamp">The entry stamp.</param>
            <returns>Beyova.ApiTracking.ApiTraceLogPiece.</returns>
        </member>
        <member name="M:Beyova.RestApi.ApiTraceExtension.ToTraceLog(System.Runtime.Remoting.Messaging.IMethodCallMessage,Beyova.ApiTracking.ApiTraceLogPiece,System.Nullable{System.DateTime})">
            <summary>
            To the trace log.
            </summary>
            <param name="methodCallMessage">The method call message.</param>
            <param name="parent">The parent.</param>
            <param name="entryStamp">The entry stamp.</param>
            <returns>Beyova.ApiTracking.ApiTraceLogPiece.</returns>
        </member>
        <member name="M:Beyova.RestApi.ApiTraceExtension.ToFlat(Beyova.ApiTracking.ApiTraceLog)">
            <summary>
            To the flat.
            </summary>
            <param name="log">The log.</param>
            <returns>List&lt;ApiTraceLogPiece&gt;.</returns>
        </member>
        <member name="M:Beyova.RestApi.ApiTraceExtension.FillInnerTraceLog(System.Collections.Generic.List{Beyova.ApiTracking.ApiTraceLogPiece},Beyova.ApiTracking.ApiTraceLogPiece)">
            <summary>
            Fills the inner trace log.
            </summary>
            <param name="container">The container.</param>
            <param name="log">The log.</param>
        </member>
        <member name="T:Beyova.RestApi.RestApiEventHandlers">
            <summary>
            Class RestApiEventHandlers. This class is to save sensitive event handlers for <see cref="T:Beyova.RestApi.ApiHandlerBase"/> or <see cref="T:Beyova.RestApi.RestApiRouter"/>. Such as initialize thread user info by token.
            </summary>
        </member>
        <member name="M:Beyova.RestApi.RestApiEventHandlers.GetCredentialByToken(System.String)">
            <summary>
            Gets the credential by token.
            </summary>
            <param name="token">The token.</param>
            <returns>ICredential.</returns>
        </member>
        <member name="M:Beyova.RestApi.RestApiEventHandlers.GetCredentialBySecuredKey(System.String,System.String@)">
            <summary>
            Gets the credential by secured key.
            </summary>
            <param name="securedKey">The secured key.</param>
            <param name="privateKey">The private key.</param>
            <returns>ICredential.</returns>
        </member>
        <member name="T:Beyova.RestApi.RestApiSettings">
            <summary>
            Class RestApiSettings.
            </summary>
        </member>
        <member name="P:Beyova.RestApi.RestApiSettings.EnableContentCompression">
            <summary>
            Gets or sets a value indicating whether [enable content compression].
            </summary>
            <value><c>true</c> if [enable content compression]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Beyova.RestApi.RestApiSettings.JsonConverters">
            <summary>
            Gets or sets the json converters.
            </summary>
            <value>The json converters.</value>
        </member>
        <member name="P:Beyova.RestApi.RestApiSettings.EventHandlers">
            <summary>
            Gets or sets the event handlers.
            </summary>
            <value>The event handlers.</value>
        </member>
        <member name="T:Beyova.RestApi.RestApiClientGenerator">
            <summary>
            Class RestApiClientGenerator.
            </summary>
        </member>
        <member name="F:Beyova.RestApi.RestApiClientGenerator.defaultCodeIndent">
            <summary>
            The code indent
            </summary>
        </member>
        <member name="P:Beyova.RestApi.RestApiClientGenerator.Namespace">
            <summary>
            Gets or sets the namespace.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="P:Beyova.RestApi.RestApiClientGenerator.ClassName">
            <summary>
            Gets or sets the name of the class.
            </summary>
            <value>The name of the class.</value>
        </member>
        <member name="P:Beyova.RestApi.RestApiClientGenerator.CodeIndent">
            <summary>
            Gets or sets the code indent.
            </summary>
            <value>The code indent.</value>
        </member>
        <member name="M:Beyova.RestApi.RestApiClientGenerator.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.RestApi.RestApiClientGenerator" /> class.
            </summary>
            <param name="namespace">The namespace.</param>
            <param name="className">Name of the class.</param>
            <param name="codeIndent">The code indent.</param>
        </member>
        <member name="M:Beyova.RestApi.RestApiClientGenerator.GenerateCodeByInstance(System.Object[])">
            <summary>
            Generates the code by instance.
            </summary>
            <param name="instances">The instances.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.RestApi.RestApiClientGenerator.GenerateCodeByType(System.Type[])">
            <summary>
            Generates the type of the code by.
            </summary>
            <param name="types">The types.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.RestApi.RestApiClientGenerator.GenerateCode``1">
            <summary>
            Generates the code.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.RestApi.RestApiClientGenerator.GenerateCodeToPathByInstance(System.String,System.Object[])">
            <summary>
            Generates the code to path by instance.
            </summary>
            <param name="path">The path.</param>
            <param name="instances">The instances.</param>
        </member>
        <member name="M:Beyova.RestApi.RestApiClientGenerator.GenerateCodeToPathByType(System.String,System.Type[])">
            <summary>
            Generates the type of the code to path by.
            </summary>
            <param name="path">The path.</param>
            <param name="types">The types.</param>
        </member>
        <member name="M:Beyova.RestApi.RestApiClientGenerator.GenerateCodeToPath``1(System.String)">
            <summary>
            Generates the code to path.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">The path.</param>
        </member>
        <member name="M:Beyova.RestApi.RestApiClientGenerator.GenerateCodeByTypes(System.Text.StringBuilder,System.Type[])">
            <summary>
            Generates the code by type. Type here can be both Interface and Class. Method would recursively find all interfaces.
            </summary>
            <param name="builder">The builder.</param>
            <param name="types">The types.</param>
        </member>
        <member name="M:Beyova.RestApi.RestApiClientGenerator.GenerateMethodPart(System.Text.StringBuilder,System.Collections.Generic.HashSet{System.String},Beyova.RestApi.ApiOperationAttribute,System.Reflection.MethodInfo,System.Collections.Generic.Dictionary{System.String,System.Type[]})">
            <summary>
            Generates the code.
            </summary>
            <param name="builder">The builder.</param>
            <param name="doneApi">The done API.</param>
            <param name="apiOperationAttribute">The API URI.</param>
            <param name="methodInfo">The method information.</param>
            <param name="genericParameterConstraints">The generic parameter constraints.</param>
            <exception cref="T:Beyova.ExceptionSystem.InvalidObjectException">
            methodInfo.Parameter
            or
            methodInfo.Parameter
            </exception>
        </member>
        <member name="M:Beyova.RestApi.RestApiClientGenerator.GenerateInterfacePart(System.Text.StringBuilder,System.Collections.Generic.HashSet{System.String},System.Type,Beyova.RestApi.ApiContractAttribute)">
            <summary>
            Generates the interface part.
            </summary>
            <param name="builder">The builder.</param>
            <param name="doneApi">The done API.</param>
            <param name="interfaceType">Type of the interface.</param>
            <param name="lastApiContractAttribute">The last API contract attribute.</param>
        </member>
        <member name="M:Beyova.RestApi.RestApiClientGenerator.WriteFileInfo(System.Text.StringBuilder)">
            <summary>
            Writes the file information.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Beyova.RestApi.RestApiClientGenerator.WriteNamespaces(System.Text.StringBuilder)">
            <summary>
            Writes the namespaces.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Beyova.RestApi.RestApiClientGenerator.WriteConstructor(System.Text.StringBuilder,System.String)">
            <summary>
            Writes the constructor.
            </summary>
            <param name="builder">The builder.</param>
            <param name="className">Name of the class.</param>
        </member>
        <member name="M:Beyova.RestApi.RestApiClientGenerator.IsDuplicatedInterface(System.Collections.Generic.HashSet{System.String},System.Type)">
            <summary>
            Determines whether [is duplicated interface] [the specified type].
            </summary>
            <param name="handledInterfaces">The handled interfaces.</param>
            <param name="type">The type.</param>
            <returns><c>true</c> if [is duplicated interface] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.RestApi.RestApiClientGenerator.SimpleVariableToStringCode(System.String,System.Type)">
            <summary>
            Simples the variable to string code.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.RestApi.RestApiClientGenerator.GetGenericTypeConstraints(System.Type)">
            <summary>
            Gets the generic type constraints.
            </summary>
            <param name="type">The type.</param>
            <returns>Dictionary&lt;System.String, Type[]&gt;.</returns>
        </member>
        <member name="M:Beyova.RestApi.RestApiClientGenerator.FindMatchedGenericConstraints(System.Reflection.MethodInfo,System.Collections.Generic.Dictionary{System.String,System.Type[]})">
            <summary>
            Finds the matched generic constraints.
            </summary>
            <param name="methodInfo">The method information.</param>
            <param name="genericParameterConstraints">The generic parameter constraints.</param>
            <returns>Dictionary&lt;System.String, Type[]&gt;.</returns>
        </member>
        <member name="T:Beyova.RestApi.ApiHandlerBase">
            <summary>
            Class ApiHandlerBase.
            </summary>
        </member>
        <member name="F:Beyova.RestApi.ApiHandlerBase.BuiltInFeatureVersionKeyword">
            <summary>
            The built-in feature version keyword
            </summary>
        </member>
        <member name="F:Beyova.RestApi.ApiHandlerBase.jsonConverters">
            <summary>
            The json converters
            </summary>
        </member>
        <member name="F:Beyova.RestApi.ApiHandlerBase.JsonConverters">
            <summary>
            The json converters
            </summary>
        </member>
        <member name="F:Beyova.RestApi.ApiHandlerBase.settingsContainer">
            <summary>
            The settings container
            </summary>
        </member>
        <member name="F:Beyova.RestApi.ApiHandlerBase.defaultRestApiSettings">
            <summary>
            The default rest API settings
            </summary>
        </member>
        <member name="P:Beyova.RestApi.ApiHandlerBase.DefaultSettings">
            <summary>
            Gets or sets the default settings.
            </summary>
            <value>The default rest settings.</value>
        </member>
        <member name="P:Beyova.RestApi.ApiHandlerBase.AllowOptions">
            <summary>
            Gets or sets a value indicating whether [allow options].
            </summary>
            <value><c>true</c> if [allow options]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Beyova.RestApi.ApiHandlerBase.SpecifyGlobalJsonSerializationConverters(Newtonsoft.Json.JsonConverter[])">
            <summary>
            Specifies the global json serialization converters.
            </summary>
            <param name="converters">The converters.</param>
        </member>
        <member name="M:Beyova.RestApi.ApiHandlerBase.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Beyova.RestApi.ApiHandlerBase"/> class.
            </summary>
        </member>
        <member name="M:Beyova.RestApi.ApiHandlerBase.#ctor(Beyova.RestApi.RestApiSettings,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.RestApi.ApiHandlerBase" /> class.
            </summary>
            <param name="defaultApiSettings">The default API settings.</param>
            <param name="allowOptions">if set to <c>true</c> [allow options].</param>
        </member>
        <member name="P:Beyova.RestApi.ApiHandlerBase.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.
            </summary>
            <value><c>true</c> if this instance is reusable; otherwise, <c>false</c>.</value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="M:Beyova.RestApi.ApiHandlerBase.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler" /> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
        </member>
        <member name="M:Beyova.RestApi.ApiHandlerBase.ProcessBuildInFeature(Beyova.RestApi.RuntimeContext,System.Boolean)">
            <summary>
            Processes the build in feature.
            </summary>
            <param name="runtimeContext">The runtime context.</param>
            <param name="isLocalhost">The is localhost.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Beyova.RestApi.ApiHandlerBase.GetHttpHandler(System.Web.Routing.RequestContext)">
            <summary>
            Provides the object that processes the request.
            </summary>
            <param name="requestContext">An object that encapsulates information about the request.</param>
            <returns>An object that processes the request.</returns>
        </member>
        <member name="M:Beyova.RestApi.ApiHandlerBase.Prepare(System.Web.HttpRequest)">
            <summary>
            Prepares the specified request.
            <remarks>
            This method would be called before <c>ProcessRoute</c>. It can be used to help you to do some preparation, such as get something from headers or cookie for later actions.
            ou can save them in Thread data so that you can get them later in <c>ProcessRoute</c>, <c>Invoke</c>, <c>PackageOutput</c> ,etc.
            If any exception is throw from this method, the process flow would be interrupted.
            </remarks>
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Beyova.RestApi.ApiHandlerBase.InitializeContext(System.Web.HttpRequest,Beyova.RestApi.RuntimeContext)">
            <summary>
            Initializes the context.
            <remarks>
            This method would be called after <c>ProcessRoute</c> and before <c>Invoke</c>. It can be used to help you to do some context initialization, such as get something from database for later actions.
            ou can save them in Thread data so that you can get them later in <c>Invoke</c>, <c>PackageOutput</c> ,etc.
            If any exception is throw from this method, the process flow would be interrupted.
            </remarks>
            </summary>
            <param name="request">The request.</param>
            <param name="runtimeContext">The runtime context.</param>
        </member>
        <member name="M:Beyova.RestApi.ApiHandlerBase.Invoke(System.Object,System.Reflection.MethodInfo,System.Web.HttpRequest,System.String,System.String@)">
            <summary>
            Invokes the specified method information.
            <remarks>
            Invoke action would regard to method parameter to use difference logic. Following steps show the IF-ELSE case. When it is hit, other would not go through.
            <list type="number"><item>
            If input parameter count is 0, invoke without parameter object.
            </item><item>
            If input parameter count is 1 and key is not empty or null, invoke using key.
            </item><item>
            If input parameter count is 1 and key is empty or null, invoke using key, try to get JSON object from request body and convert to object for invoke.
            </item><item>
            If input parameter count more than 1, try read JSON data to match parameters by name (ignore case) in root level, then invoke.
            </item></list></remarks></summary>
            <param name="instance">The instance.</param>
            <param name="methodInfo">The method information.</param>
            <param name="httpRequest">The HTTP request.</param>
            <param name="key">The key.</param>
            <param name="jsonBody">The json body.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Beyova.RestApi.ApiHandlerBase.ProcessRoute(System.Web.HttpRequest)">
            <summary>
            Processes the route.
            </summary>
            <param name="request">The request.</param>
            <returns>Exception.</returns>
        </member>
        <member name="M:Beyova.RestApi.ApiHandlerBase.PackageOutput(System.Web.HttpResponse,System.Object,Beyova.ExceptionSystem.BaseException,System.String,System.Boolean,Beyova.RestApi.RestApiSettings)">
            <summary>
            Packages the output. <c>Flush()</c> would be called in this method.
            </summary>
            <param name="response">The response.</param>
            <param name="data">The data.</param>
            <param name="baseException">The base exception.</param>
            <param name="acceptEncoding">Name of the compress.</param>
            <param name="noBody">if set to <c>true</c> [no body].</param>
            <param name="settings">The settings.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Beyova.RestApi.ApiHandlerBase.PackageResponse(System.Web.HttpResponse,System.Object,Beyova.ExceptionSystem.BaseException,System.String,System.Boolean,Beyova.RestApi.RestApiSettings)">
            <summary>
            Packages the response. <c>Flush()</c> would be called in this method.
            </summary>
            <param name="response">The response.</param>
            <param name="data">The data.</param>
            <param name="ex">The ex.</param>
            <param name="acceptEncoding">Name of the compression.</param>
            <param name="noBody">if set to <c>true</c> [no body].</param>
            <param name="settings">The settings.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Beyova.RestApi.ApiHandlerBase.PackageResponse(System.Web.HttpResponseBase,System.Object,Beyova.ExceptionSystem.BaseException,System.String,System.Boolean,Beyova.RestApi.RestApiSettings)">
            <summary>
            Packages the response. <c>Flush()</c> would be called in this method.
            </summary>
            <param name="response">The response.</param>
            <param name="data">The data.</param>
            <param name="ex">The ex.</param>
            <param name="acceptEncoding">The accept encoding.</param>
            <param name="noBody">if set to <c>true</c> [no body].</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Beyova.RestApi.ApiHandlerBase.AddSetting(System.String,Beyova.RestApi.RestApiSettings,System.Boolean)">
            <summary>
            Adds the setting.
            </summary>
            <param name="name">The name.</param>
            <param name="setting">The setting.</param>
            <param name="overrideIfExists">The override if exists.</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="M:Beyova.RestApi.ApiHandlerBase.DeserializeJsonObject(System.String,System.Type)">
            <summary>
            Deserializes the json object.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Beyova.RestApi.ApiHandlerBase.GetRouteKey(System.String,System.String,System.String,System.String)">
            <summary>
            Gets the route key.
            </summary>
            <param name="version">The version.</param>
            <param name="resource">The resource.</param>
            <param name="httpMethod">The HTTP method.</param>
            <param name="action">The action.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Beyova.RestApi.RestApiRouter">
            <summary>
            Class RestApiRouter, which deeply integrated with <see cref="T:Beyova.ContextHelper"/> for common usage.
            </summary>
        </member>
        <member name="F:Beyova.RestApi.RestApiRouter.routeOperationLocker">
            <summary>
            The route operation locker
            </summary>
        </member>
        <member name="F:Beyova.RestApi.RestApiRouter.routes">
            <summary>
            The routes
            </summary>
        </member>
        <member name="F:Beyova.RestApi.RestApiRouter.initializedTypes">
            <summary>
            The initialized types
            </summary>
        </member>
        <member name="M:Beyova.RestApi.RestApiRouter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.RestApi.RestApiRouter"/> class.
            </summary>
        </member>
        <member name="M:Beyova.RestApi.RestApiRouter.#ctor(Beyova.RestApi.RestApiSettings,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.RestApi.RestApiRouter" /> class.
            </summary>
            <param name="defaultApiSettings">The default API settings.</param>
            <param name="allowOptions">if set to <c>true</c> [allow options].</param>
        </member>
        <member name="M:Beyova.RestApi.RestApiRouter.Add(System.Object,Beyova.RestApi.RestApiSettings)">
            <summary>
            Adds the handler (instance and settings) into route.
            </summary>
            <param name="instance">The instance.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Beyova.RestApi.RestApiRouter.InitializeRoute(System.Object,Beyova.RestApi.RestApiSettings)">
            <summary>
            Initializes the routes.
            </summary>
            <param name="instance">The instance.</param>
            <param name="settings">The settings.</param>
            <exception cref="T:Beyova.ExceptionSystem.DataConflictException">Route</exception>
        </member>
        <member name="M:Beyova.RestApi.RestApiRouter.InitializeApiType(System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,Beyova.RestApi.RuntimeRoute},System.Type,System.Object,Beyova.RestApi.RestApiSettings,Beyova.RestApi.ApiContractAttribute,Beyova.Api.ApiModuleAttribute)">
            <summary>
            Initializes the type of the API.
            </summary>
            <param name="doneInterfaceTypes">The done interface types.</param>
            <param name="routes">The routes.</param>
            <param name="interfaceType">Type of the interface.</param>
            <param name="instance">The instance.</param>
            <param name="settings">The settings.</param>
            <param name="parentApiContractAttribute">The parent API class attribute.</param>
            <param name="parentApiModuleAttribute">The parent API module attribute.</param>
        </member>
        <member name="M:Beyova.RestApi.RestApiRouter.ProcessRoute(System.Web.HttpRequest)">
            <summary>
            Processes the route.
            </summary>
            <param name="request">The request.</param>
            <returns>Exception.</returns>
        </member>
        <member name="M:Beyova.RestApi.RestApiRouter.ProcessBuildInFeature(Beyova.RestApi.RuntimeContext,System.Boolean)">
            <summary>
            Processes the build in feature.
            </summary>
            <param name="runtimeContext">The runtime context.</param>
            <param name="isLocalhost">The is localhost.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Beyova.RestApi.RestApiRouter.Authenticate(Beyova.RestApi.RuntimeRoute,System.String,System.String@)">
            <summary>
            Authenticates the specified service type.
            </summary>
            <param name="runtimeRoute">The runtime route.</param>
            <param name="token">The token.</param>
            <param name="userIdentifier">The user identifier.</param>
            <returns>System.Nullable&lt;Guid&gt;.</returns>
        </member>
        <member name="M:Beyova.RestApi.RestApiRouter.Prepare(System.Web.HttpRequest)">
            <summary>
            Prepares the specified request.
                        
            <remarks>
                        This method would be called before <c>ProcessRoute</c>. It can be used to help you to do some preparation, such as get something from headers or cookie for later actions.
                        ou can save them in Thread data so that you can get them later in <c>ProcessRoute</c>, <c>Invoke</c>, <c>PackageOutput</c> ,etc.
                        If any exception is throw from this method, the process flow would be interrupted.
                        </remarks>
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Beyova.RestApi.RestApiRouter.ToWebRoute">
            <summary>
            To the web route.
            </summary>
            <returns>Route.</returns>
        </member>
        <member name="T:Beyova.RestApi.RuntimeRoute">
            <summary>
            Class RuntimeRoute.
            </summary>
        </member>
        <member name="P:Beyova.RestApi.RuntimeRoute.MethodInfo">
            <summary>
            Gets or sets the method information.
            </summary>
            <value>The method information.</value>
        </member>
        <member name="P:Beyova.RestApi.RuntimeRoute.InstanceType">
            <summary>
            Gets or sets the type of the instance.
            </summary>
            <value>The type of the instance.</value>
        </member>
        <member name="P:Beyova.RestApi.RuntimeRoute.IsTokenRequired">
            <summary>
            Gets or sets a value indicating whether this instance is token required.
            </summary>
            <value><c>true</c> if this instance is token required; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Beyova.RestApi.RuntimeRoute.Instance">
            <summary>
            Gets or sets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:Beyova.RestApi.RuntimeRoute.IsActionUsed">
            <summary>
            Gets or sets a value indicating whether this instance is action used.
            </summary>
            <value><c>true</c> if this instance is action used; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Beyova.RestApi.RuntimeRoute.ModuleName">
            <summary>
            Gets or sets the name of the module.
            </summary>
            <value>The name of the module.</value>
        </member>
        <member name="P:Beyova.RestApi.RuntimeRoute.Permissions">
            <summary>
            Gets or sets the permissions.
            </summary>
            <value>The permissions.</value>
        </member>
        <member name="P:Beyova.RestApi.RuntimeRoute.HeaderKeys">
            <summary>
            Gets or sets the header keys.
            </summary>
            <value>The header keys.</value>
        </member>
        <member name="P:Beyova.RestApi.RuntimeRoute.Setting">
            <summary>
            Gets or sets the setting.
            </summary>
            <value>The setting.</value>
        </member>
        <member name="M:Beyova.RestApi.RuntimeRoute.#ctor(System.Reflection.MethodInfo,System.Type,System.Object,System.Boolean,System.Boolean,System.String,Beyova.RestApi.RestApiSettings,System.Collections.Generic.IDictionary{System.String,Beyova.Api.ApiPermission},System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.RestApi.RuntimeRoute" /> class.
            </summary>
            <param name="methodInfo">The method information.</param>
            <param name="instanceType">Type of the instance.</param>
            <param name="instance">The instance.</param>
            <param name="isActionUsed">if set to <c>true</c> [is action used].</param>
            <param name="isTokenRequired">if set to <c>true</c> [is token required].</param>
            <param name="moduleName">Name of the module.</param>
            <param name="setting">The setting.</param>
            <param name="permissions">The permissions.</param>
            <param name="headerKeys">The header keys.</param>
        </member>
        <member name="M:Beyova.RestApi.RuntimeRoute.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Beyova.RestApi.RestApiClient">
            <summary>
            Class RestApiClient.
            </summary>
        </member>
        <member name="P:Beyova.RestApi.RestApiClient.BaseUrl">
            <summary>
            Gets or sets the base URL.
            </summary>
            <value>The base URL.</value>
        </member>
        <member name="P:Beyova.RestApi.RestApiClient.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="P:Beyova.RestApi.RestApiClient.AcceptGZip">
            <summary>
            Gets or sets a value indicating whether [accept g zip].
            </summary>
            <value><c>true</c> if [accept g zip]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Beyova.RestApi.RestApiClient.#ctor(System.String,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.RestApi.RestApiClient" /> class.
            </summary>
            <param name="host">The host.</param>
            <param name="version">The version.</param>
            <param name="isHttps">if set to <c>true</c> [is HTTPS].</param>
            <param name="token">The token.</param>
            <param name="acceptGZip">if set to <c>true</c> [accept g zip].</param>
        </member>
        <member name="M:Beyova.RestApi.RestApiClient.#ctor(Beyova.Api.ApiEndpoint,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.RestApi.RestApiClient" /> class.
            </summary>
            <param name="endpoint">The endpoint.</param>
            <param name="acceptGZip">if set to <c>true</c> [accept g zip].</param>
        </member>
        <member name="M:Beyova.RestApi.RestApiClient.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.RestApi.RestApiClient" /> class.
            </summary>
            <param name="baseUrl">The base URL.
            <example>http://xxx.xx/api/</example></param>
            <param name="version">The version.</param>
            <param name="token">The token.</param>
            <param name="acceptGZip">if set to <c>true</c> [accept g zip].</param>
        </member>
        <member name="M:Beyova.RestApi.RestApiClient.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.RestApi.RestApiClient" /> class.
            </summary>
            <param name="baseUrl">The base URL.
            <example>http://xxx.xxx.com/api/v1/</example></param>
            <param name="token">The token.</param>
            <param name="acceptGZip">if set to <c>true</c> [accept g zip].</param>
        </member>
        <member name="M:Beyova.RestApi.RestApiClient.InvokeAsVoid(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Invokes as void.
            </summary>
            <param name="httpMethod">The HTTP method.</param>
            <param name="resourceName">Name of the resource.</param>
            <param name="resourceAction">The resource action.</param>
            <param name="key">The key.</param>
            <param name="queryString">The query string.</param>
            <param name="bodyJson">The body json.</param>
        </member>
        <member name="M:Beyova.RestApi.RestApiClient.Invoke(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Invokes the specified HTTP method.
            </summary>
            <param name="httpMethod">The HTTP method.</param>
            <param name="resourceName">Name of the resource.</param>
            <param name="resourceAction">The resource action.</param>
            <param name="key">The key.</param>
            <param name="queryString">The query string.</param>
            <param name="bodyJson">The body json.</param>
            <returns>JToken.</returns>
        </member>
        <member name="M:Beyova.RestApi.RestApiClient.InvokeUsingQueryString(System.String,System.String,System.String,System.String)">
            <summary>
            Invokes the using query string.
            </summary>
            <param name="httpMethod">The HTTP method.</param>
            <param name="resourceName">Name of the resource.</param>
            <param name="resourceAction">The resource action.</param>
            <param name="parameter">The parameter.</param>
            <returns>JToken.</returns>
        </member>
        <member name="M:Beyova.RestApi.RestApiClient.InvokeUsingCombinedQueryString(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Invokes the using combined query string.
            </summary>
            <param name="httpMethod">The HTTP method.</param>
            <param name="resourceName">Name of the resource.</param>
            <param name="resourceAction">The resource action.</param>
            <param name="parameters">The parameters.</param>
            <returns>JToken.</returns>
        </member>
        <member name="M:Beyova.RestApi.RestApiClient.InvokeUsingBody(System.String,System.String,System.String,System.Object)">
            <summary>
            Invokes the using body.
            </summary>
            <param name="httpMethod">The HTTP method.</param>
            <param name="resourceName">Name of the resource.</param>
            <param name="resourceAction">The resource action.</param>
            <param name="parameter">The parameter.</param>
            <returns>JToken.</returns>
        </member>
        <member name="M:Beyova.RestApi.RestApiClient.InvokeAsJToken(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Invokes as j token.
            </summary>
            <param name="httpMethod">The HTTP method.</param>
            <param name="resourceName">Name of the resource.</param>
            <param name="resourceAction">The resource action.</param>
            <param name="key">The key.</param>
            <param name="queryString">The query string.</param>
            <param name="bodyJson">The body json.</param>
            <returns>JToken.</returns>
        </member>
        <member name="M:Beyova.RestApi.RestApiClient.CreateHttpRequest(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates the HTTP request.
            </summary>
            <param name="httpMethod">The HTTP method.</param>
            <param name="resourceName">Name of the resource.</param>
            <param name="resourceAction">The resource action.</param>
            <param name="key">The key.</param>
            <param name="queryString">The query string.</param>
            <returns>System.Net.HttpWebRequest.</returns>
        </member>
        <member name="M:Beyova.RestApi.RestApiClient.FillAdditionalData(System.Net.HttpWebRequest)">
            <summary>
            Fills the additional data.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
        </member>
        <member name="T:Beyova.RestApi.ApiContractAttribute">
            <summary>
            Class ApiContractAttribute. It is used to define interface which used as REST API.
            </summary>
        </member>
        <member name="P:Beyova.RestApi.ApiContractAttribute.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Beyova.RestApi.ApiContractAttribute.Name">
            <summary>
            Gets or sets the name.
            This name is used for as service identifier in <see cref="T:Beyova.ApiTracking.ApiEventLog"/> model.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Beyova.RestApi.ApiContractAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.RestApi.ApiContractAttribute" /> class.
            </summary>
            <param name="version">The version.</param>
            <param name="name">The name.</param>
        </member>
        <member name="T:Beyova.RestApi.ApiOperationAttribute">
            <summary>
            Class ApiUriAttribute.
            </summary>
        </member>
        <member name="P:Beyova.RestApi.ApiOperationAttribute.ResourceName">
            <summary>
            Gets or sets the name of the resource.
            </summary>
            <value>The name of the resource.</value>
        </member>
        <member name="P:Beyova.RestApi.ApiOperationAttribute.HttpMethod">
            <summary>
            Gets or sets the HTTP method.
            </summary>
            <value>The HTTP method.</value>
        </member>
        <member name="P:Beyova.RestApi.ApiOperationAttribute.Action">
            <summary>
            Gets or sets the action.
            </summary>
            <value>The action.</value>
        </member>
        <member name="M:Beyova.RestApi.ApiOperationAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.RestApi.ApiOperationAttribute" /> class.
            </summary>
            <param name="resourceName">The type.</param>
            <param name="httpMethod">The HTTP method.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Beyova.RestApi.ApiOperationAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.RestApi.ApiOperationAttribute" /> class.
            </summary>
            <param name="resourceType">Type of the resource.</param>
            <param name="httpMethod">The HTTP method.</param>
            <param name="action">The action.</param>
        </member>
        <member name="T:Beyova.RestApi.RestApiExtension">
            <summary>
            Class RestApiExtension.
            </summary>
        </member>
        <member name="M:Beyova.RestApi.RestApiExtension.ApiEventLogToString(Beyova.ApiTracking.ApiEventLog)">
            <summary>
            APIs the event log to string.
            </summary>
            <param name="log">The log.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.RestApi.RestApiExtension.ApiTraceLogToString(System.Text.StringBuilder,Beyova.ApiTracking.ApiTraceLogPiece,System.Int32)">
            <summary>
            APIs the trace log to string.
            </summary>
            <param name="builder">The builder.</param>
            <param name="log">The log.</param>
            <param name="level">The level.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.RestApi.RestApiExtension.ApiTraceLogToString(Beyova.ApiTracking.ApiTraceLog)">
            <summary>
            APIs the trace log to string.
            </summary>
            <param name="log">The log.</param>
            <returns>System.String.</returns>
        </member>
        <member name="F:Beyova.RestApi.RestApiExtension.apiUrlRegex">
            <summary>
            The API URL regex
            </summary>
        </member>
        <member name="F:Beyova.RestApi.RestApiExtension.proxyUrlRegex">
            <summary>
            The proxy URL regex
            </summary>
        </member>
        <member name="F:Beyova.RestApi.RestApiExtension.methodMatch">
            <summary>
            The method match
            </summary>
        </member>
        <member name="F:Beyova.RestApi.RestApiExtension.proxyMatch">
            <summary>
            The proxy match
            </summary>
        </member>
        <member name="M:Beyova.RestApi.RestApiExtension.GetRouteInfo(System.Web.HttpRequest,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Gets the route information.
            </summary>
            <param name="request">The request.</param>
            <param name="resourceName">Name of the resource.</param>
            <param name="version">The version.</param>
            <param name="parameter1">The parameter1.</param>
            <param name="parameter2">The parameter2.</param>
            <returns><c>true</c> if succeed to match, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Beyova.RestApi.RestApiExtension.FillRouteInfo(System.Web.HttpRequest,Beyova.RestApi.RuntimeContext)">
            <summary>
            Fills the route information.
            </summary>
            <param name="request">The request.</param>
            <param name="context">The context.</param>
            <returns><c>true</c> if succeed to match url format and fill route information, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Beyova.RestApi.RestApiExtension.GetProxyInfo(System.Web.HttpRequest,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Gets the proxy information.
            </summary>
            <param name="request">The request.</param>
            <param name="clientIdentifier">The client identifier.</param>
            <param name="destination">The destination.</param>
            <param name="httpMethod">The HTTP method.</param>
            <param name="body">The body.</param>
            <returns><c>true</c> if succeed to match, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Beyova.RestApi.RestApiExtension.ToDictionary(System.Collections.Generic.IEnumerable{Beyova.Api.ApiPermissionAttribute})">
            <summary>
            To the dictionary.
            </summary>
            <param name="methodPermissionAttributes">The method permission attributes.</param>
            <returns>Dictionary&lt;System.String, ApiPermission&gt;.</returns>
        </member>
        <member name="M:Beyova.RestApi.RestApiExtension.ValidateApiPermission(System.Collections.Generic.IList{System.String},System.Collections.Generic.IDictionary{System.String,Beyova.Api.ApiPermission})">
            <summary>
            Validates the API permission. Return the permission which cause validation failure.
            </summary>
            <param name="userPermissions">The user permissions.</param>
            <param name="methodPermissions">The method permissions.</param>
            <returns>System.Nullable&lt;KeyValuePair&lt;System.String, ApiPermission&gt;&gt;.</returns>
        </member>
        <member name="M:Beyova.RestApi.RestApiExtension.ValidateApiPermission(System.Collections.Generic.IList{System.String},System.Collections.Generic.IDictionary{System.String,Beyova.Api.ApiPermission},System.String,System.String)">
            <summary>
            Validates the API permission.
            </summary>
            <param name="userPermissions">The user permissions.</param>
            <param name="methodPermissions">The method permissions.</param>
            <param name="token">The token.</param>
            <param name="methodName">Name of the method.</param>
            <returns>BaseException.</returns>
        </member>
        <member name="T:Beyova.CloudBinaryStorageOperator`2">
            <summary>
            Class CloudBinaryStorageOperator.
            </summary>
            <typeparam name="TCloudContainer">The type of the T cloud container.</typeparam>
            <typeparam name="TCloudBlobObject">The type of the T cloud BLOB object.</typeparam>
        </member>
        <member name="M:Beyova.CloudBinaryStorageOperator`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.CloudBinaryStorageOperator`2"/> class.
            </summary>
        </member>
        <member name="M:Beyova.CloudBinaryStorageOperator`2.CreateBlobUploadCredential(System.String,System.String,System.Int32)">
            <summary>
            Creates the BLOB upload credential.
            </summary>
            <param name="containerName">Name of the container.</param>
            <param name="blobIdentifier">The BLOB identifier.</param>
            <param name="expireOffsetInMinute">The expire offset in minute.</param>
            <returns>BinaryStorageActionCredential.</returns>
        </member>
        <member name="M:Beyova.CloudBinaryStorageOperator`2.CreateBlobDownloadCredential(System.String,System.String,System.Int32)">
            <summary>
            Creates the BLOB download credential.
            </summary>
            <param name="containerName">Name of the container.</param>
            <param name="blobIdentifier">The BLOB identifier.</param>
            <param name="expireOffsetInMinute">The expire offset in minute.</param>
            <returns>BinaryStorageActionCredential.</returns>
        </member>
        <member name="M:Beyova.CloudBinaryStorageOperator`2.DeleteBlob(Beyova.BinaryStorageIdentifier)">
            <summary>
            Deletes the BLOB.
            </summary>
            <param name="storageIdentifier">The storage identifier.</param>
        </member>
        <member name="M:Beyova.CloudBinaryStorageOperator`2.DownloadBinaryBytesByCredentialUri(System.String)">
            <summary>
            Downloads the binary bytes by credential.
            </summary>
            <param name="blobUri">The BLOB URI.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:Beyova.CloudBinaryStorageOperator`2.DownloadBinaryStreamByCredentialUri(System.String)">
            <summary>
            Downloads the binary stream by credential.
            </summary>
            <param name="blobUri">The BLOB URI.</param>
            <returns>Stream.</returns>
        </member>
        <member name="M:Beyova.CloudBinaryStorageOperator`2.UploadBinaryBytesByCredentialUri(System.String,System.Byte[],System.String,System.String)">
            <summary>
            Uploads the binary bytes by credential.
            </summary>
            <param name="blobUri">The BLOB URI.</param>
            <param name="dataBytes">The data bytes.</param>
            <param name="contentType">Type of the content.</param>
            <param name="fileName">Name of the file.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CloudBinaryStorageOperator`2.UploadBinaryStreamByCredentialUri(System.String,System.IO.Stream,System.String,System.String)">
            <summary>
            Uploads the binary stream by credential URI.
            </summary>
            <param name="blobUri">The BLOB URI.</param>
            <param name="stream">The stream.</param>
            <param name="contentType">Type of the content.</param>
            <param name="fileName">Name of the file.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CloudBinaryStorageOperator`2.FetchProperty(System.String,System.String,System.String@,System.String@,System.Int64@,System.String@)">
            <summary>
            Fetches the property.
            </summary>
            <param name="containerName">Name of the container.</param>
            <param name="blobIdentifier">The BLOB identifier.</param>
            <param name="eTag">The e tag.</param>
            <param name="md5">The MD5.</param>
            <param name="length">The length.</param>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CloudBinaryStorageOperator`2.GetContainers">
            <summary>
            Gets the containers.
            </summary>
            <returns>IEnumerable&lt;System.String&gt;.</returns>
        </member>
        <member name="M:Beyova.CloudBinaryStorageOperator`2.QueryBlob(`0,System.String,System.String,System.Nullable{System.Int64},System.Int32)">
            <summary>
            Queries the BLOB.
            </summary>
            <param name="container">The container.</param>
            <param name="contentType">Type of the content.</param>
            <param name="md5">The MD5.</param>
            <param name="length">The length.</param>
            <param name="limitCount">The limit count.</param>
            <returns>IEnumerable&lt;TCloudBlobObject&gt;.</returns>
        </member>
        <member name="M:Beyova.CloudBinaryStorageOperator`2.QueryBlob(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int32)">
            <summary>
            Queries the BLOB.
            </summary>
            <param name="container">The container.</param>
            <param name="contentType">Type of the content.</param>
            <param name="md5">The MD5.</param>
            <param name="length">The length.</param>
            <param name="limitCount">The limit count.</param>
            <returns>IEnumerable&lt;TCloudBlobObject&gt;.</returns>
        </member>
        <member name="M:Beyova.CloudBinaryStorageOperator`2.QueryBinaryBlobByContainer(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int32)">
            <summary>
            Queries the binary BLOB by container.
            </summary>
            <param name="containerName">Name of the container.</param>
            <param name="contentType">Type of the content.</param>
            <param name="md5">The MD5.</param>
            <param name="length">The length.</param>
            <param name="limitCount">The limit count.</param>
            <returns>List&lt;BinaryStorageMetaBase&gt;.</returns>
        </member>
        <member name="M:Beyova.CloudBinaryStorageOperator`2.Exists(Beyova.BinaryStorageIdentifier)">
            <summary>
            Check Existence of the specified identifier.
            </summary>
            <param name="identifier">The identifier.</param>
            <returns><c>true</c> if existed, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Beyova.Fun.FaceConstants">
            <summary>
            Class FaceConstants.
            </summary>
        </member>
        <member name="F:Beyova.Fun.FaceConstants.SmileFace">
            <summary>
            The smile face: ☺
            </summary>
        </member>
        <member name="F:Beyova.Fun.FaceConstants.SmileFace2">
            <summary>
            The smile face: ☻
            </summary>
        </member>
        <member name="F:Beyova.Fun.FaceConstants.Heart">
            <summary>
            The heart: ♥
            </summary>
        </member>
        <member name="F:Beyova.Fun.FaceConstants.Diamond">
            <summary>
            The diamond:♦
            </summary>
        </member>
        <member name="F:Beyova.Fun.FaceConstants.Club">
            <summary>
            The club: ♣
            </summary>
        </member>
        <member name="F:Beyova.Fun.FaceConstants.Spade">
            <summary>
            The spade: ♠
            </summary>
        </member>
        <member name="F:Beyova.Fun.FaceConstants.Male">
            <summary>
            The male: ♂
            </summary>
        </member>
        <member name="F:Beyova.Fun.FaceConstants.Female">
            <summary>
            The female: ♀
            </summary>
        </member>
        <member name="F:Beyova.Fun.FaceConstants.Music">
            <summary>
            The music: ♫
            </summary>
        </member>
        <member name="F:Beyova.Fun.FaceConstants.Note">
            <summary>
            The note: ♪
            </summary>
        </member>
        <member name="F:Beyova.Fun.FaceConstants.Sunshine">
            <summary>
            The sunshine: ☼
            </summary>
        </member>
        <member name="T:Beyova.StringConstants">
            <summary>
            Class StringConstants
            </summary>
        </member>
        <member name="F:Beyova.StringConstants.WhiteSpace">
            <summary>
            The white space
            </summary>
        </member>
        <member name="T:Beyova.CommonServiceConstants">
            <summary>
            Class CommonServiceConstants
            </summary>
        </member>
        <member name="T:Beyova.CommonServiceConstants.Permission">
            <summary>
            Class Permission.
            </summary>
        </member>
        <member name="F:Beyova.CommonServiceConstants.Permission.ProvisioningAdministration">
            <summary>
            The provisioning administration
            </summary>
        </member>
        <member name="F:Beyova.CommonServiceConstants.Permission.BinaryStorageDataAdministrator">
            <summary>
            The binary storage data administrator
            </summary>
        </member>
        <member name="F:Beyova.CommonServiceConstants.Permission.AdministrationOwner">
            <summary>
            The administration owner
            </summary>
        </member>
        <member name="F:Beyova.CommonServiceConstants.Permission.Administrator">
            <summary>
            The administrator
            </summary>
        </member>
        <member name="T:Beyova.XmlConstants">
            <summary>
            Class XmlConstants.
            </summary>
        </member>
        <member name="F:Beyova.XmlConstants.node_Dictionary">
            <summary>
            The node_ dictionary
            </summary>
        </member>
        <member name="F:Beyova.XmlConstants.node_List">
            <summary>
            The node_ list
            </summary>
        </member>
        <member name="F:Beyova.XmlConstants.node_Item">
            <summary>
            The node_ item
            </summary>
        </member>
        <member name="F:Beyova.XmlConstants.node_Matrix">
            <summary>
            The node_ matrix
            </summary>
        </member>
        <member name="F:Beyova.XmlConstants.attribute_Key">
            <summary>
            The attribute_ key
            </summary>
        </member>
        <member name="F:Beyova.XmlConstants.attribute_Value">
            <summary>
            The attribute_ value
            </summary>
        </member>
        <member name="T:Beyova.HttpConstants">
            <summary>
            Class HttpConstants.
            </summary>
        </member>
        <member name="T:Beyova.HttpConstants.HttpMethod">
            <summary>
            Class HttpMethod.
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpMethod.Get">
            <summary>
            The get
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpMethod.Post">
            <summary>
            The post
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpMethod.Put">
            <summary>
            The put
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpMethod.Delete">
            <summary>
            The delete
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpMethod.Head">
            <summary>
            The head
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpMethod.Options">
            <summary>
            The options
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpMethod.Trace">
            <summary>
            The trace
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpMethod.Patch">
            <summary>
            The patch
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpMethod.Lock">
            <summary>
            The lock
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpMethod.Unlock">
            <summary>
            The unlock
            </summary>
        </member>
        <member name="T:Beyova.HttpConstants.HttpHeader">
            <summary>
            Class HttpHeader.
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpHeader.TOKEN">
            <summary>
            The token
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpHeader.ADMINTOKEN">
            <summary>
            The admin token
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpHeader.SECUREKEY">
            <summary>
            The secure key
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpHeader.CLIENTIDENTIFIER">
            <summary>
            The client identifier
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpHeader.SERVEREXITTIME">
            <summary>
            The server exit time
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpHeader.SERVERENTRYTIME">
            <summary>
            The server entry time
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpHeader.SERVERNAME">
            <summary>
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpHeader.ORIGINAL">
            <summary>
            The original IP address
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpHeader.TRACEID">
            <summary>
            The trace ID
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpHeader.ContentEncoding">
            <summary>
            The content encoding
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpHeader.AcceptEncoding">
            <summary>
            The accept encoding
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpHeader.TransferEncoding">
            <summary>
            The transfer encoding
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpHeader.ContentLength">
            <summary>
            The content length
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpHeader.AccessControlAllowOrigin">
            <summary>
            The access control allow origin
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpHeader.AccessControlAllowHeaders">
            <summary>
            The access control allow headers
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpHeader.AccessControlAllowMethods">
            <summary>
            The access control allow methods
            </summary>
        </member>
        <member name="T:Beyova.HttpConstants.HttpProtocols">
            <summary>
            Class HttpProtocols.
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpProtocols.Http">
            <summary>
            The HTTP
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpProtocols.HttpProtocol">
            <summary>
            The HTTP protocol
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpProtocols.Https">
            <summary>
            The HTTPS
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpProtocols.HttpsProtocol">
            <summary>
            The HTTPS protocol
            </summary>
        </member>
        <member name="T:Beyova.HttpConstants.HttpValues">
            <summary>
            Class HttpValues.
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpValues.GZip">
            <summary>
            The GZIP
            </summary>
        </member>
        <member name="F:Beyova.HttpConstants.HttpValues.DefaultContentType">
            <summary>
            The default content type: application/octet-stream
            </summary>
        </member>
        <member name="T:Beyova.ExceptionSystem.ExceptionScene">
            <summary>
            Class ExceptionScene.
            </summary>
        </member>
        <member name="P:Beyova.ExceptionSystem.ExceptionScene.MethodName">
            <summary>
            Gets or sets the name of the method.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.ExceptionScene.FilePath">
            <summary>
            Gets or sets the file path.
            </summary>
            <value>The file path.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.ExceptionScene.LineNumber">
            <summary>
            Gets or sets the line number.
            </summary>
            <value>The line number.</value>
        </member>
        <member name="T:Beyova.ExceptionSystem.DynamicCompileException">
            <summary>
            Class DynamicCompileException.
            </summary>
        </member>
        <member name="M:Beyova.ExceptionSystem.DynamicCompileException.#ctor(System.CodeDom.Compiler.CompilerErrorCollection,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.DynamicCompileException" /> class.
            </summary>
            <param name="errorCollection">The error collection.</param>
            <param name="sourceCode">The source code.</param>
        </member>
        <member name="M:Beyova.ExceptionSystem.DynamicCompileException.ErrorCollectionToStringArray(System.CodeDom.Compiler.CompilerErrorCollection)">
            <summary>
            Errors the collection to string array.
            </summary>
            <param name="errorCollection">The error collection.</param>
            <returns>List&lt;System.String&gt;.</returns>
        </member>
        <member name="T:Beyova.ExceptionSystem.WorkflowOperationException">
            <summary>
            Class WorkflowOperationException.
            </summary>
        </member>
        <member name="M:Beyova.ExceptionSystem.WorkflowOperationException.#ctor(System.String,System.String,System.Exception,System.Object,Beyova.ExceptionSystem.FriendlyHint,Beyova.ExceptionSystem.ExceptionScene)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.WorkflowOperationException" /> class.
            </summary>
            <param name="workflowName">Name of the workflow.</param>
            <param name="state">The state.</param>
            <param name="innerException">The inner exception.</param>
            <param name="data">The data.</param>
            <param name="hint">The hint.</param>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:Beyova.ExceptionSystem.WorkflowOperationException.#ctor(System.Guid,System.DateTime,System.String,Beyova.ExceptionSystem.ExceptionScene,Beyova.ExceptionSystem.ExceptionCode,System.Exception,Beyova.BaseCredential,Newtonsoft.Json.Linq.JToken,Beyova.ExceptionSystem.FriendlyHint)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.OperationForbiddenException" /> class.
            </summary>
            <param name="key">The key.</param>
            <param name="createdStamp">The created stamp.</param>
            <param name="message">The message.</param>
            <param name="scene">The scene.</param>
            <param name="code">The code.</param>
            <param name="innerException">The inner exception.</param>
            <param name="operatorCredential">The operator credential.</param>
            <param name="data">The data.</param>
            <param name="hint">The hint.</param>
        </member>
        <member name="T:Beyova.ExceptionSystem.SqlStoredProcedureException">
            <summary>
            Class SqlStoredProcedureException.
            </summary>
        </member>
        <member name="M:Beyova.ExceptionSystem.SqlStoredProcedureException.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.SqlStoredProcedureException"/> class.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="message">The message.</param>
            <param name="errorCode">The error code.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Beyova.ExceptionSystem.SqlStoredProcedureException.#ctor(System.String,Beyova.ExceptionSystem.ExceptionCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.SqlStoredProcedureException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="exceptionCode">The exception code.</param>
        </member>
        <member name="T:Beyova.ExceptionSystem.HttpOperationException">
            <summary>
            Class HttpOperationException.
            </summary>
        </member>
        <member name="T:Beyova.ExceptionSystem.HttpOperationException.HttpExceptionReference">
            <summary>
            Class HttpExceptionReference.
            </summary>
        </member>
        <member name="P:Beyova.ExceptionSystem.HttpOperationException.HttpExceptionReference.DestinationUrl">
            <summary>
            Gets or sets the destination URL.
            </summary>
            <value>The destination URL.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.HttpOperationException.HttpExceptionReference.HttpMethod">
            <summary>
            Gets or sets the HTTP method.
            </summary>
            <value>The HTTP method.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.HttpOperationException.HttpExceptionReference.BodyLength">
            <summary>
            Gets or sets the length of the body.
            </summary>
            <value>The length of the body.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.HttpOperationException.HttpExceptionReference.WebExceptionStatus">
            <summary>
            Gets or sets the web exception status.
            </summary>
            <value>The web exception status.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.HttpOperationException.HttpExceptionReference.ResponseText">
            <summary>
            Gets or sets the response text.
            </summary>
            <value>The response text.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.HttpOperationException.HttpExceptionReference.HttpStatusCode">
            <summary>
            Gets or sets the HTTP status code.
            </summary>
            <value>The HTTP status code.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.HttpOperationException.ExceptionReference">
            <summary>
            Gets the exception reference.
            </summary>
            <value>The exception reference.</value>
        </member>
        <member name="M:Beyova.ExceptionSystem.HttpOperationException.#ctor(System.String,System.String,System.String,System.Nullable{System.Int64},System.String,System.Net.HttpStatusCode,System.Net.WebExceptionStatus,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.HttpOperationException" /> class. For broken requests.
            </summary>
            <param name="destinationUrl">The destination URL.</param>
            <param name="httpMethod">The HTTP method.</param>
            <param name="message">The message.</param>
            <param name="bodyLength">Length of the body.</param>
            <param name="responseText">The response text.</param>
            <param name="httpStatusCode">The HTTP status code.</param>
            <param name="webExceptionStatus">The web exception status.</param>
            <param name="serverIdentifier">The server identifier.</param>
        </member>
        <member name="M:Beyova.ExceptionSystem.HttpOperationException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Net.HttpStatusCode,Beyova.ExceptionSystem.BaseException,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.HttpOperationException" /> class.
            </summary>
            <param name="destinationUrl">The destination URL.</param>
            <param name="httpMethod">The HTTP method.</param>
            <param name="bodyLength">Length of the body.</param>
            <param name="httpStatusCode">The HTTP status code.</param>
            <param name="innerException">The inner exception.</param>
            <param name="serverIdentifier">The server identifier.</param>
        </member>
        <member name="M:Beyova.ExceptionSystem.HttpOperationException.#ctor(System.Guid,System.DateTime,System.String,Beyova.ExceptionSystem.ExceptionScene,Beyova.ExceptionSystem.ExceptionCode,System.Exception,Beyova.BaseCredential,Newtonsoft.Json.Linq.JToken,Beyova.ExceptionSystem.FriendlyHint)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.HttpOperationException" /> class. For restore from <c>ExceptionInfo</c>.
            </summary>
            <param name="key">The key.</param>
            <param name="createdStamp">The created stamp.</param>
            <param name="message">The message.</param>
            <param name="scene">The scene.</param>
            <param name="code">The code.</param>
            <param name="innerException">The inner exception.</param>
            <param name="operatorCredential">The operator credential.</param>
            <param name="data">The data.</param>
            <param name="hint">The hint.</param>
        </member>
        <member name="T:Beyova.ExceptionSystem.FriendlyHint">
            <summary>
            Class FriendlyHint.
            </summary>
        </member>
        <member name="P:Beyova.ExceptionSystem.FriendlyHint.CauseObjects">
            <summary>
            Gets or sets the cause objects.
            </summary>
            <value>The cause objects.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.FriendlyHint.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.FriendlyHint.HintCode">
            <summary>
            Gets or sets the hint code.
            </summary>
            <value>The hint code.</value>
        </member>
        <member name="T:Beyova.ExceptionSystem.UnimplementedException">
            <summary>
            Class UnimplementedException.
            </summary>
        </member>
        <member name="M:Beyova.ExceptionSystem.UnimplementedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.UnimplementedException" /> class.
            </summary>
            <param name="objectIdentity">The object identity.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Beyova.ExceptionSystem.UnimplementedException.#ctor(System.Guid,System.DateTime,System.String,Beyova.ExceptionSystem.ExceptionScene,Beyova.ExceptionSystem.ExceptionCode,System.Exception,Beyova.BaseCredential,Newtonsoft.Json.Linq.JToken,Beyova.ExceptionSystem.FriendlyHint)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.UnimplementedException"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="createdStamp">The created stamp.</param>
            <param name="message">The message.</param>
            <param name="scene">The scene.</param>
            <param name="code">The code.</param>
            <param name="innerException">The inner exception.</param>
            <param name="operatorCredential">The operator credential.</param>
            <param name="data">The data.</param>
            <param name="hint">The hint.</param>
        </member>
        <member name="T:Beyova.ExceptionSystem.ExceptionBase">
            <summary>
            Class ExceptionBase.
            </summary>
        </member>
        <member name="P:Beyova.ExceptionSystem.ExceptionBase.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.ExceptionBase.TargetSite">
            <summary>
            Gets or sets the target site.
            </summary>
            <value>The target site.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.ExceptionBase.StackTrace">
            <summary>
            Gets or sets the stack trace.
            </summary>
            <value>The stack trace.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.ExceptionBase.ExceptionType">
            <summary>
            Gets or sets the type of the exception.
            </summary>
            <value>The type of the exception.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.ExceptionBase.Level">
            <summary>
            Gets or sets the level.
            </summary>
            <value>The level.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.ExceptionBase.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.ExceptionBase.OperatorCredential">
            <summary>
            Gets or sets the operator credential.
            </summary>
            <value>The operator credential.</value>
        </member>
        <member name="M:Beyova.ExceptionSystem.ExceptionBase.#ctor(Beyova.ExceptionSystem.ExceptionBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.ExceptionBase" /> class.
            </summary>
            <param name="exceptionBase">The exception base.</param>
        </member>
        <member name="T:Beyova.ExceptionSystem.BaseException">
            <summary>
            Class BaseException.
            </summary>
        </member>
        <member name="P:Beyova.ExceptionSystem.BaseException.Hint">
            <summary>
            Gets or sets the hint.
            </summary>
            <value>The hint.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.BaseException.Code">
            <summary>
            Gets or sets the code.
            </summary>
            <value>The code.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.BaseException.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.BaseException.ReferenceData">
            <summary>
            Gets or sets the reference data.
            </summary>
            <value>The reference data.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.BaseException.CreatedStamp">
            <summary>
            Gets or sets the created stamp.
            </summary>
            <value>The created stamp.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.BaseException.OperatorCredential">
            <summary>
            Gets or sets the operator credential.
            </summary>
            <value>The operator credential.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.BaseException.Scene">
            <summary>
            Gets or sets the scene.
            </summary>
            <value>The scene.</value>
        </member>
        <member name="M:Beyova.ExceptionSystem.BaseException.#ctor(System.String,Beyova.ExceptionSystem.ExceptionCode,System.Exception,System.Object,Beyova.ExceptionSystem.FriendlyHint,Beyova.ExceptionSystem.ExceptionScene)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.BaseException" /> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="code">The exception code.</param>
            <param name="innerException">The inner exception.</param>
            <param name="data">The data.</param>
            <param name="hint">The hint.</param>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:Beyova.ExceptionSystem.BaseException.#ctor(System.Guid,System.DateTime,System.String,Beyova.ExceptionSystem.ExceptionScene,Beyova.ExceptionSystem.ExceptionCode,System.Exception,Beyova.BaseCredential,Newtonsoft.Json.Linq.JToken,Beyova.ExceptionSystem.FriendlyHint)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.BaseException" /> class. This is used internally for restoring exception instance from ExceptionInfo.
            </summary>
            <param name="key">The key.</param>
            <param name="createdStamp">The created stamp.</param>
            <param name="message">The message.</param>
            <param name="scene">The scene.</param>
            <param name="code">The code.</param>
            <param name="innerException">The inner exception.</param>
            <param name="operatorCredential">The operator credential.</param>
            <param name="data">The data.</param>
            <param name="hint">The hint.</param>
        </member>
        <member name="T:Beyova.ExceptionSystem.CreditNotAffordException">
            <summary>
            Class CreditNotAffordException.
            </summary>
        </member>
        <member name="M:Beyova.ExceptionSystem.CreditNotAffordException.#ctor(System.String,System.String,System.Exception,System.String,System.Object,Beyova.ExceptionSystem.FriendlyHint,Beyova.ExceptionSystem.ExceptionScene)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.CreditNotAffordException" /> class.
            </summary>
            <param name="resourceName">Name of the resource.</param>
            <param name="resourceIdentifier">The resource identifier.</param>
            <param name="innerException">The inner exception.</param>
            <param name="minor">The minor.</param>
            <param name="data">The data.</param>
            <param name="hint">The hint.</param>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:Beyova.ExceptionSystem.CreditNotAffordException.#ctor(System.Guid,System.DateTime,System.String,Beyova.ExceptionSystem.ExceptionScene,Beyova.ExceptionSystem.ExceptionCode,System.Exception,Beyova.BaseCredential,Newtonsoft.Json.Linq.JToken,Beyova.ExceptionSystem.FriendlyHint)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.CreditNotAffordException" /> class.
            </summary>
            <param name="key">The key.</param>
            <param name="createdStamp">The created stamp.</param>
            <param name="message">The message.</param>
            <param name="scene">The scene.</param>
            <param name="code">The code.</param>
            <param name="innerException">The inner exception.</param>
            <param name="operatorCredential">The operator credential.</param>
            <param name="data">The data.</param>
            <param name="hint">The hint.</param>
        </member>
        <member name="T:Beyova.ExceptionSystem.DataConflictException">
            <summary>
            Exception class for data conflicts
            </summary>
        </member>
        <member name="M:Beyova.ExceptionSystem.DataConflictException.#ctor(System.String,System.String,System.Exception,System.Object,Beyova.ExceptionSystem.FriendlyHint,Beyova.ExceptionSystem.ExceptionScene)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.DataConflictException" /> class.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="objectIdentity">The object identity.</param>
            <param name="innerException">The inner exception.</param>
            <param name="data">The data.</param>
            <param name="hint">The hint.</param>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:Beyova.ExceptionSystem.DataConflictException.#ctor(System.Guid,System.DateTime,System.String,Beyova.ExceptionSystem.ExceptionScene,Beyova.ExceptionSystem.ExceptionCode,System.Exception,Beyova.BaseCredential,Newtonsoft.Json.Linq.JToken,Beyova.ExceptionSystem.FriendlyHint)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.DataConflictException" /> class.
            </summary>
            <param name="key">The key.</param>
            <param name="createdStamp">The created stamp.</param>
            <param name="message">The message.</param>
            <param name="scene">The scene.</param>
            <param name="code">The code.</param>
            <param name="innerException">The inner exception.</param>
            <param name="operatorCredential">The operator credential.</param>
            <param name="data">The data.</param>
            <param name="hint">The hint.</param>
        </member>
        <member name="T:Beyova.ExceptionSystem.ExceptionCode">
            <summary>
            Struct ExceptionCode
            </summary>
        </member>
        <member name="T:Beyova.ExceptionSystem.ExceptionCode.MajorCode">
            <summary>
            Enum MajorCode
            </summary>
        </member>
        <member name="F:Beyova.ExceptionSystem.ExceptionCode.MajorCode.Undefined">
            <summary>
            Value indicating it is undefined
            </summary>
        </member>
        <member name="F:Beyova.ExceptionSystem.ExceptionCode.MajorCode.NullOrInvalidValue">
            <summary>
            Value indicating it is null or invalid value
            </summary>
        </member>
        <member name="F:Beyova.ExceptionSystem.ExceptionCode.MajorCode.UnauthorizedOperation">
            <summary>
            Value indicating it is unauthorized operation
            </summary>
        </member>
        <member name="F:Beyova.ExceptionSystem.ExceptionCode.MajorCode.CreditNotAfford">
            <summary>
            Value indicating it is credit not afford
            </summary>
        </member>
        <member name="F:Beyova.ExceptionSystem.ExceptionCode.MajorCode.OperationForbidden">
            <summary>
            Value indicating it is operation forbidden
            </summary>
        </member>
        <member name="F:Beyova.ExceptionSystem.ExceptionCode.MajorCode.ResourceNotFound">
            <summary>
            Value indicating it is resource not found
            </summary>
        </member>
        <member name="F:Beyova.ExceptionSystem.ExceptionCode.MajorCode.DataConflict">
            <summary>
            Value indicating it is data conflict
            </summary>
        </member>
        <member name="F:Beyova.ExceptionSystem.ExceptionCode.MajorCode.OperationFailure">
            <summary>
            Value indicating it is operation failure
            </summary>
        </member>
        <member name="F:Beyova.ExceptionSystem.ExceptionCode.MajorCode.NotImplemented">
            <summary>
            Value indicating it is not implemented
            </summary>
        </member>
        <member name="F:Beyova.ExceptionSystem.ExceptionCode.MajorCode.ServiceUnavailable">
            <summary>
            Value indicating it is service unavailable
            </summary>
        </member>
        <member name="F:Beyova.ExceptionSystem.ExceptionCode.MajorCode.HttpBlockError">
            <summary>
            The HTTP block error
            </summary>
        </member>
        <member name="P:Beyova.ExceptionSystem.ExceptionCode.Major">
            <summary>
            Gets or sets the major.
            </summary>
            <value>The major.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.ExceptionCode.Minor">
            <summary>
            Gets or sets the minor.
            <remarks>
            This value is to indicate the specific case for the major code.
            For instance, when <c>Major</c> is set as <c>UnauthorizedOperation</c>, this value can be set as <c>Token</c>, <c>User</c>, <c>Password</c> or <c>Expired</c> for describing case in simple.
            It is strongly recommended to set one word/term only.
            </remarks>
            </summary>
            <value>The minor.</value>
        </member>
        <member name="M:Beyova.ExceptionSystem.ExceptionCode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.ExceptionCode"/> class.
            </summary>
        </member>
        <member name="M:Beyova.ExceptionSystem.ExceptionCode.#ctor(Beyova.ExceptionSystem.ExceptionCode.MajorCode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.ExceptionCode"/> struct.
            </summary>
            <param name="major">The major.</param>
            <param name="minor">The minor.</param>
        </member>
        <member name="M:Beyova.ExceptionSystem.ExceptionCode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.ExceptionCode"/> struct.
            </summary>
            <param name="stringValue">The string value.</param>
        </member>
        <member name="M:Beyova.ExceptionSystem.ExceptionCode.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Beyova.ExceptionSystem.ExceptionCode.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.ExceptionSystem.ExceptionCode.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Beyova.ExceptionSystem.ExceptionCode.ToEventLogEntryType">
            <summary>
            To the type of the event log entry.
            </summary>
            <returns>EventLogEntryType.</returns>
        </member>
        <member name="M:Beyova.ExceptionSystem.ExceptionCode.ToHttpStatusCode">
            <summary>
            To the HTTP status code.
            </summary>
            <returns>HttpStatusCode.</returns>
        </member>
        <member name="M:Beyova.ExceptionSystem.ExceptionCode.op_Explicit(System.Int32)~Beyova.ExceptionSystem.ExceptionCode">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Beyova.ExceptionSystem.ExceptionCode"/>.
            </summary>
            <param name="exceptionMajorCode">The exception major code.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Beyova.ExceptionSystem.ExceptionCode.op_Explicit(Beyova.ExceptionSystem.ExceptionCode)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:Beyova.ExceptionSystem.ExceptionCode"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="exceptionCode">The exception code.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Beyova.ExceptionSystem.ExceptionInfo">
            <summary>
            Class ExceptionInfo.
            </summary>
        </member>
        <member name="T:Beyova.ExceptionSystem.ExceptionInfo.ExceptionCriticality">
            <summary>
            Enum ExceptionCriticality
            </summary>
        </member>
        <member name="F:Beyova.ExceptionSystem.ExceptionInfo.ExceptionCriticality.Fetal">
            <summary>
            The fetal.
            Commonly, it is used by forgotten to set, or errors might make system crash.
            </summary>
        </member>
        <member name="F:Beyova.ExceptionSystem.ExceptionInfo.ExceptionCriticality.Error">
            <summary>
            The error
            </summary>
        </member>
        <member name="F:Beyova.ExceptionSystem.ExceptionInfo.ExceptionCriticality.Warning">
            <summary>
            The warning
            </summary>
        </member>
        <member name="F:Beyova.ExceptionSystem.ExceptionInfo.ExceptionCriticality.Information">
            <summary>
            The information
            </summary>
        </member>
        <member name="F:Beyova.ExceptionSystem.ExceptionInfo.ExceptionCriticality.Debug">
            <summary>
            The debug
            </summary>
        </member>
        <member name="P:Beyova.ExceptionSystem.ExceptionInfo.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.ExceptionInfo.InnerException">
            <summary>
            Gets or sets the inner exception.
            </summary>
            <value>The inner exception.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.ExceptionInfo.Code">
            <summary>
            Gets or sets the code.
            </summary>
            <value>The code.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.ExceptionInfo.CreatedStamp">
            <summary>
            Gets or sets the created stamp.
            </summary>
            <value>The created stamp.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.ExceptionInfo.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.ExceptionInfo.Scene">
            <summary>
            Gets or sets the scene.
            </summary>
            <value>The scene.</value>
        </member>
        <member name="P:Beyova.ExceptionSystem.ExceptionInfo.Hint">
            <summary>
            Gets or sets the hint.
            </summary>
            <value>The hint.</value>
        </member>
        <member name="M:Beyova.ExceptionSystem.ExceptionInfo.#ctor(Beyova.ExceptionSystem.ExceptionBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.ExceptionInfo"/> class.
            </summary>
        </member>
        <member name="T:Beyova.ExceptionSystem.InitializationFailureException">
            <summary>
            Class InitializationFailureException.
            </summary>
        </member>
        <member name="M:Beyova.ExceptionSystem.InitializationFailureException.#ctor(System.String,System.Exception,System.String,System.Object,Beyova.ExceptionSystem.FriendlyHint,Beyova.ExceptionSystem.ExceptionScene)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.InitializationFailureException" /> class.
            </summary>
            <param name="target">The object identity.</param>
            <param name="innerException">The inner exception.</param>
            <param name="minor">The minor.</param>
            <param name="data">The data.</param>
            <param name="hint">The hint.</param>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:Beyova.ExceptionSystem.InitializationFailureException.#ctor(System.Guid,System.DateTime,System.String,Beyova.ExceptionSystem.ExceptionScene,Beyova.ExceptionSystem.ExceptionCode,System.Exception,Beyova.BaseCredential,Newtonsoft.Json.Linq.JToken,Beyova.ExceptionSystem.FriendlyHint)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.InitializationFailureException" /> class.
            </summary>
            <param name="key">The key.</param>
            <param name="createdStamp">The created stamp.</param>
            <param name="message">The message.</param>
            <param name="scene">The scene.</param>
            <param name="code">The code.</param>
            <param name="innerException">The inner exception.</param>
            <param name="operatorCredential">The operator credential.</param>
            <param name="data">The data.</param>
            <param name="hint">The hint.</param>
        </member>
        <member name="T:Beyova.ExceptionSystem.InvalidObjectException">
            <summary>
            Class InvalidObjectException.
            </summary>
        </member>
        <member name="M:Beyova.ExceptionSystem.InvalidObjectException.#ctor(System.String,System.Exception,System.Object,System.String,Beyova.ExceptionSystem.FriendlyHint,Beyova.ExceptionSystem.ExceptionScene)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.InvalidObjectException" /> class.
            </summary>
            <param name="objectIdentity">The object identity.</param>
            <param name="innerException">The inner exception.</param>
            <param name="data">The data.</param>
            <param name="reason">The reason.</param>
            <param name="hint">The hint.</param>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:Beyova.ExceptionSystem.InvalidObjectException.#ctor(System.Exception,System.Object,System.String,Beyova.ExceptionSystem.FriendlyHint,Beyova.ExceptionSystem.ExceptionScene)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.InvalidObjectException" /> class.
            </summary>
            <param name="innerException">The inner exception.</param>
            <param name="data">The data.</param>
            <param name="reason">The reason.</param>
            <param name="hint">The hint.</param>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:Beyova.ExceptionSystem.InvalidObjectException.#ctor(System.Guid,System.DateTime,System.String,Beyova.ExceptionSystem.ExceptionScene,Beyova.ExceptionSystem.ExceptionCode,System.Exception,Beyova.BaseCredential,Newtonsoft.Json.Linq.JToken,Beyova.ExceptionSystem.FriendlyHint)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.InvalidObjectException" /> class.
            </summary>
            <param name="key">The key.</param>
            <param name="createdStamp">The created stamp.</param>
            <param name="message">The message.</param>
            <param name="scene">The scene.</param>
            <param name="code">The code.</param>
            <param name="innerException">The inner exception.</param>
            <param name="operatorCredential">The operator credential.</param>
            <param name="data">The data.</param>
            <param name="hint">The hint.</param>
        </member>
        <member name="T:Beyova.ExceptionSystem.NullObjectException">
            <summary>
            Class NullObjectException.
            </summary>
        </member>
        <member name="M:Beyova.ExceptionSystem.NullObjectException.#ctor(System.String,Beyova.ExceptionSystem.ExceptionScene)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.NullObjectException" /> class.
            </summary>
            <param name="objectIdentity">The object identity.</param>
            <param name="scene">The scene.</param>
        </member>
        <member name="T:Beyova.ExceptionSystem.OperationFailureException">
            <summary>
            Class OperationFailureException.
            </summary>
        </member>
        <member name="M:Beyova.ExceptionSystem.OperationFailureException.#ctor(System.Exception,System.Object,System.String,Beyova.ExceptionSystem.FriendlyHint,Beyova.ExceptionSystem.ExceptionScene)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.OperationFailureException" /> class.
            </summary>
            <param name="innerException">The inner exception.</param>
            <param name="data">The data.</param>
            <param name="minor">The minor.</param>
            <param name="hint">The hint.</param>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:Beyova.ExceptionSystem.OperationFailureException.#ctor(System.Guid,System.DateTime,System.String,Beyova.ExceptionSystem.ExceptionScene,Beyova.ExceptionSystem.ExceptionCode,System.Exception,Beyova.BaseCredential,Newtonsoft.Json.Linq.JToken,Beyova.ExceptionSystem.FriendlyHint)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.OperationFailureException" /> class.
            </summary>
            <param name="key">The key.</param>
            <param name="createdStamp">The created stamp.</param>
            <param name="message">The message.</param>
            <param name="scene">The scene.</param>
            <param name="code">The code.</param>
            <param name="innerException">The inner exception.</param>
            <param name="operatorCredential">The operator credential.</param>
            <param name="data">The data.</param>
            <param name="hint">The hint.</param>
        </member>
        <member name="T:Beyova.ExceptionSystem.OperationForbiddenException">
            <summary>
            Class OperationForbiddenException.
            </summary>
        </member>
        <member name="M:Beyova.ExceptionSystem.OperationForbiddenException.#ctor(System.String,System.String,System.Exception,System.Object,Beyova.ExceptionSystem.FriendlyHint,Beyova.ExceptionSystem.ExceptionScene)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.OperationForbiddenException" /> class.
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="reason">The reason.</param>
            <param name="innerException">The inner exception.</param>
            <param name="data">The data.</param>
            <param name="hint">The hint.</param>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:Beyova.ExceptionSystem.OperationForbiddenException.#ctor(System.Guid,System.DateTime,System.String,Beyova.ExceptionSystem.ExceptionScene,Beyova.ExceptionSystem.ExceptionCode,System.Exception,Beyova.BaseCredential,Newtonsoft.Json.Linq.JToken,Beyova.ExceptionSystem.FriendlyHint)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.OperationForbiddenException" /> class.
            </summary>
            <param name="key">The key.</param>
            <param name="createdStamp">The created stamp.</param>
            <param name="message">The message.</param>
            <param name="scene">The scene.</param>
            <param name="code">The code.</param>
            <param name="innerException">The inner exception.</param>
            <param name="operatorCredential">The operator credential.</param>
            <param name="data">The data.</param>
            <param name="hint">The hint.</param>
        </member>
        <member name="T:Beyova.ExceptionSystem.ResourceNotFoundException">
            <summary>
            Class ResourceNotFoundException.
            </summary>
        </member>
        <member name="M:Beyova.ExceptionSystem.ResourceNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.ResourceNotFoundException" /> class.
            </summary>
            <param name="resourceName">Name of the resource.</param>
            <param name="resourceIdentifier">The resource identifier.</param>
        </member>
        <member name="M:Beyova.ExceptionSystem.ResourceNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.ResourceNotFoundException" /> class.
            </summary>
            <param name="resourceName">Name of the resource.</param>
        </member>
        <member name="M:Beyova.ExceptionSystem.ResourceNotFoundException.#ctor(System.Guid,System.DateTime,System.String,Beyova.ExceptionSystem.ExceptionScene,Beyova.ExceptionSystem.ExceptionCode,System.Exception,Beyova.BaseCredential,Newtonsoft.Json.Linq.JToken,Beyova.ExceptionSystem.FriendlyHint)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.ResourceNotFoundException" /> class.
            </summary>
            <param name="key">The key.</param>
            <param name="createdStamp">The created stamp.</param>
            <param name="message">The message.</param>
            <param name="scene">The scene.</param>
            <param name="code">The code.</param>
            <param name="innerException">The inner exception.</param>
            <param name="operatorCredential">The operator credential.</param>
            <param name="data">The data.</param>
            <param name="hint">The hint.</param>
        </member>
        <member name="T:Beyova.ExceptionSystem.UnauthorizedOperationException">
            <summary>
            Class for unauthorized operation exception
            </summary>
        </member>
        <member name="M:Beyova.ExceptionSystem.UnauthorizedOperationException.#ctor(System.Exception,System.String,System.Object,Beyova.ExceptionSystem.FriendlyHint,Beyova.ExceptionSystem.ExceptionScene)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.UnauthorizedOperationException" /> class.
            </summary>
            <param name="innerException">The inner exception.</param>
            <param name="reason">The minor code.</param>
            <param name="data">The data.</param>
            <param name="hint">The hint.</param>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:Beyova.ExceptionSystem.UnauthorizedOperationException.#ctor(System.String,System.String,Beyova.Api.ApiPermission,Beyova.ExceptionSystem.ExceptionScene)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.UnauthorizedOperationException" /> class.
            </summary>
            <param name="destinationMethod">The destination method.</param>
            <param name="permissionIdentifier">The permission identifier.</param>
            <param name="permission">The permission.</param>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:Beyova.ExceptionSystem.UnauthorizedOperationException.#ctor(System.Guid,System.DateTime,System.String,Beyova.ExceptionSystem.ExceptionScene,Beyova.ExceptionSystem.ExceptionCode,System.Exception,Beyova.BaseCredential,Newtonsoft.Json.Linq.JToken,Beyova.ExceptionSystem.FriendlyHint)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.UnauthorizedOperationException" /> class.
            </summary>
            <param name="key">The key.</param>
            <param name="createdStamp">The created stamp.</param>
            <param name="message">The message.</param>
            <param name="scene">The scene.</param>
            <param name="code">The code.</param>
            <param name="innerException">The inner exception.</param>
            <param name="operatorCredential">The operator credential.</param>
            <param name="data">The data.</param>
            <param name="hint">The hint.</param>
        </member>
        <member name="T:Beyova.ExceptionSystem.UnauthorizedTokenException">
            <summary>
            Class UnauthorizedTokenException.
            </summary>
        </member>
        <member name="M:Beyova.ExceptionSystem.UnauthorizedTokenException.#ctor(System.Object,Beyova.ExceptionSystem.FriendlyHint,Beyova.ExceptionSystem.ExceptionScene)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.UnauthorizedTokenException" /> class.
            </summary>
            <param name="data">The data.</param>
            <param name="hint">The hint.</param>
            <param name="scene">The scene.</param>
        </member>
        <member name="T:Beyova.ExceptionSystem.UnauthorizedAccountException">
            <summary>
            Class UnauthorizedAccountException.
            </summary>
        </member>
        <member name="M:Beyova.ExceptionSystem.UnauthorizedAccountException.#ctor(System.String,System.Object,Beyova.ExceptionSystem.FriendlyHint,Beyova.ExceptionSystem.ExceptionScene)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ExceptionSystem.UnauthorizedOperationException" /> class.
            </summary>
            <param name="reason">The reason.</param>
            <param name="data">The data.</param>
            <param name="hint">The hint.</param>
            <param name="scene">The scene.</param>
        </member>
        <member name="T:Beyova.ContractModelExtension">
            <summary>
            Class ContractModelExtension.
            </summary>
        </member>
        <member name="M:Beyova.ContractModelExtension.BuildTreeHierarchy``1(System.Collections.Generic.IList{``0},System.Guid,System.Boolean)">
            <summary>
            Builds the tree hierarchy.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="nodes">The nodes.</param>
            <param name="root">The root.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <returns>T.</returns>
        </member>
        <member name="M:Beyova.ContractModelExtension.AddChildren``1(``0,System.Collections.Generic.IDictionary{System.Guid,System.Collections.Generic.List{``0}},System.Collections.Generic.HashSet{System.Guid},System.Boolean)">
            <summary>
            Adds the children.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">The node.</param>
            <param name="source">The source.</param>
            <param name="handledKeys">The handled keys.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <exception cref="T:Beyova.ExceptionSystem.DataConflictException"></exception>
        </member>
        <member name="M:Beyova.ContractModelExtension.Descendant``1(``0)">
            <summary>
            Descendant the specified root.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="root">The root.</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="M:Beyova.ContractModelExtension.ToList``1(Beyova.MatrixList{``0},System.Func{System.String,``0,System.Boolean})">
            <summary>
            To the list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="matrixList">The matrix list.</param>
            <param name="filter">The filter.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:Beyova.ContractModelExtension.ToMatrix``1(System.Collections.Generic.List{``0},System.Func{``0,System.String},System.Boolean)">
            <summary>
            To the matrix.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="keyFunc">The key function.</param>
            <param name="keyCaseSensitive">if set to <c>true</c> [key case sensitive].</param>
            <returns>MatrixList&lt;T&gt;.</returns>
        </member>
        <member name="M:Beyova.ContractModelExtension.AsMatrixList``1(System.Collections.Generic.List{``0},System.String,System.Boolean)">
            <summary>
            Ases the matrix list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="key">The key.</param>
            <param name="keyCaseSensitive">if set to <c>true</c> [key case sensitive].</param>
            <returns>MatrixList&lt;T&gt;.</returns>
        </member>
        <member name="M:Beyova.ContractModelExtension.ToXml(Beyova.MatrixList{System.Guid})">
            <summary>
            To the XML.
            </summary>
            <param name="matrixList">The matrix list.</param>
            <returns>XElement.</returns>
        </member>
        <member name="M:Beyova.ContractModelExtension.ToXml(Beyova.MatrixList{System.DateTime})">
            <summary>
            To the XML.
            </summary>
            <param name="matrixList">The matrix list.</param>
            <returns>XElement.</returns>
        </member>
        <member name="M:Beyova.ContractModelExtension.ToXml``1(Beyova.MatrixList{``0},System.Func{``0,System.String})">
            <summary>
            To the XML.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="matrixList">The matrix list.</param>
            <param name="converter">The converter.</param>
            <returns>XElement.</returns>
        </member>
        <member name="M:Beyova.ContractModelExtension.XmlToMatrixGuid(System.Xml.Linq.XElement)">
            <summary>
            XMLs to matrix unique identifier.
            </summary>
            <param name="xml">The XML.</param>
            <returns>MatrixList&lt;Guid&gt;.</returns>
        </member>
        <member name="M:Beyova.ContractModelExtension.XmlToMatrixDateTime(System.Xml.Linq.XElement)">
            <summary>
            XMLs to matrix date time.
            </summary>
            <param name="xml">The XML.</param>
            <returns>MatrixList&lt;DateTime&gt;.</returns>
        </member>
        <member name="M:Beyova.ContractModelExtension.XmlToMatrix``1(System.Xml.Linq.XElement,System.Func{System.String,``0})">
            <summary>
            XMLs to matrix.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml">The XML.</param>
            <param name="converter">The converter.</param>
            <returns>Beyova.MatrixList&lt;T&gt;.</returns>
        </member>
        <member name="T:Beyova.JsonComparisonExtension">
            <summary>
            Class JsonComparisonExtension.
            </summary>
        </member>
        <member name="M:Beyova.JsonComparisonExtension.Diff(System.String,System.String,Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Differences the specified identifier.
            </summary>
            <param name="path">The last identifier.</param>
            <param name="identifier">The identifier.</param>
            <param name="content1">The content1.</param>
            <param name="content2">The content2.</param>
            <returns>System.Collections.Generic.List&lt;OnlineSchoolPlatformContentComparer.ComparisonResult&gt;.</returns>
        </member>
        <member name="M:Beyova.JsonComparisonExtension.Diff(System.String,System.String,Newtonsoft.Json.Linq.JArray,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Differences the specified identifier.
            </summary>
            <param name="path">The path.</param>
            <param name="identifier">The identifier.</param>
            <param name="content1">The content1.</param>
            <param name="content2">The content2.</param>
            <returns>System.Collections.Generic.List&lt;OnlineSchoolPlatformContentComparer.ComparisonResult&gt;.</returns>
        </member>
        <member name="M:Beyova.JsonComparisonExtension.Diff(System.String,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Differences the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="content1">The content1.</param>
            <param name="content2">The content2.</param>
            <returns>System.Collections.Generic.List&lt;Beyova.ComparisonResult&gt;.</returns>
        </member>
        <member name="M:Beyova.JsonComparisonExtension.SimpleValueDiff``1(System.String,System.String,``0,``0)">
            <summary>
            Simples the value difference.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">The last identifier.</param>
            <param name="identifier">The identifier.</param>
            <param name="content1">The content1.</param>
            <param name="content2">The content2.</param>
            <returns>OnlineSchoolPlatformContentComparer.ComparisonResult.</returns>
        </member>
        <member name="T:Beyova.LdapExtension">
            <summary>
            Class LdapExtension.
            </summary>
        </member>
        <member name="M:Beyova.LdapExtension.GetDirectoryEntry(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes)">
            <summary>
            Gets the directory entry.
            </summary>
            <param name="ldapPath">The LDAP path. Example: LDAP://yourdomain.com </param>
            <param name="userName">Name of the user. Exmaple: Domain\Account</param>
            <param name="password">The password. Sample: 123456</param>
            <param name="authenticationType">Type of the authentication.</param>
            <returns>DirectoryEntry.</returns>
        </member>
        <member name="M:Beyova.LdapExtension.TryAuthenticate(System.String,System.String,System.String)">
            <summary>
            Tries the authenticate.
            </summary>
            <param name="ldapPath">The LDAP path. Example: LDAP://yourdomain.com </param>
            <param name="userName">Name of the user. Exmaple: Domain\Account</param>
            <param name="password">The password.</param>
            <returns><c>true</c> if authentication is passed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Beyova.LdapExtension.CheckUserName(System.DirectoryServices.DirectoryEntry,System.String)">
            <summary>
            Checks the name of the user.
            </summary>
            <param name="entry">The entry.</param>
            <param name="userName">Name of the user.</param>
            <returns>
              <c>true</c> if user name is existed, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Beyova.SystemManagementExtension">
            <summary>
            Class SystemManagementExtension.
            </summary>
        </member>
        <member name="M:Beyova.SystemManagementExtension.GetMachineHealth">
            <summary>
            Gets the machine health.
            </summary>
            <returns>MachineHealth.</returns>
        </member>
        <member name="M:Beyova.SystemManagementExtension.GetProcessMemoryUsage">
            <summary>
            Gets the memory usage. (Unit: byte)
            </summary>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:Beyova.SystemManagementExtension.GetPhysicalMemoryUsage">
            <summary>
            Gets the physical memory usage.
            </summary>
            <returns>System.Nullable&lt;System.Int64&gt;.</returns>
        </member>
        <member name="M:Beyova.SystemManagementExtension.GetPhysicalTotalMemory">
            <summary>
            Gets the physical total memory.
            </summary>
            <returns>System.Nullable&lt;System.Int64&gt;.</returns>
        </member>
        <member name="M:Beyova.SystemManagementExtension.GetDiskUsages">
            <summary>
            Gets the disk usages.
            </summary>
            <returns>List&lt;DiskDriveInfo&gt;.</returns>
        </member>
        <member name="M:Beyova.SystemManagementExtension.GetGCMemory(System.Boolean)">
            <summary>
            Gets the gc memory.
            </summary>
            <param name="forceFullCollection">if set to <c>true</c> [force full collection].</param>
            <returns>System.Nullable&lt;System.Int64&gt;.</returns>
        </member>
        <member name="M:Beyova.SystemManagementExtension.GetCpuUsage">
            <summary>
            Gets the cpu usage.
            </summary>
            <returns>System.Nullable&lt;System.Double&gt;.</returns>
        </member>
        <member name="T:Beyova.BaseDataAccessController`1">
            <summary>
            Abstract class for SQL data access controller, which refers an entity in {T} type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_State">
            <summary>
            The column_ state
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_Key">
            <summary>
            The column_ key
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_UserKey">
            <summary>
            The column_ user key
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_OwnerKey">
            <summary>
            The column_ owner key
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_OperatorKey">
            <summary>
            The column_ operator key
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_CreatedStamp">
            <summary>
            The column_ created stamp
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_LastUpdatedStamp">
            <summary>
            The column_ last updated stamp
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_Count">
            <summary>
            The column_ count
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_DataCursor">
            <summary>
            The column_ data cursor
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_Identifier">
            <summary>
            The column_ identifier
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_Hash">
            <summary>
            The column_ hash
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_FromStamp">
            <summary>
            The column_ from stamp
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_ToStamp">
            <summary>
            The column_ to stamp
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_Type">
            <summary>
            The column_ type
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_Code">
            <summary>
            The column_ code
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_OrderDescending">
            <summary>
            The column_ order descending
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_TimeForwarding">
            <summary>
            The column_ time forwarding
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_Xml">
            <summary>
            The column_ XML
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_CreatedBy">
            <summary>
            The column_ created by
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_LastUpdatedBy">
            <summary>
            The column_ last updated by
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_Name">
            <summary>
            The column_ name
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_Token">
            <summary>
            The column_ token
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.configurationKey_sqlConnection">
            <summary>
            The SQL connection
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_IpAddress">
            <summary>
            The column_ ip address
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_UserAgent">
            <summary>
            The column_ user agent
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_Email">
            <summary>
            The column_ email
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_Domain">
            <summary>
            The column_ domain
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_Description">
            <summary>
            The column_ description
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_StartIndex">
            <summary>
            The column_ start index
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_ExpiredStamp">
            <summary>
            The column_ expired stamp
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_Platform">
            <summary>
            The column_ platform
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_DeviceType">
            <summary>
            The column_ device type
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_Expiration">
            <summary>
            The column_ expiration
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_TimeZone">
            <summary>
            The column_ time zone
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_Language">
            <summary>
            The column_ language
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_TokenExpiredStamp">
            <summary>
            The column_ token expired stamp
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_AccessIdentifier">
            <summary>
            The column_ access identifier
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_FunctionalRole">
            <summary>
            The column_ functional role
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_ThirdPartyId">
            <summary>
            The column_ third party identifier
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_ParentKey">
            <summary>
            The column_ parent key
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_AvatarKey">
            <summary>
            The column_ avatar key
            </summary>
        </member>
        <member name="F:Beyova.BaseDataAccessController`1.column_IsExpired">
            <summary>
            The column_ is expired
            </summary>
        </member>
        <member name="M:Beyova.BaseDataAccessController`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.BaseDataAccessController`1"/> class.
            </summary>
        </member>
        <member name="M:Beyova.BaseDataAccessController`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.BaseDataAccessController`1"/> class.
            </summary>
            <param name="sqlConnection">The SQL connection.</param>
        </member>
        <member name="M:Beyova.BaseDataAccessController`1.FillBaseObjectFields(Beyova.IBaseObject,System.Data.SqlClient.SqlDataReader,System.Boolean)">
            <summary>
            Fills the base object fields.
            </summary>
            <param name="baseObj">The base obj.</param>
            <param name="sqlDataReader">The SQL data reader.</param>
            <param name="ignoreOperator">if set to <c>true</c> [ignore operator].</param>
        </member>
        <member name="M:Beyova.BaseDataAccessController`1.FillSimpleBaseObjectFields(Beyova.ISimpleBaseObject,System.Data.SqlClient.SqlDataReader)">
            <summary>
            Fills the base simple object fields.
            </summary>
            <param name="baseObj">The base object.</param>
            <param name="sqlDataReader">The SQL data reader.</param>
        </member>
        <member name="T:Beyova.DatabaseOperator">
            <summary>
            Class for database operator.
            </summary>
        </member>
        <member name="F:Beyova.DatabaseOperator.timeoutMillSeconds">
            <summary>
            The timeout mill seconds
            </summary>
        </member>
        <member name="F:Beyova.DatabaseOperator.sqlConnection">
            <summary>
            The SQL connection
            </summary>
        </member>
        <member name="F:Beyova.DatabaseOperator.sqlCommand">
            <summary>
            The SQL command
            </summary>
        </member>
        <member name="M:Beyova.DatabaseOperator.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="databaseConnectionString">The database connection string.</param>
        </member>
        <member name="M:Beyova.DatabaseOperator.#ctor(System.Data.SqlClient.SqlConnection)">
            <summary>
            Constructor.
            </summary>
            <param name="sqlConnection">The database connection string.</param>
        </member>
        <member name="M:Beyova.DatabaseOperator.BeginTransaction(System.Data.IsolationLevel,System.String)">
            <summary>
            Begins the transaction.
            </summary>
            <param name="iso">The iso.</param>
            <param name="transactionName">Name of the transaction.</param>
            <returns>SqlTransactionScope.</returns>
            <exception cref="T:Beyova.ExceptionSystem.DataConflictException">sqlTransaction</exception>
        </member>
        <member name="M:Beyova.DatabaseOperator.Commit">
            <summary>
            Commits this instance.
            </summary>
        </member>
        <member name="M:Beyova.DatabaseOperator.Rollback">
            <summary>
            Rollbacks this instance.
            </summary>
        </member>
        <member name="M:Beyova.DatabaseOperator.GetOutputParameter(System.String)">
            <summary>
            Gets the output parameter.
            </summary>
            <param name="name">The name.</param>
            <returns>SqlParameter.</returns>
        </member>
        <member name="M:Beyova.DatabaseOperator.ExecuteReader(System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter})">
            <summary>
            Execute reader.
            </summary>
            <param name="procedureName">The procedure name.</param>
            <param name="sqlParameters">The sql parameters.</param>
            <returns>The SqlDataReader contains data.</returns>
        </member>
        <member name="M:Beyova.DatabaseOperator.ExecuteScalar(System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter})">
            <summary>
            Execute scalar
            </summary>
            <param name="procedureName">The procedure name.</param>
            <param name="sqlParameters">The sql parameters.</param>
            <returns>The first column in first row of result data.</returns>
        </member>
        <member name="M:Beyova.DatabaseOperator.ExecuteNonQuery(System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter})">
            <summary>
            Execute none query.
            </summary>
            <param name="procedureName">The procedure name.</param>
            <param name="sqlParameters">The sql parameters.</param>
            <returns>The count of row influenced.</returns>
        </member>
        <member name="M:Beyova.DatabaseOperator.ExecuteSqlTextNonQuery(System.String)">
            <summary>
            Executes the SQL text.
            </summary>
            <param name="sqlText">The SQL text.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Beyova.DatabaseOperator.ExecuteDataTable(System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter})">
            <summary>
            Executes the data table.
            </summary>
            <param name="procedureName">Name of the procedure.</param>
            <param name="sqlParameters">The SQL parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Beyova.DatabaseOperator.ExecuteDataTable(System.String,System.Data.DataTable,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter})">
            <summary>
            Executes the data table.
            </summary>
            <param name="procedureName">Name of the procedure.</param>
            <param name="dataTableContainer">The data table container.</param>
            <param name="sqlParameters">The SQL parameters.</param>
            <exception cref="T:System.NullReferenceException">dataTableContainer</exception>
        </member>
        <member name="M:Beyova.DatabaseOperator.ExecuteDataSet(System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter})">
            <summary>
            Executes the data set.
            </summary>
            <param name="procedureName">Name of the procedure.</param>
            <param name="sqlParameters">The SQL parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Beyova.DatabaseOperator.ExecuteDataSet(System.String,System.Data.DataSet,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter})">
            <summary>
            Executes the data set.
            </summary>
            <param name="procedureName">Name of the procedure.</param>
            <param name="dataSetContainer">The data set container.</param>
            <param name="sqlParameters">The SQL parameters.</param>
            <exception cref="T:System.NullReferenceException">dataSetContainer</exception>
        </member>
        <member name="M:Beyova.DatabaseOperator.AboutSqlServer(System.String)">
            <summary>
            Abouts the SQL server.
            </summary>
            <param name="sqlConnection">The SQL connection.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.DatabaseOperator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Beyova.DatabaseOperator.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="T:Beyova.SmartSqlDataAccessController`2">
            <summary>
            Class SmartSqlDataAccessController.
            </summary>
            <typeparam name="TEntity">The type of the t entity.</typeparam>
            <typeparam name="TCriteria">The type of the t criteria.</typeparam>
        </member>
        <member name="F:Beyova.SmartSqlDataAccessController`2._criteriaEntityConverter">
            <summary>
            The _criteria entity converter
            </summary>
        </member>
        <member name="M:Beyova.SmartSqlDataAccessController`2.#ctor(System.String,Beyova.SqlFieldConverter[])">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.SmartSqlDataAccessController`2" /> class.
            </summary>
            <param name="sqlConnectionString">The SQL connection string.</param>
            <param name="fieldConverters">The field converters.</param>
        </member>
        <member name="M:Beyova.SmartSqlDataAccessController`2.#ctor(System.Data.SqlClient.SqlConnection,Beyova.SqlFieldConverter[])">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.SmartSqlDataAccessController`2" /> class.
            </summary>
            <param name="sqlConnection">The SQL connection.</param>
            <param name="fieldConverters">The field converters.</param>
        </member>
        <member name="M:Beyova.SmartSqlDataAccessController`2.GenerateCriteriaSqlParameters(`1,System.String[])">
            <summary>
            Generates the criteria SQL parameters.
            </summary>
            <param name="criteria">The criteria.</param>
            <param name="ignoredProperty">The ignored property.</param>
            <returns>List&lt;SqlParameter&gt;.</returns>
        </member>
        <member name="M:Beyova.SmartSqlDataAccessController`2.Query(`1,System.String,System.String[])">
            <summary>
            Queries the specified criteria.
            </summary>
            <param name="criteria">The criteria.</param>
            <param name="spName">Name of the sp.</param>
            <param name="ignoredProperty">The ignored property.</param>
            <returns>List&lt;TEntity&gt;.</returns>
        </member>
        <member name="T:Beyova.SmartSqlDataAccessController`1">
            <summary>
            Class SmartSqlDataAccessController.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Beyova.SmartSqlDataAccessController`1.column_OperatorKey">
            <summary>
            The column_ operator key
            </summary>
        </member>
        <member name="F:Beyova.SmartSqlDataAccessController`1.cacheFieldConverters">
            <summary>
            The field converters
            </summary>
        </member>
        <member name="F:Beyova.SmartSqlDataAccessController`1.locker">
            <summary>
            The locker
            </summary>
        </member>
        <member name="M:Beyova.SmartSqlDataAccessController`1.TryInitialize(System.Type,Beyova.SqlFieldConverter[])">
            <summary>
            Tries the initialize.
            </summary>
            <param name="type">The type.</param>
            <param name="fieldConverters">The field converters.</param>
            <returns>Beyova.SqlEntityConverter.</returns>
        </member>
        <member name="F:Beyova.SmartSqlDataAccessController`1.ignoredProperty_SimpleBaseObject">
            <summary>
            The ignored property_ simple base object
            </summary>
        </member>
        <member name="F:Beyova.SmartSqlDataAccessController`1.ignoredProperty_BaseObject">
            <summary>
            The ignored property_ base object
            </summary>
        </member>
        <member name="F:Beyova.SmartSqlDataAccessController`1._entityConverter">
            <summary>
            </summary>
        </member>
        <member name="M:Beyova.SmartSqlDataAccessController`1.#ctor(System.String,Beyova.SqlFieldConverter[])">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.SmartSqlDataAccessController`1" /> class.
            </summary>
            <param name="sqlConnectionString">The SQL connection string.</param>
            <param name="fieldConverters">The field converters.</param>
        </member>
        <member name="M:Beyova.SmartSqlDataAccessController`1.#ctor(System.Data.SqlClient.SqlConnection,Beyova.SqlFieldConverter[])">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.SmartSqlDataAccessController`1" /> class.
            </summary>
            <param name="sqlConnection">The SQL connection.</param>
            <param name="fieldConverters">The field converters.</param>
        </member>
        <member name="M:Beyova.SmartSqlDataAccessController`1.GenerateSqlParameters``1(``0,System.String[])">
            <summary>
            Generates the SQL parameters.
            </summary>
            <typeparam name="TObject">The type of the t object.</typeparam>
            <param name="entity">The entity.</param>
            <param name="ignoredProperty">The ignored property.</param>
            <returns>System.Collections.Generic.List&lt;System.Data.SqlClient.SqlParameter&gt;.</returns>
        </member>
        <member name="M:Beyova.SmartSqlDataAccessController`1.GenerateEntitySqlParameters(`0,System.String[])">
            <summary>
            Generates the entity SQL parameters.
            </summary>
            <param name="entity">The entity.</param>
            <param name="ignoredProperty">The ignored property.</param>
            <returns>System.Collections.Generic.List&lt;System.Data.SqlClient.SqlParameter&gt;.</returns>
        </member>
        <member name="M:Beyova.SmartSqlDataAccessController`1.ConvertObject(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Converts the object.
            </summary>
            <param name="sqlDataReader">The SQL data reader.</param>
            <returns>List{`0}.</returns>
        </member>
        <member name="M:Beyova.SmartSqlDataAccessController`1.ConvertEntityObject(System.Data.SqlClient.SqlDataReader,System.Collections.Generic.List{Beyova.SqlFieldConverter})">
            <summary>
            Converts the entity object.
            </summary>
            <param name="sqlDataReader">The SQL data reader.</param>
            <param name="fieldConverter">The field converter.</param>
            <returns>Object instance in type {`0}.</returns>
        </member>
        <member name="M:Beyova.SmartSqlDataAccessController`1.ExecuteReader(System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter})">
            <summary>
            Executes the reader.
            </summary>
            <param name="spName">Name of the sp.</param>
            <param name="sqlParameters">The SQL parameters.</param>
            <returns>List{`0}.</returns>
        </member>
        <member name="M:Beyova.SmartSqlDataAccessController`1.CreateOrUpdate(`0,System.Nullable{System.Guid},System.String,System.Boolean,System.String[])">
            <summary>
            Creates the or update.
            </summary>
            <param name="entity">The entity.</param>
            <param name="operatorKey">The operator key.</param>
            <param name="spName">Name of the sp.</param>
            <param name="includeOperatorKey">The include operator key.</param>
            <param name="ignoredProperty">The ignored property.</param>
            <returns>System.Nullable&lt;System.Guid&gt;.</returns>
        </member>
        <member name="T:Beyova.SqlDataConverter">
            <summary>
            Class SqlDataConverter.
            </summary>
        </member>
        <member name="F:Beyova.SqlDataConverter._convertDbParameterObjectDelegate">
            <summary>
            The _convert database parameter object delegate
            </summary>
        </member>
        <member name="F:Beyova.SqlDataConverter._setPropertyValueDelegate">
            <summary>
            The _set property value delegate
            </summary>
        </member>
        <member name="P:Beyova.SqlDataConverter.IsNullable">
            <summary>
            Gets or sets a value indicating whether this instance is nullable.
            </summary>
            <value><c>true</c> if this instance is nullable; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Beyova.SqlDataConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.SqlDataConverter"/> class.
            </summary>
        </member>
        <member name="M:Beyova.SqlDataConverter.#ctor(System.Func{System.Object,System.Reflection.PropertyInfo,System.Object},System.Action{System.Object,System.Reflection.PropertyInfo,System.Object},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.SqlDataConverter"/> class.
            </summary>
            <param name="convertDbParameterObjectDelegate">The convert database parameter object delegate.</param>
            <param name="setPropertyValueDelegate">The set property value delegate.</param>
            <param name="isNullable">if set to <c>true</c> [is nullable].</param>
        </member>
        <member name="M:Beyova.SqlDataConverter.ToDbParameterObject(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            To the database parameter object.
            </summary>
            <param name="instance">The instance.</param>
            <param name="propertyInfo">The property information.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Beyova.SqlDataConverter.SetPropertyValueObject(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Sets the property value object.
            </summary>
            <param name="objectInstance">The object instance.</param>
            <param name="property">The property.</param>
            <param name="databaseObject">The database object.</param>
        </member>
        <member name="F:Beyova.SqlDataConverter.defaultConvertDbParameterObjectDelegate">
            <summary>
            The default convert database parameter object delegate
            </summary>
        </member>
        <member name="M:Beyova.SqlDataConverter.GetBooleanDataConverter(System.Boolean)">
            <summary>
            Gets the boolean data converter.
            </summary>
            <param name="nullable">if set to <c>true</c> [nullable].</param>
            <returns>SqlDataConverter.</returns>
        </member>
        <member name="M:Beyova.SqlDataConverter.GetInt32DataConverter(System.Boolean)">
            <summary>
            Gets the int32 data converter.
            </summary>
            <param name="nullable">if set to <c>true</c> [nullable].</param>
            <returns>SqlDataConverter.</returns>
        </member>
        <member name="M:Beyova.SqlDataConverter.GetInt64DataConverter(System.Boolean)">
            <summary>
            Gets the int64 data converter.
            </summary>
            <param name="nullable">if set to <c>true</c> [nullable].</param>
            <returns>SqlDataConverter.</returns>
        </member>
        <member name="M:Beyova.SqlDataConverter.GetXElementDataConverter(System.Boolean)">
            <summary>
            Gets the x element data converter.
            </summary>
            <param name="nullable">if set to <c>true</c> [nullable].</param>
            <returns>SqlDataConverter.</returns>
        </member>
        <member name="M:Beyova.SqlDataConverter.GetStringDataConverter(System.Boolean)">
            <summary>
            Gets the string data converter.
            </summary>
            <param name="nullable">if set to <c>true</c> [nullable].</param>
            <returns>SqlDataConverter.</returns>
        </member>
        <member name="M:Beyova.SqlDataConverter.GetDateTimeDataConverter(System.Boolean)">
            <summary>
            Gets the date time data converter.
            </summary>
            <param name="nullable">if set to <c>true</c> [nullable].</param>
            <returns>SqlDataConverter.</returns>
        </member>
        <member name="M:Beyova.SqlDataConverter.GetFloatDataConverter(System.Boolean)">
            <summary>
            Gets the float data converter.
            </summary>
            <param name="nullable">if set to <c>true</c> [nullable].</param>
            <returns>SqlDataConverter.</returns>
        </member>
        <member name="M:Beyova.SqlDataConverter.GetDoubleDataConverter(System.Boolean)">
            <summary>
            Gets the double data converter.
            </summary>
            <param name="nullable">if set to <c>true</c> [nullable].</param>
            <returns>SqlDataConverter.</returns>
        </member>
        <member name="M:Beyova.SqlDataConverter.GetDecimalDataConverter(System.Boolean)">
            <summary>
            Gets the decimal data converter.
            </summary>
            <param name="nullable">if set to <c>true</c> [nullable].</param>
            <returns>SqlDataConverter.</returns>
        </member>
        <member name="M:Beyova.SqlDataConverter.GetGuidDataConverter(System.Boolean)">
            <summary>
            Gets the unique identifier data converter.
            </summary>
            <param name="nullable">if set to <c>true</c> [nullable].</param>
            <returns>SqlDataConverter.</returns>
        </member>
        <member name="M:Beyova.SqlDataConverter.GetDefaultSqlDataConverterByType(System.Type)">
            <summary>
            Gets the default type of the SQL data converter by.
            </summary>
            <param name="type">The type.</param>
            <returns>SqlDataConverter.</returns>
            <exception cref="T:Beyova.ExceptionSystem.UnimplementedException"></exception>
        </member>
        <member name="T:Beyova.SqlEntityConverter">
            <summary>
            Class SqlEntityConverter.
            </summary>
        </member>
        <member name="P:Beyova.SqlEntityConverter.IsSimpleBaseObject">
            <summary>
            Gets a value indicating whether this instance is simple base object.
            </summary>
            <value><c>true</c> if this instance is simple base object; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Beyova.SqlEntityConverter.IsBaseObject">
            <summary>
            Gets a value indicating whether this instance is base object.
            </summary>
            <value><c>true</c> if this instance is base object; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Beyova.SqlEntityConverter.FieldConverters">
            <summary>
            Gets or sets the converter.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="M:Beyova.SqlEntityConverter.#ctor(System.Type,System.Collections.Generic.List{Beyova.SqlFieldConverter})">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.SqlFieldConverter" /> class.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="fieldConverters">The field converters.</param>
        </member>
        <member name="T:Beyova.SqlFieldConverter">
            <summary>
            Class SqlFieldConverter.
            </summary>
        </member>
        <member name="P:Beyova.SqlFieldConverter.ColumnName">
            <summary>
            Gets the name of the column.
            </summary>
            <value>The name of the column.</value>
        </member>
        <member name="P:Beyova.SqlFieldConverter.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Beyova.SqlFieldConverter.PropertyInfo">
            <summary>
            Gets the property information.
            </summary>
            <value>The property information.</value>
        </member>
        <member name="P:Beyova.SqlFieldConverter.IsIgnored">
            <summary>
            Gets or sets a value indicating whether this instance is ignored.
            </summary>
            <value><c>true</c> if this instance is ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Beyova.SqlFieldConverter.Converter">
            <summary>
            Gets or sets the converter.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="M:Beyova.SqlFieldConverter.#ctor(System.Reflection.PropertyInfo,Beyova.SqlDataConverter,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.SqlFieldConverter" /> class.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <param name="converter">The converter.</param>
            <param name="isIgnored">The is ignored.</param>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:Beyova.SqlFieldConverter.ToDbParameterObject(System.Object)">
            <summary>
            To the database parameter object.
            </summary>
            <param name="instance">The instance.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Beyova.SqlFieldConverter.SetPropertyValueObject(System.Object,System.Object)">
            <summary>
            Sets the property value object.
            </summary>
            <param name="objectInstance">The object instance.</param>
            <param name="databaseObject">The database object.</param>
        </member>
        <member name="T:Beyova.SqlDataAccessController`1">
            <summary>
            Abstract class for SQL data access controller, which refers an entity in {T} type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Beyova.SqlDataAccessController`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.SqlDataAccessController`1" /> class.
            </summary>
            <param name="sqlConnectionString">The SQL connection string.</param>
        </member>
        <member name="M:Beyova.SqlDataAccessController`1.#ctor(System.Data.SqlClient.SqlConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.SqlDataAccessController`1" /> class.
            </summary>
            <param name="sqlConnection">The SQL connection.</param>
        </member>
        <member name="M:Beyova.SqlDataAccessController`1.ConvertObject(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Converts the object.
            </summary>
            <param name="sqlDataReader">The SQL data reader.</param>
            <returns>List{`0}.</returns>
        </member>
        <member name="M:Beyova.SqlDataAccessController`1.ConvertEntityObject(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Converts the entity object.
            </summary>
            <param name="sqlDataReader">The SQL data reader.</param>
            <returns>Object instance in type {`0}.</returns>
        </member>
        <member name="M:Beyova.SqlDataAccessController`1.ExecuteReader(System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter})">
            <summary>
            Executes the reader.
            </summary>
            <param name="spName">Name of the sp.</param>
            <param name="sqlParameters">The SQL parameters.</param>
            <returns>List{`0}.</returns>
        </member>
        <member name="T:Beyova.SqlDataAccessController">
            <summary>
            Class SqlDataAccessController.
            </summary>
        </member>
        <member name="F:Beyova.SqlDataAccessController.column_SqlErrorCode">
            <summary>
            The column_ SQL error code
            </summary>
        </member>
        <member name="F:Beyova.SqlDataAccessController.column_SqlErrorReason">
            <summary>
            The column_ SQL error reason
            </summary>
        </member>
        <member name="F:Beyova.SqlDataAccessController.column_SqlErrorMessage">
            <summary>
            The column_ SQL error message
            </summary>
        </member>
        <member name="F:Beyova.SqlDataAccessController.column_SqlStoredProcedureName">
            <summary>
            The column_ SQL stored procedure name
            </summary>
        </member>
        <member name="F:Beyova.SqlDataAccessController.databaseOperator">
            <summary>
            The database operator
            </summary>
        </member>
        <member name="M:Beyova.SqlDataAccessController.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.SqlDataAccessController`1" /> class.
            </summary>
            <param name="sqlConnectionString">The SQL connection string.</param>
        </member>
        <member name="M:Beyova.SqlDataAccessController.#ctor(System.Data.SqlClient.SqlConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.SqlDataAccessController`1" /> class.
            </summary>
            <param name="sqlConnection">The SQL connection.</param>
        </member>
        <member name="M:Beyova.SqlDataAccessController.BeginTransaction(System.Data.IsolationLevel,System.String)">
            <summary>
            Begins the transaction.
            </summary>
            <param name="iso">The iso.</param>
            <param name="transactionName">Name of the transaction.</param>
            <returns>SqlTransactionScope.</returns>
        </member>
        <member name="M:Beyova.SqlDataAccessController.ExecuteScalar(System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter})">
            <summary>
            Executes the scalar.
            </summary>
            <param name="spName">Name of the sp.</param>
            <param name="sqlParameters">The SQL parameters.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Beyova.SqlDataAccessController.ExecuteNonQuery(System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter})">
            <summary>
            Executes the non query.
            </summary>
            <param name="spName">Name of the sp.</param>
            <param name="sqlParameters">The SQL parameters.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Beyova.SqlDataAccessController.Execute(System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter})">
            <summary>
            Executes the specified sp name.
            </summary>
            <param name="spName">Name of the sp.</param>
            <param name="sqlParameters">The SQL parameters.</param>
            <returns>SqlDataReader.</returns>
        </member>
        <member name="M:Beyova.SqlDataAccessController.AboutSqlServer(System.String)">
            <summary>
            Abouts the SQL server.
            </summary>
            <param name="sqlConnection">The SQL connection.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.SqlDataAccessController.SqlParameterToList(System.Collections.Generic.List{System.Data.SqlClient.SqlParameter})">
            <summary>
            SQLs the parameter to list.
            </summary>
            <param name="sqlParameters">The SQL parameters.</param>
            <returns>List{System.String}.</returns>
        </member>
        <member name="M:Beyova.SqlDataAccessController.TryGetSqlException(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Tries the get SQL exception.
            </summary>
            <param name="reader">The reader.</param>
            <returns>SqlStoredProcedureException.</returns>
        </member>
        <member name="M:Beyova.SqlDataAccessController.InitializeCustomizedSqlErrorStoredProcedure(System.String)">
            <summary>
            Initializes the customized SQL error stored procedure.
            </summary>
            <param name="sqlConnection">The SQL connection.</param>
        </member>
        <member name="M:Beyova.SqlDataAccessController.InitializeCustomizedSqlErrorStoredProcedure(Beyova.DatabaseOperator)">
            <summary>
            Initializes the customized SQL error stored procedure.
            </summary>
            <param name="databaseOperator">The database operator.</param>
        </member>
        <member name="M:Beyova.SqlDataAccessController.GenerateSqlSpParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            Generates the name of the SQL sp parameter.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="parameterObject">The parameter object.</param>
            <param name="direction">The direction.</param>
            <returns>SqlParameter.</returns>
        </member>
        <member name="M:Beyova.SqlDataAccessController.GenerateSqlSpParameter(System.String,System.Boolean,System.Data.ParameterDirection)">
            <summary>
            Generates the name of the SQL sp parameter.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="parameterObject">The parameter object.</param>
            <param name="direction">The direction.</param>
            <returns>SqlParameter.</returns>
        </member>
        <member name="M:Beyova.SqlDataAccessController.GenerateSqlSpParameter(System.String,System.Xml.Linq.XElement,System.Data.ParameterDirection)">
            <summary>
            Generates the SQL sp parameter.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="parameterObject">The parameter object.</param>
            <param name="direction">The direction.</param>
            <returns>SqlParameter.</returns>
        </member>
        <member name="M:Beyova.SqlDataAccessController.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Beyova.SqlTransactionScope">
            <summary>
            Class SqlTransactionScope.
            </summary>
        </member>
        <member name="F:Beyova.SqlTransactionScope._sqlTransction">
            <summary>
            The SQL transction
            </summary>
        </member>
        <member name="F:Beyova.SqlTransactionScope._sqlCommand">
            <summary>
            The _SQL command
            </summary>
        </member>
        <member name="P:Beyova.SqlTransactionScope.SqlTransaction">
            <summary>
            Gets the SQL transaction.
            </summary>
            <value>The SQL transaction.</value>
        </member>
        <member name="P:Beyova.SqlTransactionScope.SqlCommand">
            <summary>
            Gets the SQL command.
            </summary>
            <value>The SQL command.</value>
        </member>
        <member name="M:Beyova.SqlTransactionScope.#ctor(System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.SqlTransactionScope" /> class.
            </summary>
            <param name="sqlTransction">The SQL transction.</param>
            <param name="sqlCommand">The SQL command.</param>
        </member>
        <member name="M:Beyova.SqlTransactionScope.Commit">
            <summary>
            Commits this instance.
            </summary>
            <exception cref="T:Beyova.ExceptionSystem.OperationFailureException">Commit;null</exception>
        </member>
        <member name="M:Beyova.SqlTransactionScope.Rollback">
            <summary>
            Rollbacks this instance.
            </summary>
            <exception cref="T:Beyova.ExceptionSystem.OperationFailureException">Rollback;null</exception>
        </member>
        <member name="M:Beyova.SqlTransactionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Beyova.IApiAnalytics">
            <summary>
            Interface IApiAnalytics
            </summary>
        </member>
        <member name="M:Beyova.IApiAnalytics.QueryApiEvent(Beyova.ApiTracking.ApiEventCriteria)">
            <summary>
            Queries the API event.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns>List&lt;ApiEventLog&gt;.</returns>
        </member>
        <member name="M:Beyova.IApiAnalytics.QueryException(Beyova.ApiTracking.ExceptionCriteria)">
            <summary>
            Queries the exception.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns>List&lt;ExceptionInfo&gt;.</returns>
        </member>
        <member name="M:Beyova.IApiAnalytics.GetApiTraceLogById(System.String)">
            <summary>
            Gets the API trace log by identifier.
            </summary>
            <param name="traceId">The trace identifier.</param>
            <returns>List&lt;ApiTraceLog&gt;.</returns>
        </member>
        <member name="M:Beyova.IApiAnalytics.GetApiEventStatistic(Beyova.ApiTracking.ApiEventStatisticCriteria)">
            <summary>
            Gets the API event statistic.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns>List&lt;ApiEventGroupStatistic&gt;.</returns>
        </member>
        <member name="M:Beyova.IApiAnalytics.GetApiEventGroupStatistic(Beyova.ApiTracking.ApiEventGroupingCriteria)">
            <summary>
            Gets the API event group statistic.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns>List&lt;ApiEventGroupStatistic&gt;.</returns>
        </member>
        <member name="M:Beyova.IApiAnalytics.GetApiExceptionStatistic(Beyova.ApiTracking.ExceptionStatisticCriteria)">
            <summary>
            Gets the API exception statistic.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns>List&lt;ExceptionGroupStatistic&gt;.</returns>
        </member>
        <member name="M:Beyova.IApiAnalytics.GetApiExceptionGroupingStatistic(Beyova.ApiTracking.ExceptionGroupingCriteria)">
            <summary>
            Gets the API exception grouping statistic.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns>List&lt;ExceptionGroupStatistic&gt;.</returns>
        </member>
        <member name="T:Beyova.IBinaryStorageHelper`2">
            <summary>
            Interface IBinaryStorageHelper
            </summary>
            <typeparam name="TBinaryStorageMetaData">The type of the t binary storage meta data.</typeparam>
            <typeparam name="TBinaryStorageCriteria">The type of the t binary storage criteria.</typeparam>
        </member>
        <member name="M:Beyova.IBinaryStorageHelper`2.CreateBlobUploadCredential(`0,System.Nullable{System.Int32})">
            <summary>
            <remarks>
            This method is to create meta in database and get authenticated uri for client to upload blob.
            Before you call <c>CommitBinaryStorage</c> to set state as <c>Committed</c>, the state of blob is <c>CommitPending</c>, and might be deleted by maintenance script.
            And, the uri can be expired according to service security settings. By default, it is 10 min since created stamp.
            </remarks>
            </summary>
            <param name="meta">The meta.</param>
            <param name="expireOffset">The expire offset.</param>
            <returns>BinaryStorageActionCredential.</returns>
        </member>
        <member name="M:Beyova.IBinaryStorageHelper`2.CreateBlobDownloadCredential(Beyova.BinaryStorageIdentifier,System.Nullable{System.Int32})">
            <summary>
            <remarks>
            This method is to get authenticated uri for client to download blob.
            Only when the blob information can be found in database and the state is valid for download, a Uri would be returned.
            And, the uri can be expired according to service security settings. By default, it is 10 min since created stamp.
            </remarks>
            </summary>
            <param name="identifier">The identifier.</param>
            <param name="expireOffset">The expire offset.</param>
            <returns>BinaryStorageActionCredential.</returns>
        </member>
        <member name="M:Beyova.IBinaryStorageHelper`2.DeleteBinaryStorage(System.Nullable{System.Guid})">
            <summary>
            Deletes the data.
            </summary>
            <param name="identifier">The identifier.</param>
        </member>
        <member name="M:Beyova.IBinaryStorageHelper`2.QueryBinaryStorage(`1)">
            <summary>
            Queries the binary storage.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns>List&lt;BinaryStorageMetaData&gt;.</returns>
        </member>
        <member name="M:Beyova.IBinaryStorageHelper`2.CommitBinaryStorage(Beyova.BinaryStorageCommitRequest)">
            <summary>
            Commits the binary storage.
            <remarks>
            This method would try to update state of binary storage to <c>Committed</c>.
            </remarks></summary>
            <param name="request">The request.</param>
            <returns>BinaryStorageMetaData.</returns>
        </member>
        <member name="M:Beyova.IBinaryStorageHelper`2.GetContainers">
            <summary>
            Gets the containers.
            </summary>
            <returns>IEnumerable&lt;TCloudContainer&gt;.</returns>
        </member>
        <member name="M:Beyova.IBinaryStorageHelper`2.CreateDownloadCredential(Beyova.BinaryStorageIdentifier)">
            <summary>
            Creates the download credential.
            </summary>
            <param name="identifier">The identifier.</param>
            <returns>BinaryStorageActionCredential.</returns>
        </member>
        <member name="M:Beyova.IBinaryStorageHelper`2.CreateUploadCredential(Beyova.BinaryStorageIdentifier)">
            <summary>
            Creates the upload credential.
            </summary>
            <param name="identifier">The identifier.</param>
            <returns>BinaryStorageActionCredential.</returns>
        </member>
        <member name="M:Beyova.IBinaryStorageHelper`2.UploadBinaryByCredential(Beyova.BinaryStorageActionCredential,System.Byte[],System.String)">
            <summary>
            Uploads the binary by credential.
            </summary>
            <param name="credential">The credential.</param>
            <param name="data">The data.</param>
            <param name="contentType">Type of the content.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.IBinaryStorageHelper`2.DownloadBinaryStreamByCredential(Beyova.BinaryStorageActionCredential)">
            <summary>
            Downloads the binary by credential.
            </summary>
            <param name="credential">The credential.</param>
            <returns>Stream.</returns>
        </member>
        <member name="M:Beyova.IBinaryStorageHelper`2.DownloadBinaryBytesByCredential(Beyova.BinaryStorageActionCredential)">
            <summary>
            Downloads the binary bytes by credential.
            </summary>
            <param name="credential">The credential.</param>
            <returns>Byte[].</returns>
        </member>
        <member name="M:Beyova.IBinaryStorageHelper`2.DeleteBinary(Beyova.BinaryStorageIdentifier)">
            <summary>
            Deletes the binary.
            </summary>
            <param name="identifier">The identifier.</param>
        </member>
        <member name="M:Beyova.IBinaryStorageHelper`2.GetBinaryStorageMetaDataByIdentifiers(System.Collections.Generic.List{Beyova.BinaryStorageIdentifier})">
            <summary>
            Gets the binary storage meta data by identifiers.
            </summary>
            <param name="identifiers">The identifiers.</param>
            <returns>System.Collections.Generic.List&lt;TBinaryStorageMetaData&gt;.</returns>
        </member>
        <member name="T:Beyova.ITreeNode`1">
            <summary>
            Interface ITreeNode
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Beyova.ITreeNode`1.ParentNodeKey">
            <summary>
            Gets or sets the parent node key.
            </summary>
            <value>The parent node key.</value>
        </member>
        <member name="P:Beyova.ITreeNode`1.Children">
            <summary>
            Gets or sets the children.
            </summary>
            <value>The children.</value>
        </member>
        <member name="T:Beyova.IPermissionIdentifiers">
            <summary>
            Interface IPermissionIdentifiers
            </summary>
        </member>
        <member name="P:Beyova.IPermissionIdentifiers.Permissions">
            <summary>
            Gets or sets the permissions.
            </summary>
            <value>The permissions.</value>
        </member>
        <member name="T:Beyova.IGeographyLocation">
            <summary>
            Interface IGeographyLocation
            </summary>
        </member>
        <member name="P:Beyova.IGeographyLocation.Latitude">
            <summary>
            Gets or sets the latitude.
            </summary>
            <value>The latitude.</value>
        </member>
        <member name="P:Beyova.IGeographyLocation.Longitude">
            <summary>
            Gets or sets the longitude.
            </summary>
            <value>The longitude.</value>
        </member>
        <member name="T:Beyova.AdminAuthenticationResult">
            <summary>
            Class AdminUserInfo.
            </summary>
        </member>
        <member name="P:Beyova.AdminAuthenticationResult.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="P:Beyova.AdminAuthenticationResult.TokenExpiredStamp">
            <summary>
            Gets or sets the token expired stamp.
            </summary>
            <value>The token expired stamp.</value>
        </member>
        <member name="P:Beyova.AdminAuthenticationResult.UserInfo">
            <summary>
            Gets or sets the user information.
            </summary>
            <value>The user information.</value>
        </member>
        <member name="T:Beyova.AdminUserInfoBase">
            <summary>
            Class AdminUserInfoBase.
            </summary>
        </member>
        <member name="P:Beyova.AdminUserInfoBase.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Beyova.AdminUserInfoBase.LoginName">
            <summary>
            Gets or sets the name of the login.
            </summary>
            <value>The name of the login.</value>
        </member>
        <member name="P:Beyova.AdminUserInfoBase.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Beyova.AdminUserInfoBase.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>The email.</value>
        </member>
        <member name="P:Beyova.AdminUserInfoBase.ThirdPartyId">
            <summary>
            Gets or sets the third party identifier.
            </summary>
            <value>The third party identifier.</value>
        </member>
        <member name="P:Beyova.AdminUserInfoBase.Permissions">
            <summary>
            Gets or sets the permissions.
            </summary>
            <value>The permissions.</value>
        </member>
        <member name="P:Beyova.AdminUserInfoBase.AvatarKey">
            <summary>
            Gets or sets the avatar key.
            </summary>
            <value>The avatar key.</value>
        </member>
        <member name="P:Beyova.AdminUserInfoBase.AvatarUrl">
            <summary>
            Gets or sets the avatar URL.
            </summary>
            <value>The avatar URL.</value>
        </member>
        <member name="M:Beyova.AdminUserInfoBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.AdminUserInfoBase"/> class.
            </summary>
        </member>
        <member name="T:Beyova.ApiTracking.ApiTraceLogPiece">
            <summary>
            Class ApiTraceLogPiece.
            </summary>
        </member>
        <member name="P:Beyova.ApiTracking.ApiTraceLogPiece.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiTraceLogPiece.MethodFullName">
            <summary>
            Gets or sets the full name of the method.
            </summary>
            <value>The full name of the method.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiTraceLogPiece.EntryStamp">
            <summary>
            Gets or sets the entry stamp.
            </summary>
            <value>The entry stamp.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiTraceLogPiece.ExitStamp">
            <summary>
            Gets or sets the exit stamp.
            </summary>
            <value>The exit stamp.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiTraceLogPiece.ExceptionKey">
            <summary>
            Gets or sets the exception key.
            </summary>
            <value>The exception key.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiTraceLogPiece.InnerTraces">
            <summary>
            Gets or sets the detail.
            </summary>
            <value>The detail.</value>
        </member>
        <member name="M:Beyova.ApiTracking.ApiTraceLogPiece.#ctor(Beyova.ApiTracking.ApiTraceLogPiece,System.String,System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ApiTracking.ApiTraceLogPiece"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="methodFullName">Full name of the method.</param>
            <param name="entryStamp">The entry stamp.</param>
        </member>
        <member name="M:Beyova.ApiTracking.ApiTraceLogPiece.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ApiTracking.ApiTraceLog"/> class.
            </summary>
        </member>
        <member name="T:Beyova.ApiTracking.GroupStatistic">
            <summary>
            Class GroupStatistic.
            </summary>
        </member>
        <member name="P:Beyova.ApiTracking.GroupStatistic.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="T:Beyova.ApiTracking.AnalyticStatistic">
            <summary>
            Class AnalyticStatistic.
            </summary>
        </member>
        <member name="P:Beyova.ApiTracking.AnalyticStatistic.StampIdentifier">
            <summary>
            Gets or sets the stamp identifier.
            </summary>
            <value>The stamp identifier.</value>
        </member>
        <member name="P:Beyova.ApiTracking.AnalyticStatistic.Count">
            <summary>
            Gets or sets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Beyova.ApiTracking.ExceptionGroupStatistic">
            <summary>
            Class ExceptionGroupStatistic.
            </summary>
        </member>
        <member name="P:Beyova.ApiTracking.ExceptionGroupStatistic.StampIdentifier">
            <summary>
            Gets or sets the stamp identifier.
            </summary>
            <value>The stamp identifier.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ExceptionGroupStatistic.Count">
            <summary>
            Gets or sets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:Beyova.ApiTracking.ExceptionGroupStatistic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ApiTracking.ExceptionGroupStatistic"/> class.
            </summary>
        </member>
        <member name="M:Beyova.ApiTracking.ExceptionGroupStatistic.#ctor(Beyova.ApiTracking.ExceptionGroupStatistic)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ApiTracking.ExceptionGroupStatistic"/> class.
            </summary>
            <param name="statistic">The statistic.</param>
        </member>
        <member name="T:Beyova.ApiTracking.ApiEventGroupStatistic">
            <summary>
            Class ApiEventGroupStatistic.
            </summary>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventGroupStatistic.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventGroupStatistic.StampIdentifier">
            <summary>
            Gets or sets the stamp identifier.
            </summary>
            <value>The stamp identifier.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventGroupStatistic.Count">
            <summary>
            Gets or sets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:Beyova.ApiTracking.ApiEventGroupStatistic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ApiTracking.ApiEventGroupStatistic"/> class.
            </summary>
        </member>
        <member name="M:Beyova.ApiTracking.ApiEventGroupStatistic.#ctor(Beyova.ApiTracking.ApiEventGroupStatistic)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ApiTracking.ApiEventGroupStatistic" /> class.
            </summary>
            <param name="statistic">The statistic.</param>
        </member>
        <member name="T:Beyova.ApiTracking.IAnalyticStatistic">
            <summary>
            Interface IAnalyticStatistic
            </summary>
        </member>
        <member name="P:Beyova.ApiTracking.IAnalyticStatistic.Count">
            <summary>
            Gets or sets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Beyova.ApiTracking.IAnalyticStatistic.StampIdentifier">
            <summary>
            Gets or sets the stamp identifier.
            </summary>
            <value>The stamp identifier.</value>
        </member>
        <member name="T:Beyova.ApiTracking.IGroupByResult">
            <summary>
            Interface IGroupByResult
            </summary>
        </member>
        <member name="P:Beyova.ApiTracking.IGroupByResult.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="T:Beyova.ApiTracking.ITimeFrame">
            <summary>
            Interface ITimeFrame
            </summary>
        </member>
        <member name="P:Beyova.ApiTracking.ITimeFrame.FromStamp">
            <summary>
            Gets or sets from stamp.
            </summary>
            <value>From stamp.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ITimeFrame.ToStamp">
            <summary>
            Gets or sets to stamp.
            </summary>
            <value>To stamp.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ITimeFrame.TimeZone">
            <summary>
            Gets or sets the time zone. Unit: minute
            </summary>
            <value>The time zone.</value>
        </member>
        <member name="T:Beyova.ApiTracking.ApiEventStatisticCriteria">
            <summary>
            Class ApiEventStatisticCriteria.
            </summary>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventStatisticCriteria.FrameInterval">
            <summary>
            Gets or sets the frame interval.
            </summary>
            <value>The frame interval.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventStatisticCriteria.LastNDays">
            <summary>
            Gets or sets the last n days.
            </summary>
            <value>The last n days.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventStatisticCriteria.FromStamp">
            <summary>
            Gets or sets from stamp.
            </summary>
            <value>From stamp.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventStatisticCriteria.ToStamp">
            <summary>
            Gets or sets to stamp.
            </summary>
            <value>To stamp.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventStatisticCriteria.TimeZone">
            <summary>
            Gets or sets the time zone. Unit: minute
            </summary>
            <value>The time zone.</value>
        </member>
        <member name="M:Beyova.ApiTracking.ApiEventStatisticCriteria.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ApiTracking.ApiEventStatisticCriteria"/> class.
            </summary>
        </member>
        <member name="M:Beyova.ApiTracking.ApiEventStatisticCriteria.#ctor(Beyova.ApiTracking.ApiEventLogBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ApiTracking.ApiEventStatisticCriteria"/> class.
            </summary>
            <param name="criteria">The criteria.</param>
        </member>
        <member name="T:Beyova.ApiTracking.ApiLogBase">
            <summary>
            Class ApiLogBase.
            </summary>
        </member>
        <member name="P:Beyova.ApiTracking.ApiLogBase.ServiceIdentifier">
            <summary>
            Gets or sets the service identifier.
            </summary>
            <value>The service identifier.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiLogBase.ServerIdentifier">
            <summary>
            Gets or sets the server identifier.
            <remarks>Commonly, it is server name.</remarks>
            </summary>
            <value>The server identifier.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiLogBase.UserIdentifier">
            <summary>
            Gets or sets the user identifier.
            </summary>
            <value>The user identifier.</value>
        </member>
        <member name="M:Beyova.ApiTracking.ApiLogBase.#ctor(Beyova.ApiTracking.ApiLogBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ApiTracking.ApiLogBase" /> class.
            </summary>
            <param name="logBase">The log base.</param>
        </member>
        <member name="M:Beyova.ApiTracking.ApiLogBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ApiTracking.ApiLogBase"/> class.
            </summary>
        </member>
        <member name="T:Beyova.ApiTracking.ApiEventLogBase">
            <summary>
            Class ApiEventLogBase.
            </summary>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventLogBase.ResourceName">
            <summary>
            Gets or sets the name of the resource.
            </summary>
            <value>The name of the resource.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventLogBase.ModuleName">
            <summary>
            Gets or sets the name of the module.
            </summary>
            <value>The name of the module.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventLogBase.ResourceEntityKey">
            <summary>
            Gets or sets the resource entity key.
            </summary>
            <value>The resource entity key.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventLogBase.ApiFullName">
            <summary>
            Gets or sets the full name of the API.
            </summary>
            <value>The full name of the API.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventLogBase.ExceptionKey">
            <summary>
            Gets or sets the exception key.
            </summary>
            <value>The exception key.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventLogBase.CultureCode">
            <summary>
            Gets or sets the culture code.
            </summary>
            <value>The culture code.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventLogBase.ClientIdentifier">
            <summary>
            Gets or sets the client identifier.
            Commonly, it can be device id, PC name, etc.
            </summary>
            <value>The client identifier.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventLogBase.IpAddress">
            <summary>
            Gets or sets the ip address.
            </summary>
            <value>The ip address.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventLogBase.UserAgent">
            <summary>
            Gets or sets the user agent.
            </summary>
            <value>The user agent.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventLogBase.RawUrl">
            <summary>
            Gets or sets the raw URL.
            </summary>
            <value>The raw URL.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventLogBase.ReferrerUrl">
            <summary>
            Gets or sets the referrer URL.
            </summary>
            <value>The referrer URL.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventLogBase.Platform">
            <summary>
            Gets or sets the platform.
            </summary>
            <value>The platform.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventLogBase.DeviceType">
            <summary>
            Gets or sets the type of the device.
            </summary>
            <value>The type of the device.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventLogBase.TraceId">
            <summary>
            Gets or sets the trace identifier.
            </summary>
            <value>The trace identifier.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventLogBase.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventLogBase.Protocol">
            <summary>
            Gets or sets the protocol.
            </summary>
            <value>The protocol.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventLogBase.OperatorCredential">
            <summary>
            Gets or sets the operator credential.
            </summary>
            <value>The operator credential.</value>
        </member>
        <member name="M:Beyova.ApiTracking.ApiEventLogBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ApiTracking.ApiEventLogBase"/> class.
            </summary>
        </member>
        <member name="M:Beyova.ApiTracking.ApiEventLogBase.#ctor(Beyova.ApiTracking.ApiEventLogBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ApiTracking.ApiEventLogBase"/> class.
            </summary>
            <param name="eventLogBase">The event log base.</param>
        </member>
        <member name="T:Beyova.ApiTracking.ExceptionStatisticCriteria">
            <summary>
            Class ExceptionStatisticCriteria.
            </summary>
        </member>
        <member name="P:Beyova.ApiTracking.ExceptionStatisticCriteria.FrameInterval">
            <summary>
            Gets or sets the frame interval.
            </summary>
            <value>The frame interval.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ExceptionStatisticCriteria.LastNDays">
            <summary>
            Gets or sets the last n days.
            </summary>
            <value>The last n days.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ExceptionStatisticCriteria.ToStamp">
            <summary>
            Gets or sets to stamp.
            </summary>
            <value>To stamp.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ExceptionStatisticCriteria.FromStamp">
            <summary>
            Gets or sets from stamp.
            </summary>
            <value>From stamp.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ExceptionStatisticCriteria.TimeZone">
            <summary>
            Gets or sets the time zone. Unit: minute
            </summary>
            <value>The time zone.</value>
        </member>
        <member name="M:Beyova.ApiTracking.ExceptionStatisticCriteria.#ctor(Beyova.ExceptionSystem.ExceptionBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ApiTracking.ExceptionStatisticCriteria" /> class.
            </summary>
            <param name="exceptionBase">The exception base.</param>
        </member>
        <member name="M:Beyova.ApiTracking.ExceptionStatisticCriteria.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ApiTracking.ExceptionStatisticCriteria"/> class.
            </summary>
        </member>
        <member name="T:Beyova.ApiTracking.ExceptionGroupingCriteria">
            <summary>
            Class ExceptionGroupingCriteria.
            </summary>
        </member>
        <member name="P:Beyova.ApiTracking.ExceptionGroupingCriteria.GroupByServiceIdentifier">
            <summary>
            Gets or sets a value indicating whether [group by service identifier].
            </summary>
            <value><c>true</c> if [group by service identifier]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ExceptionGroupingCriteria.GroupByServerIdentifier">
            <summary>
            Gets or sets the server identifier.
            </summary>
            <value>The server identifier.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ExceptionGroupingCriteria.GroupByExceptionCode">
            <summary>
            Gets or sets a value indicating whether [group by exception code].
            </summary>
            <value><c>true</c> if [group by exception code]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ExceptionGroupingCriteria.GroupByCriticalityLevel">
            <summary>
            Gets or sets a value indicating whether [group by criticality level].
            </summary>
            <value><c>true</c> if [group by criticality level]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Beyova.ApiTracking.ExceptionGroupingCriteria.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ApiTracking.ExceptionGroupingCriteria" /> class.
            </summary>
        </member>
        <member name="M:Beyova.ApiTracking.ExceptionGroupingCriteria.#ctor(Beyova.ApiTracking.ExceptionStatisticCriteria)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ApiTracking.ExceptionGroupingCriteria"/> class.
            </summary>
            <param name="criteria">The criteria.</param>
        </member>
        <member name="T:Beyova.ApiTracking.ApiEventGroupingCriteria">
            <summary>
            Class ApiEventGroupingCriteria.
            </summary>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventGroupingCriteria.GroupByResourceName">
            <summary>
            Gets or sets a value indicating whether [group by resource name].
            </summary>
            <value><c>true</c> if [group by resource name]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventGroupingCriteria.GroupByServiceIdentifier">
            <summary>
            Gets or sets a value indicating whether [group by service identifier].
            </summary>
            <value><c>true</c> if [group by service identifier]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventGroupingCriteria.GroupByServerIdentifier">
            <summary>
            Gets or sets a value indicating whether [group by server identifier].
            </summary>
            <value><c>true</c> if [group by server identifier]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventGroupingCriteria.GroupByLocation">
            <summary>
            Gets or sets a value indicating whether [group by location].
            </summary>
            <value><c>true</c> if [group by location]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Beyova.ApiTracking.ApiEventGroupingCriteria.#ctor(Beyova.ApiTracking.ApiEventStatisticCriteria)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ApiTracking.ApiEventGroupingCriteria" /> class.
            </summary>
            <param name="criteria">The criteria.</param>
        </member>
        <member name="M:Beyova.ApiTracking.ApiEventGroupingCriteria.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ApiTracking.ApiEventGroupingCriteria"/> class.
            </summary>
        </member>
        <member name="T:Beyova.ApiTracking.ApiEventCriteria">
            <summary>
            Class ApiEventCriteria.
            </summary>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventCriteria.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventCriteria.FromStamp">
            <summary>
            Gets or sets from stamp.
            </summary>
            <value>From stamp.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventCriteria.ToStamp">
            <summary>
            Gets or sets to stamp.
            </summary>
            <value>To stamp.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventCriteria.ApiDurationFrom">
            <summary>
            Gets or sets the API duration from.
            </summary>
            <value>The API duration from.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventCriteria.ApiDurationTo">
            <summary>
            Gets or sets the API duration to.
            </summary>
            <value>The API duration to.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventCriteria.Count">
            <summary>
            Gets or sets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventCriteria.HasException">
            <summary>
            Gets or sets a value indicating whether this instance has exception.
            </summary>
            <value><c>null</c> if [has exception] contains no value, <c>true</c> if [has exception]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Beyova.ApiTracking.ApiEventCriteria.#ctor(Beyova.ApiTracking.ApiEventLogBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ApiTracking.ApiEventCriteria" /> class.
            </summary>
        </member>
        <member name="M:Beyova.ApiTracking.ApiEventCriteria.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ApiTracking.ApiEventCriteria"/> class.
            </summary>
        </member>
        <member name="T:Beyova.ApiTracking.ApiTraceLog">
            <summary>
            Class ApiTraceLog.
            </summary>
        </member>
        <member name="P:Beyova.ApiTracking.ApiTraceLog.TraceId">
            <summary>
            Gets or sets the trace identifier.
            </summary>
            <value>The trace identifier.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiTraceLog.CreatedStamp">
            <summary>
            Gets or sets the created stamp.
            </summary>
            <value>The created stamp.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiTraceLog.ServiceName">
            <summary>
            Gets or sets the name of the service.
            </summary>
            <value>The name of the service.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiTraceLog.ServerName">
            <summary>
            Gets or sets the name of the server.
            </summary>
            <value>The name of the server.</value>
        </member>
        <member name="M:Beyova.ApiTracking.ApiTraceLog.#ctor(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ApiTracking.ApiTraceLog" /> class.
            </summary>
            <param name="serverName">Name of the server.</param>
            <param name="serviceName">Name of the service.</param>
            <param name="entryStamp">The entry stamp.</param>
        </member>
        <member name="M:Beyova.ApiTracking.ApiTraceLog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ApiTracking.ApiTraceLog" /> class.
            </summary>
        </member>
        <member name="T:Beyova.ApiTracking.ApiEventLog">
            <summary>
            Class ApiEventLog.
            </summary>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventLog.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventLog.EntryStamp">
            <summary>
            Gets or sets the entry stamp.
            </summary>
            <value>The entry stamp.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventLog.ExitStamp">
            <summary>
            Gets or sets the exit stamp.
            </summary>
            <value>The exit stamp.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventLog.CreatedStamp">
            <summary>
            Gets or sets the created stamp.
            </summary>
            <value>The created stamp.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventLog.ContentLength">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventLog.GeoInfo">
            <summary>
            Gets or sets the geo information.
            </summary>
            <value>The geo information.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ApiEventLog.Duration">
            <summary>
            Gets the duration. Unit: TotalMilliseconds
            </summary>
            <value>The duration.</value>
        </member>
        <member name="M:Beyova.ApiTracking.ApiEventLog.#ctor(Beyova.ApiTracking.ApiEventLogBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ApiTracking.ApiEventLog"/> class.
            </summary>
        </member>
        <member name="M:Beyova.ApiTracking.ApiEventLog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ApiTracking.ApiEventLog"/> class.
            </summary>
        </member>
        <member name="T:Beyova.ApiTracking.ExceptionCriteria">
            <summary>
            Class ExceptionCriteria.
            </summary>
        </member>
        <member name="P:Beyova.ApiTracking.ExceptionCriteria.MajorCode">
            <summary>
            Gets or sets the major code.
            </summary>
            <value>The major code.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ExceptionCriteria.MinorCode">
            <summary>
            Gets or sets the minor code.
            </summary>
            <value>The minor code.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ExceptionCriteria.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ExceptionCriteria.FromStamp">
            <summary>
            Gets or sets from stamp.
            </summary>
            <value>From stamp.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ExceptionCriteria.ToStamp">
            <summary>
            Gets or sets to stamp.
            </summary>
            <value>To stamp.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ExceptionCriteria.Count">
            <summary>
            Gets or sets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Beyova.ApiTracking.ExceptionCriteria.Scene">
            <summary>
            Gets or sets the scene.
            </summary>
            <value>The scene.</value>
        </member>
        <member name="M:Beyova.ApiTracking.ExceptionCriteria.#ctor(Beyova.ExceptionSystem.ExceptionBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ApiTracking.ExceptionCriteria" /> class.
            </summary>
            <param name="exceptionBase">The exception base.</param>
        </member>
        <member name="M:Beyova.ApiTracking.ExceptionCriteria.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ApiTracking.ExceptionCriteria"/> class.
            </summary>
        </member>
        <member name="T:Beyova.AuthenticationRequest">
            <summary>
            Class AuthenticationRequest.
            </summary>
        </member>
        <member name="P:Beyova.AuthenticationRequest.Platform">
            <summary>
            Gets or sets the platform.
            </summary>
            <value>The platform.</value>
        </member>
        <member name="P:Beyova.AuthenticationRequest.DeviceType">
            <summary>
            Gets or sets the type of the device.
            </summary>
            <value>The type of the device.</value>
        </member>
        <member name="P:Beyova.AuthenticationRequest.DeviceId">
            <summary>
            Gets or sets the device identifier.
            </summary>
            <value>The device identifier.</value>
        </member>
        <member name="T:Beyova.BinaryStorageCommitOption">
            <summary>
            Enum BinaryStorageCommitOption
            </summary>
        </member>
        <member name="F:Beyova.BinaryStorageCommitOption.Default">
            <summary>
            Value indicating that it is default
            </summary>
        </member>
        <member name="F:Beyova.BinaryStorageCommitOption.AllowDuplicatedInstance">
            <summary>
            Value indicating that it is allow duplicated instance
            </summary>
        </member>
        <member name="F:Beyova.BinaryStorageCommitOption.ShareDuplicatedInstance">
            <summary>
            Value indicating that it is share duplicated instance
            </summary>
        </member>
        <member name="T:Beyova.BinaryStorageCommitRequest">
            <summary>
            Class BinaryStorageCommitRequest.
            </summary>
        </member>
        <member name="P:Beyova.BinaryStorageCommitRequest.CommitOption">
            <summary>
            Gets or sets the commit option.
            </summary>
            <value>The commit option.</value>
        </member>
        <member name="T:Beyova.ComparisonResult">
            <summary>
            Class ComparisonResult.
            </summary>
        </member>
        <member name="P:Beyova.ComparisonResult.Identifier">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Beyova.ComparisonResult.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Beyova.ComparisonResult.Value1">
            <summary>
            Gets or sets the value1.
            </summary>
            <value>The value1.</value>
        </member>
        <member name="P:Beyova.ComparisonResult.Value2">
            <summary>
            Gets or sets the value2.
            </summary>
            <value>The value2.</value>
        </member>
        <member name="M:Beyova.ComparisonResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ComparisonResult"/> class.
            </summary>
        </member>
        <member name="M:Beyova.ComparisonResult.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ComparisonResult"/> class.
            </summary>
            <param name="path">The last identifier.</param>
            <param name="identifier">The identifier.</param>
        </member>
        <member name="T:Beyova.Diagnostic.ServiceHealth">
            <summary>
            Class ServiceHealth.
            </summary>
        </member>
        <member name="P:Beyova.Diagnostic.ServiceHealth.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Beyova.Diagnostic.ServiceHealth.Destination">
            <summary>
            Gets or sets the destination.
            </summary>
            <value>The destination.</value>
        </member>
        <member name="P:Beyova.Diagnostic.ServiceHealth.ServerName">
            <summary>
            Gets or sets the name of the server.
            </summary>
            <value>The name of the server.</value>
        </member>
        <member name="P:Beyova.Diagnostic.ServiceHealth.CpuUsage">
            <summary>
            Gets or sets the cpu usage.
            </summary>
            <value>The cpu usage.</value>
        </member>
        <member name="P:Beyova.Diagnostic.ServiceHealth.MemoryUsage">
            <summary>
            Gets or sets the memory usage.
            </summary>
            <value>The memory usage.</value>
        </member>
        <member name="P:Beyova.Diagnostic.ServiceHealth.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:Beyova.Diagnostic.ServiceHealth.CreatedStamp">
            <summary>
            Gets or sets the created stamp.
            </summary>
            <value>The created stamp.</value>
        </member>
        <member name="M:Beyova.Diagnostic.ServiceHealth.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.Diagnostic.ServiceHealth" /> class.
            </summary>
        </member>
        <member name="T:Beyova.GeoInfoBase">
            <summary>
            Class GeoInfoBase.
            </summary>
        </member>
        <member name="P:Beyova.GeoInfoBase.IsoCode">
            <summary>
            Gets or sets the iso code.
            </summary>
            <value>The iso code.</value>
        </member>
        <member name="P:Beyova.GeoInfoBase.CountryName">
            <summary>
            Gets or sets the name of the country.
            </summary>
            <value>The name of the country.</value>
        </member>
        <member name="P:Beyova.GeoInfoBase.CityName">
            <summary>
            Gets or sets the name of the city.
            </summary>
            <value>The name of the city.</value>
        </member>
        <member name="P:Beyova.GeoInfoBase.Latitude">
            <summary>
            Gets or sets the latitude.
            </summary>
            <value>The latitude.</value>
        </member>
        <member name="P:Beyova.GeoInfoBase.Longitude">
            <summary>
            Gets or sets the longitude.
            </summary>
            <value>The longitude.</value>
        </member>
        <member name="T:Beyova.Concurrent.ConcurrentMatrixList`1">
            <summary>
            Class ConcurrentMatrixList.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Beyova.Concurrent.ConcurrentMatrixList`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.Concurrent.ConcurrentMatrixList`1" /> class.
            </summary>
            <param name="keyCaseSensitive">if set to <c>true</c> [key case sensitive].</param>
        </member>
        <member name="M:Beyova.Concurrent.ConcurrentMatrixList`1.Add(System.String,`0)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Beyova.Concurrent.ConcurrentMatrixList`1.GetCollectionByKey(System.String,System.Boolean)">
            <summary>
            Gets the collection by key.
            </summary>
            <param name="key">The key.</param>
            <param name="createIfNotExist">if set to <c>true</c> [create if not exist].</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="T:Beyova.MatrixList`1">
            <summary>
            Class MatrixList.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Beyova.MatrixList`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.MatrixList`1" /> class.
            </summary>
            <param name="keyCaseSensitive">if set to <c>true</c> [key case sensitive].</param>
        </member>
        <member name="M:Beyova.MatrixList`1.Add(System.String,`0)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Beyova.MatrixList`1.GetCollectionByKey(System.String,System.Boolean)">
            <summary>
            Gets the collection by key.
            </summary>
            <param name="key">The key.</param>
            <param name="createIfNotExist">if set to <c>true</c> [create if not exist].</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="T:Beyova.Schedule">
            <summary>
            class Schedule
            </summary>
        </member>
        <member name="P:Beyova.Schedule.Recurrence">
            <summary>
            Gets or sets the recurrence.
            </summary>
            <value>The recurrence.</value>
        </member>
        <member name="P:Beyova.Schedule.HitReference">
            <summary>
            Gets or sets the hit reference.
            </summary>
            <value>The hit reference.</value>
        </member>
        <member name="P:Beyova.Schedule.StartStamp">
            <summary>
            Gets or sets the start stamp.
            </summary>
            <value>The start stamp.</value>
        </member>
        <member name="P:Beyova.Schedule.EndStamp">
            <summary>
            Gets or sets the end stamp.
            </summary>
            <value>The end stamp.</value>
        </member>
        <member name="M:Beyova.Schedule.GetNextOccurence(System.DateTime)">
            <summary>
            Gets the next occurence.
            </summary>
            <param name="nowStandardStamp">The now standard stamp.</param>
            <returns>System.Nullable&lt;DateTime&gt;.</returns>
        </member>
        <member name="M:Beyova.Schedule.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:Beyova.Schedule`1">
            <summary>
            Class Schedule.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Beyova.Schedule`1.Object">
            <summary>
            Gets or sets the object.
            </summary>
            <value>The object.</value>
        </member>
        <member name="T:Beyova.BaseCredential">
            <summary>
            Class BaseCredential.
            </summary>
        </member>
        <member name="P:Beyova.BaseCredential.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Beyova.BaseCredential.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="M:Beyova.BaseCredential.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.BaseCredential"/> class.
            </summary>
        </member>
        <member name="T:Beyova.DiskDriveInfo">
            <summary>
            Class DiskDriveInfo.
            </summary>
        </member>
        <member name="P:Beyova.DiskDriveInfo.IsReady">
            <summary>
            Gets a value indicating whether this instance is ready.
            </summary>
            <value><c>true</c> if this instance is ready; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Beyova.DiskDriveInfo.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Beyova.DiskDriveInfo.TotalFreeSpace">
            <summary>
            Gets the total free space.
            </summary>
            <value>The total free space.</value>
        </member>
        <member name="P:Beyova.DiskDriveInfo.TotalSize">
            <summary>
            Gets the total size.
            </summary>
            <value>The total size.</value>
        </member>
        <member name="P:Beyova.DiskDriveInfo.VolumeLabel">
            <summary>
            Gets or sets the volume label.
            </summary>
            <value>The volume label.</value>
        </member>
        <member name="T:Beyova.MachineHealth">
            <summary>
            Class MachineHealth.
            </summary>
        </member>
        <member name="P:Beyova.MachineHealth.MemoryUsage">
            <summary>
            Gets or sets the memory usage.
            </summary>
            <value>The memory usage.</value>
        </member>
        <member name="P:Beyova.MachineHealth.TotalMemory">
            <summary>
            Gets or sets the total memory.
            </summary>
            <value>The total memory.</value>
        </member>
        <member name="P:Beyova.MachineHealth.CpuUsage">
            <summary>
            Gets or sets the cpu usage. Unit: %.
            </summary>
            <value>The cpu usage.</value>
        </member>
        <member name="P:Beyova.MachineHealth.DiskUsages">
            <summary>
            Gets or sets the disk usages.
            </summary>
            <value>The disk usages.</value>
        </member>
        <member name="P:Beyova.MachineHealth.ServerName">
            <summary>
            Gets or sets the name of the server.
            </summary>
            <value>The name of the server.</value>
        </member>
        <member name="M:Beyova.MachineHealth.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.MachineHealth"/> class.
            </summary>
        </member>
        <member name="T:Beyova.TimeScope">
            <summary>
            Enum TimeScope
            </summary>
        </member>
        <member name="F:Beyova.TimeScope.None">
            <summary>
            Value indicating it is none
            </summary>
        </member>
        <member name="F:Beyova.TimeScope.Hour">
            <summary>
            Value indicating it is hour
            </summary>
        </member>
        <member name="F:Beyova.TimeScope.Day">
            <summary>
            Value indicating it is day
            </summary>
        </member>
        <member name="F:Beyova.TimeScope.Week">
            <summary>
            Value indicating it is week
            </summary>
        </member>
        <member name="F:Beyova.TimeScope.Month">
            <summary>
            Value indicating it is month
            </summary>
        </member>
        <member name="F:Beyova.TimeScope.Year">
            <summary>
            Value indicating it is year
            </summary>
        </member>
        <member name="T:Beyova.ProgrammingIntelligence.BeyovaConfigurationAttribute">
            <summary>
            Class BeyovaConfigurationAttribute.
            </summary>
        </member>
        <member name="P:Beyova.ProgrammingIntelligence.BeyovaConfigurationAttribute.RemoteConfigurationUri">
            <summary>
            Gets or sets the remote configuration URI.
            </summary>
            <value>The remote configuration URI.</value>
        </member>
        <member name="P:Beyova.ProgrammingIntelligence.BeyovaConfigurationAttribute.RemoteConfigurationRsaKey">
            <summary>
            Gets or sets the remote configuration RSA key.
            </summary>
            <value>The remote configuration RSA key.</value>
        </member>
        <member name="P:Beyova.ProgrammingIntelligence.BeyovaConfigurationAttribute.ConfigurationName">
            <summary>
            Gets or sets the name of the configuration.
            </summary>
            <value>The name of the configuration.</value>
        </member>
        <member name="P:Beyova.ProgrammingIntelligence.BeyovaConfigurationAttribute.ConfigurationDirectory">
            <summary>
            Gets or sets the configuration directory.
            </summary>
            <value>The configuration directory.</value>
        </member>
        <member name="M:Beyova.ProgrammingIntelligence.BeyovaConfigurationAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ProgrammingIntelligence.BeyovaConfigurationAttribute"/> class.
            If configurationName is not with extension '.json', then would append it.
            If configurationDirectory is not specified, then use BaseDirectory/Configurations/{configurationName}
            </summary>
            <param name="configurationName">Name of the configuration.</param>
            <param name="configurationDirectory">The configuration directory.</param>
        </member>
        <member name="M:Beyova.ProgrammingIntelligence.BeyovaConfigurationAttribute.#ctor(System.Uri,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ProgrammingIntelligence.BeyovaConfigurationAttribute" /> class.
            </summary>
            <param name="remoteConfigurationUri">The remote configuration URI.</param>
            <param name="publicRsaKey">The public RSA key.</param>
        </member>
        <member name="M:Beyova.ProgrammingIntelligence.BeyovaConfigurationAttribute.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Beyova.ProgrammingIntelligence.BeyovaConfigurationAttribute.GetConfigurationFullPath">
            <summary>
            Gets the configuration full path.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:Beyova.ProgrammingIntelligence.BeyovaComponentAttribute">
            <summary>
            Class BeyovaComponentAttribute.
            </summary>
        </member>
        <member name="P:Beyova.ProgrammingIntelligence.BeyovaComponentAttribute.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Beyova.ProgrammingIntelligence.BeyovaComponentAttribute.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="M:Beyova.ProgrammingIntelligence.BeyovaComponentAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ProgrammingIntelligence.BeyovaComponentAttribute" /> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="version">The version.</param>
        </member>
        <member name="M:Beyova.ProgrammingIntelligence.BeyovaComponentAttribute.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Beyova.DocumentGenerator">
            <summary>
            Class DocumentGenerator.
            </summary>
        </member>
        <member name="F:Beyova.DocumentGenerator.propertyNameFormat">
            <summary>
            The property name
            </summary>
        </member>
        <member name="F:Beyova.DocumentGenerator.objectBrace">
            <summary>
            The object brace
            </summary>
        </member>
        <member name="F:Beyova.DocumentGenerator.arrayBrace">
            <summary>
            The array brace
            </summary>
        </member>
        <member name="F:Beyova.DocumentGenerator.enumFormat">
            <summary>
            The enum format
            </summary>
        </member>
        <member name="F:Beyova.DocumentGenerator.httpStatusFormat">
            <summary>
            The HTTP status format
            </summary>
        </member>
        <member name="F:Beyova.DocumentGenerator.panel">
            <summary>
            The panel
            </summary>
        </member>
        <member name="F:Beyova.DocumentGenerator.enumTableCss">
            <summary>
            The enum table CSS
            </summary>
        </member>
        <member name="F:Beyova.DocumentGenerator.operationPanelCss">
            <summary>
            The operation panel CSS
            </summary>
        </member>
        <member name="F:Beyova.DocumentGenerator.jsonCss">
            <summary>
            The json CSS
            </summary>
        </member>
        <member name="P:Beyova.DocumentGenerator.TokenKey">
            <summary>
            Gets or sets the token key.
            </summary>
            <value>The token key.</value>
        </member>
        <member name="M:Beyova.DocumentGenerator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.DocumentGenerator" /> class.
            </summary>
            <param name="tokenKey">The token key.</param>
        </member>
        <member name="M:Beyova.DocumentGenerator.WriteHtmlDocumentToZip(System.Type[])">
            <summary>
            Writes the HTML document to zip. If types has no item, all API in current AppDomain would be generated.
            </summary>
            <param name="types">The types.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:Beyova.DocumentGenerator.WriteHtmlDocumentToFile(System.String,System.Type[])">
            <summary>
            Writes the HTML document to file. If types has no item, all API in current AppDomain would be generated.
            </summary>
            <param name="containerPath">The container path.</param>
            <param name="types">The types.</param>
        </member>
        <member name="M:Beyova.DocumentGenerator.GetAssemblyType">
            <summary>
            Gets the type of the assembly.
            </summary>
            <returns>List&lt;Type&gt;.</returns>
        </member>
        <member name="M:Beyova.DocumentGenerator.WriteHtmlDocument``1(System.Action{``0,System.String,System.Byte[]},``0,System.Type[])">
            <summary>
            Writes the HTML document.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="packageDocumentDelegate">The package document delegate.</param>
            <param name="container">The container.</param>
            <param name="types">The types.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Beyova.DocumentGenerator.WriteApiServiceHtmlDocumentPanel(System.Text.StringBuilder,System.Type,Beyova.RestApi.ApiContractAttribute)">
            <summary>
            Writes the API service HTML document panel.
            </summary>
            <param name="builder">The builder.</param>
            <param name="apiServiceType">Type of the API service.</param>
            <param name="apiContractAttribute">The API class attribute.</param>
        </member>
        <member name="M:Beyova.DocumentGenerator.WriteEnumValueTableToFile(System.String,System.Type)">
            <summary>
            Writes the enum value table to file.
            </summary>
            <param name="containerPath">The container path.</param>
            <param name="enumType">Type of the enum.</param>
        </member>
        <member name="M:Beyova.DocumentGenerator.GetEnumValueTable(System.Type)">
            <summary>
            Gets the enum value table.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.DocumentGenerator.WriteEnumHtmlTable(System.Text.StringBuilder,System.Type)">
            <summary>
            Writes the enum HTML table.
            </summary>
            <param name="builder">The builder.</param>
            <param name="enumType">Type of the enum.</param>
        </member>
        <member name="M:Beyova.DocumentGenerator.WriteApiHtmlDocument(System.Text.StringBuilder,System.Type,Beyova.RestApi.ApiContractAttribute,Beyova.Api.TokenRequiredAttribute,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Writes the API HTML document.
            </summary>
            <param name="builder">The builder.</param>
            <param name="apiServiceType">Type of the API service.</param>
            <param name="apiClass">The API class.</param>
            <param name="classTokenRequiredAttribute">The class token required attribute.</param>
            <param name="enumSets">The enum sets.</param>
        </member>
        <member name="M:Beyova.DocumentGenerator.FillSampleValue(System.Text.StringBuilder,System.Type,System.Collections.Generic.HashSet{System.Type},System.Int32,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.Type})">
            <summary>
            Fills the sample value.
            </summary>
            <param name="builder">The builder.</param>
            <param name="type">The type.</param>
            <param name="enumSets">The enum sets.</param>
            <param name="indent">The indent.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="ignoreQuote">if set to <c>true</c> [ignore quote].</param>
            <param name="followingProperty">if set to <c>true</c> [following property].</param>
            <param name="objectChain">The object chain.</param>
        </member>
        <member name="M:Beyova.DocumentGenerator.WriteAsEntireHtmlFile(System.String,System.String)">
            <summary>
            Writes as entire HTML file.
            </summary>
            <param name="bodyContent">Content of the body.</param>
            <param name="title">The title.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.DocumentGenerator.RemoveUnnecessaryColon(System.Text.StringBuilder)">
            <summary>
            Removes the unnecessary colon.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Beyova.DocumentGenerator.FillProperty(System.Text.StringBuilder,System.String,System.Type)">
            <summary>
            Fills the property.
            </summary>
            <param name="builder">The builder.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyType">Type of the property.</param>
        </member>
        <member name="M:Beyova.DocumentGenerator.AppendIndent(System.Text.StringBuilder,System.Int32)">
            <summary>
            Appends the indent.
            </summary>
            <param name="builder">The builder.</param>
            <param name="indent">The indent.</param>
        </member>
        <member name="M:Beyova.DocumentGenerator.AppendComma(System.Text.StringBuilder)">
            <summary>
            Appends the comma.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Beyova.DocumentGenerator.AppendColon(System.Text.StringBuilder)">
            <summary>
            Appends the colon.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Beyova.DocumentGenerator.AppendChain(System.Collections.Generic.List{System.Type},System.Type)">
            <summary>
            Appends the chain.
            </summary>
            <param name="chain">The chain.</param>
            <param name="type">The type.</param>
            <returns>List&lt;Type&gt;.</returns>
        </member>
        <member name="M:Beyova.DocumentGenerator.GetApiOperationIdentifier(Beyova.RestApi.ApiOperationAttribute)">
            <summary>
            Gets the API operation identifier.
            </summary>
            <param name="apiOperation">The API operation.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.DocumentGenerator.OverThreshold(System.Collections.Generic.List{System.Type},System.Type)">
            <summary>
            Overs the threshold.
            </summary>
            <param name="chain">The chain.</param>
            <param name="type">The type.</param>
            <returns><c>true</c> if it is over threshold, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Beyova.IOExtension">
            <summary>
            Extensions forIOExtension
            </summary>
        </member>
        <member name="F:Beyova.IOExtension.dot">
            <summary>
            The dot
            </summary>
        </member>
        <member name="M:Beyova.IOExtension.CombineExtension(System.String,System.String)">
            <summary>
            Combines the extension.
            </summary>
            <param name="pureFileName">Name of the pure file.</param>
            <param name="extension">The extension.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.IOExtension.GetPureFileName(System.String)">
            <summary>
            Gets the name of the pure file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.IOExtension.GetTempFolder(System.Object,System.Nullable{System.Guid}@)">
            <summary>
            Gets the temporary folder.
            If the tempIdentity is null, method would assign one.
            If the folder of tempIdentity is not existed, it would be created.
            </summary>
            <param name="anyObject">Any object.</param>
            <param name="tempIdentity">The temporary identity.</param>
            <returns>DirectoryInfo.</returns>
        </member>
        <member name="M:Beyova.IOExtension.ReadFileContents(System.String,System.Text.Encoding)">
            <summary>
            Reads the file contents.
            </summary>
            <param name="path">The path.</param>
            <param name="encoding">The encoding.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.IOExtension.ReadFileBytes(System.String)">
            <summary>
            Reads the file bytes.
            </summary>
            <param name="path">The path.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:Beyova.IOExtension.GetAbsoluteUri(System.IO.DirectoryInfo,System.String)">
            <summary>
            Gets the absolute URI.
            If the relative Uri is started with ~/ or /, then directory should be the root directory of site.
            If the relative Uri is started with ../ or ./, then directory should be the current directory.
            </summary>
            <param name="directory">The directory.</param>
            <param name="relativeUri">The relative URI.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.IOExtension.GenerateRelativeResourceUri(System.IO.DirectoryInfo,System.String)">
            <summary>
            Generates the relative resource URI.
            </summary>
            <param name="currentDirectory">The current directory.</param>
            <param name="targetAbsoluteUri">The target absolute URI.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.IOExtension.FullName(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Fulls the name.
            </summary>
            <param name="directory">The directory.</param>
            <param name="endWithSlash">if set to <c>true</c> [end with slash].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.IOExtension.ToHex(System.Byte[])">
            <summary>
            To the hexadecimal.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.IOExtension.ReadStreamToBytes(System.IO.Stream,System.Boolean)">
            <summary>
            Reads the stream to bytes.
            </summary>
            <param name="stream">The stream.</param>
            <param name="closeWhenFinish">if set to <c>true</c> [close when finish].</param>
            <returns>System.Byte[][].</returns>
        </member>
        <member name="M:Beyova.IOExtension.ToBytes(System.IO.Stream)">
            <summary>
            To the bytes.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The <see cref="T:System.Byte" />  array of stream.</returns>
            <exception cref="T:Beyova.ExceptionSystem.OperationFailureException">StreamToBytes</exception>
        </member>
        <member name="M:Beyova.IOExtension.ToStream(System.Byte[])">
            <summary>
            To the stream.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>The <see cref="T:System.IO.Stream" />  for byte array.</returns>
        </member>
        <member name="M:Beyova.IOExtension.IsRelativePath(System.String)">
            <summary>
            Determines whether [is relative path] [the specified path].
            </summary>
            <param name="path">The path.</param>
            <returns><c>true</c> if [is relative path] [the specified path]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.IOExtension.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies the stream.
            </summary>
            <param name="sourceStream">The source stream.</param>
            <param name="destinationStream">The destination stream.</param>
        </member>
        <member name="T:Beyova.DatabaseExtensionExtension">
            <summary>
            Extensions for common type and common actions
            </summary>
        </member>
        <member name="M:Beyova.DatabaseExtensionExtension.PreventSqlInjection(System.String)">
            <summary>
            Prevents the SQL injection.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.DatabaseExtensionExtension.HasColumn(System.Data.IDataRecord,System.String)">
            <summary>
            Determines whether the specified data reader has column.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns><c>true</c> if the specified dr has column; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Beyova.CompressionExtension">
            <summary>
            Class CompressionExtension.
            </summary>
        </member>
        <member name="M:Beyova.CompressionExtension.CompressBytesToString(System.Byte[])">
            <summary>
            Compresses the specified bytes object.
            </summary>
            <param name="bytesObject">The bytes object.</param>
            <returns>System.String.</returns>
            <exception cref="T:Beyova.ExceptionSystem.OperationFailureException">Compress</exception>
        </member>
        <member name="M:Beyova.CompressionExtension.Compress(System.String,System.Text.Encoding)">
            <summary>
            Compresses the specified string object.
            </summary>
            <param name="stringObject">The string object.</param>
            <param name="encoding">The encoding.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CompressionExtension.CompressObjectToString(System.Object)">
            <summary>
            Compresses the object automatic string.
            </summary>
            <param name="anyObject">Any object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CompressionExtension.Decompress(System.String,System.Text.Encoding)">
            <summary>
            Decompresses the specified string object.
            </summary>
            <param name="stringObject">The string object.</param>
            <param name="encoding">The encoding.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CompressionExtension.DecompressStringToObject(System.String)">
            <summary>
            Decompresses the string automatic object.
            </summary>
            <param name="stringObject">The string object.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Beyova.CompressionExtension.DecompressStringToBytes(System.String)">
            <summary>
            Decompresses the string automatic bytes.
            </summary>
            <param name="stringObject">The string object.</param>
            <returns>System.Byte[][].</returns>
            <exception cref="T:Beyova.ExceptionSystem.OperationFailureException">Decompress</exception>
        </member>
        <member name="M:Beyova.CompressionExtension.Decompress(System.Byte[])">
            <summary>
            Decompresses the specified bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>System.Byte[][].</returns>
            <exception cref="T:Beyova.ExceptionSystem.OperationFailureException">Decompress</exception>
        </member>
        <member name="M:Beyova.CompressionExtension.ExtractZipFile(System.String,System.String,System.Text.Encoding)">
            <summary>
            Extracts the zip file.
            </summary>
            <param name="zipFilePath">The zip file path.</param>
            <param name="extractPath">The extract path.</param>
            <param name="encoding">The encoding.</param>
            <exception cref="T:Beyova.ExceptionSystem.OperationFailureException">ExtractZipFile</exception>
        </member>
        <member name="M:Beyova.CompressionExtension.GetArchiveEntryByPath(System.IO.Compression.ZipArchive,System.String)">
            <summary>
            Gets the archive entry by path.
            </summary>
            <param name="archive">The archive.</param>
            <param name="entryPathToExtract">The entry path to extract.
            <remarks><example>Payload/xxx.app/Info.plist</example></remarks>
            </param>
            <returns>ZipArchiveEntry.</returns>
        </member>
        <member name="M:Beyova.CompressionExtension.ExtractZipByEntryPath(System.IO.Stream,System.String,System.String)">
            <summary>
            Extracts the zip by entry path.
            </summary>
            <param name="zipFileStreamToOpen">The zip file stream to open.</param>
            <param name="entryPathToExtract">The entry path to extract.
            <remarks><example>Payload/xxx.app/Info.plist</example></remarks></param>
            <param name="destinationDirectoryPath">The destination directory path.</param>
        </member>
        <member name="M:Beyova.CompressionExtension.ExtractZipByEntryPath(System.IO.Stream,System.String)">
            <summary>
            Extracts the zip by entry path.
            </summary>
            <param name="zipFileStreamToOpen">The zip file stream to open.</param>
            <param name="entryPathToExtract">The entry path to extract.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:Beyova.CompressionExtension.ZipAsBytes(System.Collections.Generic.Dictionary{System.String,System.Byte[]},System.IO.Compression.CompressionLevel)">
            <summary>
            Zips as bytes.
            <remarks>
            In parameter items, if you want to add folder, please use path like {directory}/{fileName}.
            <example>
            Folder1/Folder11/File1.txt
            </example>
            </remarks>
            </summary>
            <param name="items">The items.</param>
            <param name="compressionLevel">The compression level.</param>
            <returns></returns>
        </member>
        <member name="M:Beyova.CompressionExtension.ZipAsBytes(System.Byte[],System.String,System.IO.Compression.CompressionLevel)">
            <summary>
            Zips as bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="fileName">Name of the file.</param>
            <param name="compressionLevel">The compression level.</param>
            <returns></returns>
        </member>
        <member name="M:Beyova.CompressionExtension.ZipToPath(System.Collections.Generic.Dictionary{System.String,System.Byte[]},System.String,System.IO.Compression.CompressionLevel)">
            <summary>
            Zips to path.
            </summary>
            <param name="items">The items.</param>
            <param name="destinationPath">The destination path.</param>
            <param name="compressionLevel">The compression level.</param>
        </member>
        <member name="M:Beyova.CompressionExtension.ZipToPath(System.Byte[],System.String,System.String,System.IO.Compression.CompressionLevel)">
            <summary>
            Zips to path.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="fileName">Name of the file.</param>
            <param name="destinationPath">The destination path.</param>
            <param name="compressionLevel">The compression level.</param>
        </member>
        <member name="M:Beyova.CompressionExtension.ZipAsBytes(System.Object,System.Collections.Generic.KeyValuePair{System.String,System.Byte[]}[])">
            <summary>
            Zips as bytes.
            </summary>
            <param name="anyObject">Any object.</param>
            <param name="archiveItems">The archive items.</param>
            <returns></returns>
        </member>
        <member name="T:Beyova.SentenceExtension">
            <summary>
            Class SentenceExtension
            </summary>
        </member>
        <member name="M:Beyova.SentenceExtension.SplitSentenceByUpperCases(System.String)">
            <summary>
            Splits the sentence by upper cases.
            </summary>
            <param name="anyString">Any string.</param>
            <returns></returns>
        </member>
        <member name="M:Beyova.SentenceExtension.CombineSentence(System.String,System.Char[],System.Char)">
            <summary>
            Combines the sentence.
            </summary>
            <param name="sentence">The sentence.</param>
            <param name="specialCharactors">The special charactors.</param>
            <param name="specialCharactorReplace">The special charactor replace.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Beyova.ThreadExtension">
            <summary>
            Class ThreadExtension.
            </summary>
        </member>
        <member name="F:Beyova.ThreadExtension._threadData">
            <summary>
            The thread data
            </summary>
        </member>
        <member name="P:Beyova.ThreadExtension.ThreadData">
            <summary>
            Gets the thread data.
            </summary>
            <value>The thread data.</value>
        </member>
        <member name="M:Beyova.ThreadExtension.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Beyova.ThreadExtension.SetThreadData(System.String,System.Object)">
            <summary>
            Sets the thread data.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Beyova.ThreadExtension.GetThreadData(System.String)">
            <summary>
            Gets the thread data.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Beyova.ThreadExtension.RunAsNewBackgroundThread(System.Threading.ThreadStart)">
            <summary>
            Runs as new background thread.
            </summary>
            <param name="threadStart">The thread start.</param>
            <returns>System.Nullable&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:Beyova.ThreadExtension.RunAsNewBackgroundThread(System.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            Runs as new background thread.
            </summary>
            <param name="threadStart">The thread start.</param>
            <param name="inputParameter">The input parameter.</param>
            <returns>System.Nullable&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:Beyova.ThreadExtension.RunThreadTask(System.Threading.WaitCallback)">
            <summary>
            Runs the thread task.
            </summary>
            <param name="callback">The callback.</param>
            <returns><c>true</c> if succeed to run, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Beyova.ThreadExtension.RunThreadTask(System.Threading.WaitCallback,System.Object)">
            <summary>
            Runs the thread task.
            </summary>
            <param name="callback">The callback.</param>
            <param name="inputParameter">The input parameter.</param>
            <returns><c>true</c> if succeed to run, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Beyova.EnvironmentCore">
            <summary>
            Class EnvironmentCore.
            </summary>
        </member>
        <member name="F:Beyova.EnvironmentCore.ApplicationBaseDirectory">
            <summary>
            The application base directory
            </summary>
        </member>
        <member name="F:Beyova.EnvironmentCore.LogDirectory">
            <summary>
            The log directory
            </summary>
        </member>
        <member name="F:Beyova.EnvironmentCore.ApplicationId">
            <summary>
            The application identifier
            </summary>
        </member>
        <member name="F:Beyova.EnvironmentCore.ServerName">
            <summary>
            The server name
            </summary>
        </member>
        <member name="P:Beyova.EnvironmentCore.ProjectName">
            <summary>
            Gets the name of the project.
            </summary>
            <value>The name of the project.</value>
        </member>
        <member name="F:Beyova.EnvironmentCore.DescendingAssemblyDependencyChain">
            <summary>
            The descending assembly dependency chain
            </summary>
        </member>
        <member name="M:Beyova.EnvironmentCore.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Beyova.EnvironmentCore"/> class.
            </summary>
        </member>
        <member name="P:Beyova.EnvironmentCore.TotalMemory">
            <summary>
            Gets the total memory. Unit: bytes
            </summary>
            <value>The total memory.</value>
        </member>
        <member name="M:Beyova.EnvironmentCore.FindProjectName">
            <summary>
            Finds the name of the project.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:Beyova.IJsonSerializable">
            <summary>
            Interface IJsonSerializable
            </summary>
        </member>
        <member name="M:Beyova.IJsonSerializable.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the json.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Beyova.IJsonSerializable.FillPropertyValuesByJToken(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Fills the property values by JToken.
            </summary>
            <param name="jToken">The j token.</param>
        </member>
        <member name="T:Beyova.IXmlSerializable">
            <summary>
            Interface IXmlSerializable
            </summary>
        </member>
        <member name="M:Beyova.IXmlSerializable.ToXml">
            <summary>
            To the XML.
            </summary>
            <returns>XElement.</returns>
        </member>
        <member name="M:Beyova.IXmlSerializable.FillPropertyValuesByXml(System.Xml.Linq.XElement)">
            <summary>
            Fills the property values by XML.
            </summary>
            <param name="xElement">The x element.</param>
        </member>
        <member name="T:Beyova.IAuthenticationResult`2">
            <summary>
            Interface IUserInfo
            </summary>
        </member>
        <member name="P:Beyova.IAuthenticationResult`2.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="P:Beyova.IAuthenticationResult`2.TokenExpiredStamp">
            <summary>
            Gets or sets the token expired stamp.
            </summary>
            <value>The token expired stamp.</value>
        </member>
        <member name="P:Beyova.IAuthenticationResult`2.UserInfo">
            <summary>
            Gets or sets the user information.
            </summary>
            <value>The user information.</value>
        </member>
        <member name="T:Beyova.IAuthenticationResult`1">
            <summary>
            Interface IAuthenticationResult
            </summary>
            <typeparam name="TUserInfo">The type of the t user information.</typeparam>
        </member>
        <member name="P:Beyova.IAuthenticationResult`1.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="P:Beyova.IAuthenticationResult`1.TokenExpiredStamp">
            <summary>
            Gets or sets the token expired stamp.
            </summary>
            <value>The token expired stamp.</value>
        </member>
        <member name="P:Beyova.IAuthenticationResult`1.UserInfo">
            <summary>
            Gets or sets the user information.
            </summary>
            <value>The user information.</value>
        </member>
        <member name="T:Beyova.CommonServiceInterface.IBinaryStorageService`2">
            <summary>
            Interface IBinaryStorageService
            </summary>
            <typeparam name="TBinaryStorageObject">The generic type of the binary storage object.</typeparam>
            <typeparam name="TBinaryStorageCriteria">The generic type of the binary storage criteria.</typeparam>
        </member>
        <member name="M:Beyova.CommonServiceInterface.IBinaryStorageService`2.RequestBinaryUploadCredential(`0)">
            <summary>
            Requests the binary upload credential.
            </summary>
            <param name="meteData">The mete data.</param>
            <returns>BinaryStorageActionCredential.</returns>
        </member>
        <member name="M:Beyova.CommonServiceInterface.IBinaryStorageService`2.RequestBinaryDownloadCredential(Beyova.BinaryStorageIdentifier)">
            <summary>
            Requests the binary download credential.
            </summary>
            <param name="identifier">The identifier.</param>
            <returns>BinaryStorageActionCredential.</returns>
        </member>
        <member name="M:Beyova.CommonServiceInterface.IBinaryStorageService`2.QueryUserBinaryStorage(`1)">
            <summary>
            Queries the binary storage. (User based)
            </summary>
            <param name="criteria">The criteria.</param>
            <returns>List&lt;TBinaryStorageObject&gt;.</returns>
        </member>
        <member name="M:Beyova.CommonServiceInterface.IBinaryStorageService`2.QueryBinaryStorage(`1)">
            <summary>
            Queries the binary storage.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns>List&lt;TBinaryStorageObject&gt;.</returns>
        </member>
        <member name="M:Beyova.CommonServiceInterface.IBinaryStorageService`2.GetBinaryStorageByKey(System.String)">
            <summary>
            Gets the binary storage by key.
            </summary>
            <param name="key">The key.</param>
            <returns>TBinaryStorageObject.</returns>
        </member>
        <member name="M:Beyova.CommonServiceInterface.IBinaryStorageService`2.GetBinaryStorageByKeys(System.Collections.Generic.List{System.String})">
            <summary>
            Gets the binary storage by keys.
            </summary>
            <param name="keys">The keys.</param>
            <returns>List&lt;TBinaryStorageObject&gt;.</returns>
        </member>
        <member name="M:Beyova.CommonServiceInterface.IBinaryStorageService`2.CommitBinaryStorage(Beyova.BinaryStorageCommitRequest)">
            <summary>
            Commits the binary storage.
            </summary>
            <param name="request">The request.</param>
            <returns>BinaryStorageIdentifier.</returns>
        </member>
        <member name="M:Beyova.CommonServiceInterface.IBinaryStorageService`2.DeleteBinaryStorage(System.String)">
            <summary>
            Deletes the binary storage.
            </summary>
            <param name="identifier">The identifier.</param>
        </member>
        <member name="T:Beyova.CommonServiceInterface.IAuthenticationProfileService`4">
            <summary>
            Interface IAuthenticationProfileService
            </summary>
            <typeparam name="TUserInfo">The type of the t user information.</typeparam>
            <typeparam name="TUserCriteria">The type of the t user criteria.</typeparam>
            <typeparam name="TAuthenticationResult">The type of the t authentication result.</typeparam>
            <typeparam name="TFunctionalRole">The type of the t functional role.</typeparam>
        </member>
        <member name="M:Beyova.CommonServiceInterface.IAuthenticationProfileService`4.Authenticate(Beyova.AuthenticationRequest)">
            <summary>
            Authenticates the specified request.
            </summary>
            <param name="request">The request.</param>
            <returns>TAuthenticationResult.</returns>
        </member>
        <member name="M:Beyova.CommonServiceInterface.IAuthenticationProfileService`4.Logout(System.String)">
            <summary>
            Log Out.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Beyova.CommonServiceInterface.IAuthenticationProfileService`4.GetUserInfoByToken(System.String)">
            <summary>
            Gets the user information by token.
            </summary>
            <param name="token">The token.</param>
            <returns>TUserInfo.</returns>
        </member>
        <member name="M:Beyova.CommonServiceInterface.IAuthenticationProfileService`4.RenewToken(System.String)">
            <summary>
            Renews the token.
            </summary>
            <param name="token">The token.</param>
            <returns>LoginResult.</returns>
        </member>
        <member name="M:Beyova.CommonServiceInterface.IAuthenticationProfileService`4.GetSessionInfoByToken(System.String)">
            <summary>
            Gets the current session information.
            </summary>
            <param name="token">The token.</param>
            <returns>SessionInfo.</returns>
        </member>
        <member name="M:Beyova.CommonServiceInterface.IAuthenticationProfileService`4.QuerySessionInfo(Beyova.SessionCriteria)">
            <summary>
            Queries the session information.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns>SessionInfo.</returns>
        </member>
        <member name="M:Beyova.CommonServiceInterface.IAuthenticationProfileService`4.QueryUserInfo(`1)">
            <summary>
            Queries the user information.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns>List&lt;UserInfo&gt;.</returns>
        </member>
        <member name="M:Beyova.CommonServiceInterface.IAuthenticationProfileService`4.GetUserInfoByUserKey(System.Nullable{System.Guid})">
            <summary>
            Gets the current user profile.
            </summary>
            <param name="userKey">The user key.</param>
            <returns>UserLogin.</returns>
        </member>
        <member name="T:Beyova.CommonServiceInterface.IProvisioningService`3">
            <summary>
            Interface IProvisioningService
            </summary>
            <typeparam name="TProvisioning">The type of the t provisioning.</typeparam>
            <typeparam name="TProvisioningCriteria">The type of the t provisioning criteria.</typeparam>
            <typeparam name="TApplication">The type of the t application.</typeparam>
        </member>
        <member name="M:Beyova.CommonServiceInterface.IProvisioningService`3.SaveUserProvisioningObject(`0)">
            <summary>
            Saves the user provisioning object.
            </summary>
            <param name="provisioningObject">The provisioning item object.</param>
        </member>
        <member name="M:Beyova.CommonServiceInterface.IProvisioningService`3.SaveGlobalProvisioningObject(`0)">
            <summary>
            Saves the global provisioning object.
            </summary>
            <param name="provisioningObject">The provisioning object.</param>
        </member>
        <member name="M:Beyova.CommonServiceInterface.IProvisioningService`3.QueryUserProvisioningObject(`1)">
            <summary>
            Queries the user provisioning object.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns>List&lt;TProvisioning&gt;.</returns>
        </member>
        <member name="M:Beyova.CommonServiceInterface.IProvisioningService`3.QueryGlobalProvisioningObject(`1)">
            <summary>
            Queries the global provisioning object.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns>List&lt;TProvisioning&gt;.</returns>
        </member>
        <member name="T:Beyova.ICredential">
            <summary>
            Interface ICredential
            </summary>
        </member>
        <member name="P:Beyova.ICredential.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Beyova.IUserCriteria`1">
            <summary>
            Interface IUserCriteria
            </summary>
        </member>
        <member name="P:Beyova.IUserCriteria`1.FunctionalRole">
            <summary>
            Gets or sets the functional role.
            </summary>
            <value>The functional role.</value>
        </member>
        <member name="P:Beyova.IUserCriteria`1.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>
            The email.
            </value>
        </member>
        <member name="P:Beyova.IUserCriteria`1.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Beyova.IUserCriteria`1.StartIndex">
            <summary>
            Gets or sets the start index.
            </summary>
            <value>The start index.</value>
        </member>
        <member name="T:Beyova.IWorkflowBasedObject">
            <summary>
            Interface IWorkflowBasedObject
            </summary>
        </member>
        <member name="P:Beyova.IWorkflowBasedObject.WorkflowState">
            <summary>
            Gets or sets the state of the workflow.
            </summary>
            <value>The state of the workflow.</value>
        </member>
        <member name="T:Beyova.ISimpleBaseObject">
            <summary>
            Interface ISimpleBaseObject
            </summary>
        </member>
        <member name="P:Beyova.ISimpleBaseObject.CreatedStamp">
            <summary>
            Gets or sets the created stamp.
            </summary>
            <value>The created stamp.</value>
        </member>
        <member name="P:Beyova.ISimpleBaseObject.LastUpdatedStamp">
            <summary>
            Gets or sets the last updated stamp.
            </summary>
            <value>The last updated stamp.</value>
        </member>
        <member name="P:Beyova.ISimpleBaseObject.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="T:Beyova.IUserInfo`1">
            <summary>
            Interface IUserInfo
            </summary>
        </member>
        <member name="P:Beyova.IUserInfo`1.FunctionalRole">
            <summary>
            Gets or sets the functional role.
            </summary>
            <value>The functional role.</value>
        </member>
        <member name="P:Beyova.IUserInfo`1.Gender">
            <summary>
            Gets or sets the gender.
            </summary>
            <value>The gender.</value>
        </member>
        <member name="P:Beyova.IUserInfo`1.Language">
            <summary>
            Gets or sets the language.
            </summary>
            <value>The language.</value>
        </member>
        <member name="P:Beyova.IUserInfo`1.TimeZone">
            <summary>
            Gets or sets the time zone. Unit: minute
            </summary>
            <value>The time zone.</value>
        </member>
        <member name="T:Beyova.IUserInfo">
            <summary>
            Interface IUserInfo
            </summary>
        </member>
        <member name="P:Beyova.IUserInfo.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>The email.</value>
        </member>
        <member name="P:Beyova.IUserInfo.AvatarKey">
            <summary>
            Gets or sets the avatar key.
            </summary>
            <value>The avatar key.</value>
        </member>
        <member name="P:Beyova.IUserInfo.AvatarUrl">
            <summary>
            Gets or sets the avatar URL.
            </summary>
            <value>The avatar URL.</value>
        </member>
        <member name="T:Beyova.IProvisioningCriteria`1">
            <summary>
            Interface IProvisioningCriteria
            </summary>
            <typeparam name="TApplication">The type of the t application.</typeparam>
        </member>
        <member name="P:Beyova.IProvisioningCriteria`1.Application">
            <summary>
            Gets or sets the application.
            </summary>
            <value>The application.</value>
        </member>
        <member name="P:Beyova.IProvisioningCriteria`1.OwnerKey">
            <summary>
            Gets or sets the owner key.
            </summary>
            <value>The owner key.</value>
        </member>
        <member name="P:Beyova.IProvisioningCriteria`1.Module">
            <summary>
            Gets or sets the module. Optional.
            </summary>
            <value>The module.</value>
        </member>
        <member name="P:Beyova.IProvisioningCriteria`1.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Beyova.IProvisioningObject`1">
            <summary>
            Interface IProvisioningObject
            </summary>
            <typeparam name="TApplication">The type of the application.</typeparam>
        </member>
        <member name="P:Beyova.IProvisioningObject`1.Application">
            <summary>
            Gets or sets the application.
            </summary>
            <value>The application.</value>
        </member>
        <member name="P:Beyova.IProvisioningObject`1.OwnerKey">
            <summary>
            Gets or sets the owner key.
            </summary>
            <value>The owner key.</value>
        </member>
        <member name="P:Beyova.IProvisioningObject`1.Module">
            <summary>
            Gets or sets the module.
            </summary>
            <value>The module.</value>
        </member>
        <member name="P:Beyova.IProvisioningObject`1.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Beyova.IProvisioningObject`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Beyova.AccessCredential">
            <summary>
            Class AccessCredential.
            </summary>
        </member>
        <member name="P:Beyova.AccessCredential.AccessIdentifier">
            <summary>
            Gets or sets the access identifier.
            </summary>
            <value>The access identifier.</value>
        </member>
        <member name="P:Beyova.AccessCredential.Domain">
            <summary>
            Gets or sets the domain.
            </summary>
            <value>The domain.</value>
        </member>
        <member name="P:Beyova.AccessCredential.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="M:Beyova.AccessCredential.Parse(System.String)">
            <summary>
            Parses the specified credential string.
            </summary>
            <param name="credentialString">The credential string.</param>
            <returns>AccessCredential.</returns>
        </member>
        <member name="M:Beyova.AccessCredential.op_Explicit(Beyova.AccessCredential)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Beyova.AccessCredential"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="credential">The credential.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Beyova.AccessCredential.op_Explicit(System.String)~Beyova.AccessCredential">
            <summary>
            Performs an explicit conversion from <see cref="T:System.String"/> to <see cref="T:Beyova.AccessCredential"/>.
            </summary>
            <param name="credential">The credential.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Beyova.AccessCredentialCriteria">
            <summary>
            Class AccessCredentialCriteria.
            </summary>
        </member>
        <member name="P:Beyova.AccessCredentialCriteria.Count">
            <summary>
            Gets or sets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Beyova.AccessCredentialCriteria.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Beyova.AccessCredentialCriteria.UserKey">
            <summary>
            Gets or sets the user key.
            </summary>
            <value>The user key.</value>
        </member>
        <member name="T:Beyova.AccessCredentialInfo">
            <summary>
            Class AccessCredentialInfo.
            </summary>
        </member>
        <member name="P:Beyova.AccessCredentialInfo.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Beyova.AccessCredentialInfo.CreatedStamp">
            <summary>
            Gets or sets the created stamp.
            </summary>
            <value>
            The created stamp.
            </value>
        </member>
        <member name="P:Beyova.AccessCredentialInfo.LastUpdatedStamp">
            <summary>
            Gets or sets the last updated stamp.
            </summary>
            <value>
            The last updated stamp.
            </value>
        </member>
        <member name="P:Beyova.AccessCredentialInfo.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:Beyova.AccessCredentialInfo.UserKey">
            <summary>
            Gets or sets the user key.
            </summary>
            <value>The user key.</value>
        </member>
        <member name="P:Beyova.AccessCredentialInfo.TokenExpiredStamp">
            <summary>
            Gets or sets the token expired stamp.
            </summary>
            <value>The token expired stamp.</value>
        </member>
        <member name="T:Beyova.AdminPermissionBase">
            <summary>
            Class AdminPermissionBase.
            </summary>
        </member>
        <member name="P:Beyova.AdminPermissionBase.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Beyova.AdminPermissionBase.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Beyova.AdminPermissionBase.Identifier">
            <summary>
            Gets or sets the identifier.
            <remarks>Identifier can be full name of method, or some other customization identifier.</remarks>
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Beyova.AdminPermissionBase.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:Beyova.AdminRoleBinding">
            <summary>
            Class AdminRoleBinding.
            </summary>
        </member>
        <member name="P:Beyova.AdminRoleBinding.OwnerKey">
            <summary>
            Gets or sets the owner key.
            </summary>
            <value>The owner key.</value>
        </member>
        <member name="P:Beyova.AdminRoleBinding.RoleKey">
            <summary>
            Gets or sets the role key.
            </summary>
            <value>The role key.</value>
        </member>
        <member name="T:Beyova.AdminPermissionBinding">
            <summary>
            Class AdminPermissionBinding.
            </summary>
        </member>
        <member name="P:Beyova.AdminPermissionBinding.OwnerKey">
            <summary>
            Gets or sets the owner key.
            </summary>
            <value>The owner key.</value>
        </member>
        <member name="P:Beyova.AdminPermissionBinding.PermissionKey">
            <summary>
            Gets or sets the permission key.
            </summary>
            <value>The permission key.</value>
        </member>
        <member name="T:Beyova.AdminPermission">
            <summary>
            Class AdminPermission.
            </summary>
        </member>
        <member name="P:Beyova.AdminPermission.CreatedStamp">
            <summary>
            Gets or sets the created stamp.
            </summary>
            <value>The created stamp.</value>
        </member>
        <member name="P:Beyova.AdminPermission.LastUpdatedStamp">
            <summary>
            Gets or sets the last updated stamp.
            </summary>
            <value>The last updated stamp.</value>
        </member>
        <member name="P:Beyova.AdminPermission.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:Beyova.AdminPermission.CreatedBy">
            <summary>
            Gets or sets the created by.
            </summary>
            <value>The created by.</value>
        </member>
        <member name="P:Beyova.AdminPermission.LastUpdatedBy">
            <summary>
            Gets or sets the last updated by.
            </summary>
            <value>The last updated by.</value>
        </member>
        <member name="T:Beyova.AdminPermissionCriteria">
            <summary>
            Class AdminPermissionCriteria.
            </summary>
        </member>
        <member name="P:Beyova.AdminPermissionCriteria.RoleKey">
            <summary>
            Gets or sets the role key.
            </summary>
            <value>The role key.</value>
        </member>
        <member name="P:Beyova.AdminPermissionCriteria.UserKey">
            <summary>
            Gets or sets the user key.
            </summary>
            <value>The user key.</value>
        </member>
        <member name="T:Beyova.AdminRole">
            <summary>
            Class AdminRole.
            </summary>
        </member>
        <member name="P:Beyova.AdminRole.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Beyova.AdminRole.ParentKey">
            <summary>
            Gets or sets the parent key.
            </summary>
            <value>The parent key.</value>
        </member>
        <member name="P:Beyova.AdminRole.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:Beyova.AdminRoleCriteria">
            <summary>
            Class AdminRoleCriteria.
            </summary>
        </member>
        <member name="P:Beyova.AdminRoleCriteria.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Beyova.AdminRoleCriteria.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Beyova.AdminRoleCriteria.ParentKey">
            <summary>
            Gets or sets the parent key.
            </summary>
            <value>The parent key.</value>
        </member>
        <member name="P:Beyova.AdminRoleCriteria.UserKey">
            <summary>
            Gets or sets the user key.
            </summary>
            <value>The user key.</value>
        </member>
        <member name="P:Beyova.AdminRoleCriteria.PermissionKey">
            <summary>
            Gets or sets the permission key.
            </summary>
            <value>The permission key.</value>
        </member>
        <member name="T:Beyova.AdminSession">
            <summary>
            Class AdminSession.
            </summary>
        </member>
        <member name="P:Beyova.AdminSession.CreatedStamp">
            <summary>
            Gets or sets the created stamp.
            </summary>
            <value>The created stamp.</value>
        </member>
        <member name="P:Beyova.AdminSession.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Beyova.AdminSession.LastUpdatedStamp">
            <summary>
            Gets or sets the last updated stamp.
            </summary>
            <value>The last updated stamp.</value>
        </member>
        <member name="P:Beyova.AdminSession.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:Beyova.AdminSession.ExpiredStamp">
            <summary>
            Gets or sets the expired stamp.
            </summary>
            <value>The expired stamp.</value>
        </member>
        <member name="P:Beyova.AdminSession.UserAgent">
            <summary>
            Gets or sets the user agent.
            </summary>
            <value>The user agent.</value>
        </member>
        <member name="T:Beyova.AdminSessionBase">
            <summary>
            Class AdminSessionBase.
            </summary>
        </member>
        <member name="P:Beyova.AdminSessionBase.OwnerKey">
            <summary>
            Gets or sets the owner key.
            </summary>
            <value>The owner key.</value>
        </member>
        <member name="P:Beyova.AdminSessionBase.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="P:Beyova.AdminSessionBase.IpAddress">
            <summary>
            Gets or sets the ip address.
            </summary>
            <value>The ip address.</value>
        </member>
        <member name="T:Beyova.AdminSessionCriteria">
            <summary>
            Class AdminSessionCriteria.
            </summary>
        </member>
        <member name="P:Beyova.AdminSessionCriteria.ActiveOnly">
            <summary>
            Gets or sets a value indicating whether [active only].
            </summary>
            <value><c>true</c> if [active only]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Beyova.AdminUserCriteria">
            <summary>
            Class AdminUserCriteria.
            </summary>
        </member>
        <member name="P:Beyova.AdminUserCriteria.Count">
            <summary>
            Gets or sets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Beyova.AdminUserCriteria.RoleKey">
            <summary>
            Gets or sets the role key.
            </summary>
            <value>The role key.</value>
        </member>
        <member name="T:Beyova.AdminUserInfo">
            <summary>
            Class AdminUserInfo.
            </summary>
        </member>
        <member name="P:Beyova.AdminUserInfo.CreatedBy">
            <summary>
            Gets or sets the created by.
            </summary>
            <value>The created by.</value>
        </member>
        <member name="P:Beyova.AdminUserInfo.CreatedStamp">
            <summary>
            Gets or sets the created stamp.
            </summary>
            <value>The created stamp.</value>
        </member>
        <member name="P:Beyova.AdminUserInfo.LastUpdatedBy">
            <summary>
            Gets or sets the last updated by.
            </summary>
            <value>The last updated by.</value>
        </member>
        <member name="P:Beyova.AdminUserInfo.LastUpdatedStamp">
            <summary>
            Gets or sets the last updated stamp.
            </summary>
            <value>The last updated stamp.</value>
        </member>
        <member name="P:Beyova.AdminUserInfo.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="T:Beyova.AppPlatformBase">
            <summary>
            Class AppPlatformBase.
            </summary>
        </member>
        <member name="P:Beyova.AppPlatformBase.PlatformType">
            <summary>
            Gets or sets the type of the platform.
            </summary>
            <value>
            The type of the platform.
            </value>
        </member>
        <member name="P:Beyova.AppPlatformBase.AppStoreUrl">
            <summary>
            Gets or sets the application URL.
            </summary>
            <value>The application URL.</value>
        </member>
        <member name="P:Beyova.AppPlatformBase.BundleId">
            <summary>
            Gets or sets the bundle identifier.
            </summary>
            <value>
            The bundle identifier.
            </value>
        </member>
        <member name="T:Beyova.AppVersionBase">
            <summary>
            Class AppVersionBase.
            </summary>
        </member>
        <member name="P:Beyova.AppVersionBase.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Beyova.AppVersionBase.PlatformKey">
            <summary>
            Gets or sets the platform key.
            </summary>
            <value>
            The platform key.
            </value>
        </member>
        <member name="P:Beyova.AppVersionBase.LatestBuild">
            <summary>
            Gets or sets the latest build.
            </summary>
            <value>
            The latest build.
            </value>
        </member>
        <member name="P:Beyova.AppVersionBase.LatestVersion">
            <summary>
            Gets or sets the latest version.
            </summary>
            <value>
            The latest version.
            </value>
        </member>
        <member name="P:Beyova.AppVersionBase.MinRequiredBuild">
            <summary>
            Gets or sets the minimum required build.
            </summary>
            <value>
            The minimum required build.
            </value>
        </member>
        <member name="P:Beyova.AppVersionBase.Note">
            <summary>
            Gets or sets the note.
            </summary>
            <value>
            The note.
            </value>
        </member>
        <member name="T:Beyova.SessionCriteria">
            <summary>
            Class SessionCriteria.
            </summary>
        </member>
        <member name="P:Beyova.SessionCriteria.UserKey">
            <summary>
            Gets or sets the user key.
            </summary>
            <value>The user key.</value>
        </member>
        <member name="P:Beyova.SessionCriteria.IpAddress">
            <summary>
            Gets or sets the ip address.
            </summary>
            <value>The ip address.</value>
        </member>
        <member name="P:Beyova.SessionCriteria.UserAgent">
            <summary>
            Gets or sets the user agent.
            </summary>
            <value>The user agent.</value>
        </member>
        <member name="P:Beyova.SessionCriteria.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="P:Beyova.SessionCriteria.IsExpired">
            <summary>
            Gets or sets a value indicating whether this instance is expired.
            </summary>
            <value><c>null</c> if [is expired] contains no value, <c>true</c> if [is expired]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Beyova.SessionCriteria.Platform">
            <summary>
            Gets or sets the platform.
            </summary>
            <value>The platform.</value>
        </member>
        <member name="P:Beyova.SessionCriteria.DeviceType">
            <summary>
            Gets or sets the type of the device.
            </summary>
            <value>The type of the device.</value>
        </member>
        <member name="T:Beyova.EnvironmentEndpointCriteria">
            <summary>
            Class EnvironmentEndpointCriteria.
            </summary>
        </member>
        <member name="P:Beyova.EnvironmentEndpointCriteria.Count">
            <summary>
            Gets or sets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Beyova.EnvironmentEndpointBase">
            <summary>
            Class EnvironmentEndpointBase.
            </summary>
        </member>
        <member name="P:Beyova.EnvironmentEndpointBase.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Beyova.EnvironmentEndpointBase.Environment">
            <summary>
            Gets or sets the environment.
            </summary>
            <value>The environment.</value>
        </member>
        <member name="P:Beyova.EnvironmentEndpointBase.Code">
            <summary>
            Gets or sets the code.
            </summary>
            <value>The code.</value>
        </member>
        <member name="P:Beyova.EnvironmentEndpointBase.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="T:Beyova.EnvironmentEndpoint">
            <summary>
            Class EnvironmentEndpoint.
            </summary>
        </member>
        <member name="P:Beyova.EnvironmentEndpoint.CreatedBy">
            <summary>
            Gets or sets the created by.
            </summary>
            <value>The created by.</value>
        </member>
        <member name="P:Beyova.EnvironmentEndpoint.CreatedStamp">
            <summary>
            Gets or sets the created stamp.
            </summary>
            <value>The created stamp.</value>
        </member>
        <member name="P:Beyova.EnvironmentEndpoint.LastUpdatedBy">
            <summary>
            Gets or sets the last updated by.
            </summary>
            <value>The last updated by.</value>
        </member>
        <member name="P:Beyova.EnvironmentEndpoint.LastUpdatedStamp">
            <summary>
            Gets or sets the last updated stamp.
            </summary>
            <value>The last updated stamp.</value>
        </member>
        <member name="P:Beyova.EnvironmentEndpoint.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="T:Beyova.ServiceCredential">
            <summary>
            Class ServiceCredential.
            </summary>
        </member>
        <member name="P:Beyova.ServiceCredential.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="P:Beyova.ServiceCredential.Permissions">
            <summary>
            Gets or sets the permissions.
            </summary>
            <value>The permissions.</value>
        </member>
        <member name="M:Beyova.ServiceCredential.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.ServiceCredential"/> class.
            </summary>
        </member>
        <member name="T:Beyova.SessionInfo">
            <summary>
            Class SessionInfo.
            </summary>
        </member>
        <member name="P:Beyova.SessionInfo.UserKey">
            <summary>
            Gets or sets the user key.
            </summary>
            <value>The user key.</value>
        </member>
        <member name="P:Beyova.SessionInfo.IpAddress">
            <summary>
            Gets or sets the ip address.
            </summary>
            <value>The ip address.</value>
        </member>
        <member name="P:Beyova.SessionInfo.UserAgent">
            <summary>
            Gets or sets the user agent.
            </summary>
            <value>The user agent.</value>
        </member>
        <member name="P:Beyova.SessionInfo.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="P:Beyova.SessionInfo.ExpiredStamp">
            <summary>
            Gets or sets the expired stamp.
            </summary>
            <value>The expired stamp.</value>
        </member>
        <member name="P:Beyova.SessionInfo.CreatedStamp">
            <summary>
            Gets or sets the created stamp.
            </summary>
            <value>The created stamp.</value>
        </member>
        <member name="P:Beyova.SessionInfo.Platform">
            <summary>
            Gets or sets the platform.
            </summary>
            <value>The platform.</value>
        </member>
        <member name="P:Beyova.SessionInfo.DeviceType">
            <summary>
            Gets or sets the type of the device.
            </summary>
            <value>The type of the device.</value>
        </member>
        <member name="T:Beyova.SimpleBaseObject">
            <summary>
            Class SimpleBaseObject
            </summary>
        </member>
        <member name="P:Beyova.SimpleBaseObject.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Beyova.SimpleBaseObject.CreatedStamp">
            <summary>
            Gets or sets the created stamp.
            </summary>
            <value>
            The created stamp.
            </value>
        </member>
        <member name="P:Beyova.SimpleBaseObject.LastUpdatedStamp">
            <summary>
            Gets or sets the last updated stamp.
            </summary>
            <value>
            The last updated stamp.
            </value>
        </member>
        <member name="P:Beyova.SimpleBaseObject.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="T:Beyova.BinaryCapacityCriteria">
            <summary>
            Class BinaryCapacityCriteria.
            </summary>
        </member>
        <member name="P:Beyova.BinaryCapacityCriteria.Container">
            <summary>
            Gets or sets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="P:Beyova.BinaryCapacityCriteria.OwnerKey">
            <summary>
            Gets or sets the total count.
            </summary>
            <value>
            The total count.
            </value>
        </member>
        <member name="T:Beyova.BinaryStorageActionCredential">
            <summary>
            Class BinaryStorageActionCredential.
            </summary>
        </member>
        <member name="P:Beyova.BinaryStorageActionCredential.StorageUri">
            <summary>
            Gets or sets the storage URI.
            </summary>
            <value>The storage URI.</value>        
        </member>
        <member name="P:Beyova.BinaryStorageActionCredential.CredentialUri">
            <summary>
            Gets or sets the credential URI.
            <remarks>Credential uri, which is used to upload, download or any other action on target.</remarks>
            </summary>
            <value>The credential URI.</value>
        </member>
        <member name="P:Beyova.BinaryStorageActionCredential.CredentialExpiredStamp">
            <summary>
            Gets or sets the credential expired stamp.
            </summary>
            <value>The credential expired stamp.</value>        
        </member>
        <member name="T:Beyova.BinaryCapacitySummary">
            <summary>
            Class BinaryCapacitySummary.
            </summary>
        </member>
        <member name="P:Beyova.BinaryCapacitySummary.Container">
            <summary>
            Gets or sets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="P:Beyova.BinaryCapacitySummary.TotalCount">
            <summary>
            Gets or sets the total count.
            </summary>
            <value>
            The total count.
            </value>
        </member>
        <member name="P:Beyova.BinaryCapacitySummary.TotalSize">
            <summary>
            Gets or sets the total size.
            </summary>
            <value>
            The total size.
            </value>
        </member>
        <member name="T:Beyova.BinaryStorageIdentifier">
            <summary>
            Class BinaryStorageIdentifier.
            </summary>
        </member>
        <member name="P:Beyova.BinaryStorageIdentifier.Container">
            <summary>
            Gets or sets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="P:Beyova.BinaryStorageIdentifier.Identifier">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="M:Beyova.BinaryStorageIdentifier.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Beyova.BinaryStorageIdentifier.ToCloudResourceUri(System.String)">
            <summary>
            To the cloud resource URI.
            </summary>
            <param name="type">The type.</param>
            <returns>CloudResourceUri.</returns>
        </member>
        <member name="T:Beyova.BinaryStorageMetaBase">
            <summary>
            Class BinaryStorageMetaData.
            </summary>
        </member>
        <member name="P:Beyova.BinaryStorageMetaBase.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>        
        </member>
        <member name="P:Beyova.BinaryStorageMetaBase.Mime">
            <summary>
            Gets or sets the MIME.
            <remarks>
            http://www.w3.org/wiki/Evolution/MIME
            </remarks>
            </summary>
            <value>The MIME.</value>        
        </member>
        <member name="P:Beyova.BinaryStorageMetaBase.Length">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Beyova.BinaryStorageMetaBase.Width">
            <summary>
            Gets or sets the width.
            <remarks>It is used when storage is image or video.</remarks>
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Beyova.BinaryStorageMetaBase.Height">
            <summary>
            Gets or sets the height.
            <remarks>It is used when storage is image or video.</remarks>
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Beyova.BinaryStorageMetaBase.Duration">
            <summary>
            Gets or sets the duration.
            <remarks>It is used when storage is audio or video. Unit: second.</remarks>
            </summary>
            <value>The duration.</value>
        </member>
        <member name="M:Beyova.BinaryStorageMetaBase.#ctor(Beyova.BinaryStorageMetaBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.BinaryStorageMetaBase"/> class.
            </summary>
            <param name="metaBase">The meta base.</param>
        </member>
        <member name="T:Beyova.CloudResourceUri">
            <summary>
            Class CloudResourceUri.
            </summary>
        </member>
        <member name="F:Beyova.CloudResourceUri.Protocol">
            <summary>
            The protocol
            </summary>
        </member>
        <member name="F:Beyova.CloudResourceUri.UriRegex">
            <summary>
            The URI regex
            </summary>
        </member>
        <member name="P:Beyova.CloudResourceUri.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Beyova.CloudResourceUri.Container">
            <summary>
            Gets or sets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="P:Beyova.CloudResourceUri.Identifier">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="M:Beyova.CloudResourceUri.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Beyova.CloudResourceUri.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.CloudResourceUri.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Beyova.CloudResourceUri.Parse(System.String)">
            <summary>
            Parses the specified cloud protocol URI.
            </summary>
            <param name="cloudProtocolUri">The cloud protocol URI.</param>
            <returns>CloudResourceUri.</returns>
            <exception cref="T:Beyova.ExceptionSystem.InvalidObjectException">cloudProtocolUri;null</exception>
        </member>
        <member name="M:Beyova.CloudResourceUri.TryParse(System.String,Beyova.CloudResourceUri@)">
            <summary>
            Tries the parse.
            </summary>
            <param name="cloudProtocolUri">The cloud protocol URI.</param>
            <param name="cloudResourceUri">The cloud resource URI.</param>
            <returns><c>true</c> if succeed to parse, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Beyova.CloudResourceUri.IsCloudResource(System.String)">
            <summary>
            Determines whether [is cloud resource] [the specified URI].
            </summary>
            <param name="uri">The URI.</param>
            <returns><c>true</c> if [is cloud resource] [the specified URI]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Beyova.BaseWaterFallCriteria">
            <summary>
            Class BasePageIndexedCriteria.
            </summary>
        </member>
        <member name="P:Beyova.BaseWaterFallCriteria.DataCursor">
            <summary>
            Gets or sets the data cursor.
            </summary>
            <value>The data cursor.</value>
        </member>
        <member name="P:Beyova.BaseWaterFallCriteria.FromStamp">
            <summary>
            Gets or sets from stamp.
            </summary>
            <value>From stamp.</value>
        </member>
        <member name="P:Beyova.BaseWaterFallCriteria.ToStamp">
            <summary>
            Gets or sets to stamp.
            </summary>
            <value>To stamp.</value>
        </member>
        <member name="P:Beyova.BaseWaterFallCriteria.TimeForwarding">
            <summary>
            Gets or sets a value indicating whether [time forwarding].
            </summary>
            <value><c>true</c> if [time forwarding]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Beyova.BasePageIndexedCriteria">
            <summary>
            Class BasePageIndexedCriteria.
            </summary>
        </member>
        <member name="P:Beyova.BasePageIndexedCriteria.StartIndex">
            <summary>
            Gets or sets the start index.
            It could be with <c>Count</c> to do paging.
            </summary>
            <value>The start index.</value>
        </member>
        <member name="M:Beyova.BasePageIndexedCriteria.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.BasePageIndexedCriteria" /> class.
            </summary>
        </member>
        <member name="T:Beyova.BinaryStorageState">
            <summary>
            Enum BinaryStorageState
            </summary>
        </member>
        <member name="F:Beyova.BinaryStorageState.Undefined">
            <summary>
            Value indicating that it is undefined
            </summary>
        </member>
        <member name="F:Beyova.BinaryStorageState.CommitPending">
            <summary>
            Value indicating that it is pending to commit
            </summary>
        </member>
        <member name="F:Beyova.BinaryStorageState.Committed">
            <summary>
            Value indicating that it is committed
            </summary>
        </member>
        <member name="F:Beyova.BinaryStorageState.DeletePending">
            <summary>
            Value indicating that it is pending to delete
            </summary>
        </member>
        <member name="F:Beyova.BinaryStorageState.Deleted">
            <summary>
            Value indicating that it is deleted
            </summary>
        </member>
        <member name="F:Beyova.BinaryStorageState.Disabled">
            <summary>
            Value indicating that it is disabled
            </summary>
        </member>
        <member name="F:Beyova.BinaryStorageState.Invalid">
            <summary>
            Value indicating that it is invalid
            <remarks>It is used when binary summary is created, but no binary uploaded when doing commit.</remarks>
            </summary>
        </member>
        <member name="F:Beyova.BinaryStorageState.Duplicated">
            <summary>
            Value indicating that it is duplicated
            <remarks>It is used when a binary is uploaded and commit, whose hash and length are exactly same as which is already in system.</remarks>
            </summary>
        </member>
        <member name="T:Beyova.BinaryStorageMetaData">
            <summary>
            Class BinaryStorageMetaData.
            </summary>
        </member>
        <member name="P:Beyova.BinaryStorageMetaData.Hash">
            <summary>
            Gets or sets the hash.
            </summary>
            <value>The hash.</value>
        </member>
        <member name="P:Beyova.BinaryStorageMetaData.CreatedStamp">
            <summary>
            Gets or sets the created stamp.
            </summary>
            <value>The created stamp.</value>        
        </member>
        <member name="P:Beyova.BinaryStorageMetaData.LastUpdatedStamp">
            <summary>
            Gets or sets the last updated stamp.
            </summary>
            <value>The last updated stamp.</value>        
        </member>
        <member name="P:Beyova.BinaryStorageMetaData.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:Beyova.BinaryStorageMetaData.CreatedBy">
            <summary>
            Gets or sets the created by.
            </summary>
            <value>The created by.</value>
        </member>
        <member name="P:Beyova.BinaryStorageMetaData.OwnerKey">
            <summary>
            Gets or sets the owner key.
            </summary>
            <value>The owner key.</value>
        </member>
        <member name="T:Beyova.BinaryStorageObject">
            <summary>
            Class BinaryStorageObject.
            </summary>
        </member>
        <member name="P:Beyova.BinaryStorageObject.Data">
            <summary>
            Gets or sets the data.
            This field shares value with field DataInByte.
            The difference is, this field saves data as base64 string.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Beyova.BinaryStorageObject.DataInBytes">
            <summary>
            Gets or sets the data in bytes.
            This property is mapped to property 
            <c>Data</c> and this property would not be passed in WCF communication.
            </summary>
            <value>The data in bytes.</value>
        </member>
        <member name="M:Beyova.BinaryStorageObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.BinaryStorageObject"/> class.
            </summary>
        </member>
        <member name="M:Beyova.BinaryStorageObject.#ctor(Beyova.BinaryStorageMetaData)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.BinaryStorageObject"/> class.
            </summary>
            <param name="metaData">The meta data.</param>
        </member>
        <member name="M:Beyova.BinaryStorageObject.SetMetaData(Beyova.BinaryStorageMetaData)">
            <summary>
            Sets the meta data.
            </summary>
            <param name="metaData">The meta data.</param>
        </member>
        <member name="T:Beyova.BinaryStorageMetaDataCriteria">
            <summary>
            Class BinaryStorageMetaDataCriteria.
            </summary>
        </member>
        <member name="P:Beyova.BinaryStorageMetaDataCriteria.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Beyova.BinaryStorageMetaDataCriteria.Hash">
            <summary>
            Gets or sets the hash.
            </summary>
            <value>The hash.</value>
        </member>
        <member name="P:Beyova.BinaryStorageMetaDataCriteria.Mime">
            <summary>
            Gets or sets the MIME.
            <remarks>
            http://www.w3.org/wiki/Evolution/MIME
            </remarks>
            </summary>
            <value>The MIME.</value>
        </member>
        <member name="P:Beyova.BinaryStorageMetaDataCriteria.MinLength">
            <summary>
            Gets or sets the minimum length.
            </summary>
            <value>The minimum length.</value>
        </member>
        <member name="P:Beyova.BinaryStorageMetaDataCriteria.MaxLength">
            <summary>
            Gets or sets the maximum length.
            </summary>
            <value>The maximum length.</value>
        </member>
        <member name="P:Beyova.BinaryStorageMetaDataCriteria.MinWidth">
            <summary>
            Gets or sets the minimum width.
            </summary>
            <value>The minimum width.</value>
        </member>
        <member name="P:Beyova.BinaryStorageMetaDataCriteria.MaxWidth">
            <summary>
            Gets or sets the maximum width.
            </summary>
            <value>The maximum width.</value>
        </member>
        <member name="P:Beyova.BinaryStorageMetaDataCriteria.MinHeight">
            <summary>
            Gets or sets the minimum height.
            </summary>
            <value>The minimum height.</value>
        </member>
        <member name="P:Beyova.BinaryStorageMetaDataCriteria.MaxHeight">
            <summary>
            Gets or sets the maximum height.
            </summary>
            <value>The maximum height.</value>
        </member>
        <member name="P:Beyova.BinaryStorageMetaDataCriteria.MinDuration">
            <summary>
            Gets or sets the minimum duration.
            </summary>
            <value>The minimum duration.</value>
        </member>
        <member name="P:Beyova.BinaryStorageMetaDataCriteria.MaxDuration">
            <summary>
            Gets or sets the maximum duration.
            </summary>
            <value>The maximum duration.</value>
        </member>
        <member name="P:Beyova.BinaryStorageMetaDataCriteria.OwnerKey">
            <summary>
            Gets or sets the owner key.
            </summary>
            <value>The owner key.</value>
        </member>
        <member name="P:Beyova.BinaryStorageMetaDataCriteria.ToStamp">
            <summary>
            Gets or sets to stamp.
            </summary>
            <value>To stamp.</value>
        </member>
        <member name="P:Beyova.BinaryStorageMetaDataCriteria.FromStamp">
            <summary>
            Gets or sets from stamp.
            </summary>
            <value>From stamp.</value>
        </member>
        <member name="P:Beyova.BinaryStorageMetaDataCriteria.Count">
            <summary>
            Gets or sets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Beyova.CountryInfo">
            <summary>
            Class CountryInfo.
            </summary>
        </member>
        <member name="P:Beyova.CountryInfo.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Beyova.CountryInfo.CurrencyCode">
            <summary>
            Gets or sets the currency code.
            </summary>
            <value>The currency code.</value>
        </member>
        <member name="P:Beyova.CountryInfo.Iso2Code">
            <summary>
            Gets or sets the ISO2 code.
            </summary>
            <value>The ISO2 code.</value>
        </member>
        <member name="P:Beyova.CountryInfo.Iso3Code">
            <summary>
            Gets or sets the ISO3 code.
            </summary>
            <value>The ISO3 code.</value>
        </member>
        <member name="P:Beyova.CountryInfo.TimeZone">
            <summary>
            Gets or sets the time zone.
            </summary>
            <value>The time zone.</value>
        </member>
        <member name="P:Beyova.CountryInfo.TelCode">
            <summary>
            Gets or sets the tel code.
            </summary>
            <value>
            The tel code.
            </value>
        </member>
        <member name="P:Beyova.CountryInfo.CultureCode">
            <summary>
            Gets or sets the culture code.
            </summary>
            <value>The culture code.</value>
        </member>
        <member name="P:Beyova.CountryInfo.Sequence">
            <summary>
            Gets or sets the sequence.
            </summary>
            <value>The sequence.</value>
        </member>
        <member name="M:Beyova.CountryInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.CountryInfo"/> class.
            </summary>
        </member>
        <member name="T:Beyova.CountryInfoCriteria">
            <summary>
            Class CountryInfoCriteria.
            </summary>
        </member>
        <member name="P:Beyova.CountryInfoCriteria.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Beyova.CountryInfoCriteria.Code">
            <summary>
            Gets or sets the code.
            </summary>
            <value>The code.</value>
        </member>
        <member name="P:Beyova.CountryInfoCriteria.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Beyova.CountryInfoCriteria.CultureCode">
            <summary>
            Gets or sets the culture code.
            </summary>
            <value>The culture code.
            e.g.: zh-CN, en-US, pt-PT, etc.</value>
        </member>
        <member name="T:Beyova.DeviceType">
            <summary>
            Enum DeviceType
            </summary>
        </member>
        <member name="F:Beyova.DeviceType.None">
            <summary>
            Value indicating it is none (0x00)
            </summary>
        </member>
        <member name="F:Beyova.DeviceType.Phone">
            <summary>
            Value indicating it is phone
            </summary>
        </member>
        <member name="F:Beyova.DeviceType.Tablet">
            <summary>
            Value indicating it is tablet
            </summary>
        </member>
        <member name="F:Beyova.DeviceType.Pc">
            <summary>
            Value indicating it is pc (0x10)
            </summary>
        </member>
        <member name="F:Beyova.DeviceType.Mobile">
            <summary>
            Value indicating it is mobile (0x20)
            </summary>
        </member>
        <member name="F:Beyova.DeviceType.MobilePhone">
            <summary>
            Value indicating it is mobile phone (0x21 = 0x20 + 0x1)
            </summary>
        </member>
        <member name="F:Beyova.DeviceType.MobilePad">
            <summary>
            Value indicating it is mobile pad (0x22 = 0x20 + 0x2)
            </summary>
        </member>
        <member name="F:Beyova.DeviceType.WearableDevice">
            <summary>
            Value indicating it is wearable device (0x40)
            </summary>
        </member>
        <member name="T:Beyova.PlatformType">
            <summary>
            Enum PlatformType
            </summary>
        </member>
        <member name="F:Beyova.PlatformType.None">
            <summary>
            Value indicating it is none (0x00)
            </summary>
        </member>
        <member name="F:Beyova.PlatformType.iOS">
            <summary>
            Value indicating it is iOS (0x1)
            </summary>
        </member>
        <member name="F:Beyova.PlatformType.Android">
            <summary>
            Value indicating it is android (0x2)
            </summary>
        </member>
        <member name="F:Beyova.PlatformType.WindowsPhone">
            <summary>
            Value indicating it is windows phone (0x4)
            </summary>
        </member>
        <member name="F:Beyova.PlatformType.BlackBerry">
            <summary>
            Value indicating it is black berry (0x8)
            </summary>
        </member>
        <member name="F:Beyova.PlatformType.Web">
            <summary>
            Value indicating it is web (0x10)
            </summary>
        </member>
        <member name="T:Beyova.Configuration.JsonConfigurationReader">
            <summary>
            Provides access to configuration files for client applications. Reader would try read AppConfig.JSON first, then read assembly name based JSON ({AssemblyName}.JSON) to override, based on dependency order.
            </summary>
        </member>
        <member name="F:Beyova.Configuration.JsonConfigurationReader.configurationFileExtension">
            <summary>
            The configuration file extension
            </summary>
        </member>
        <member name="T:Beyova.Configuration.JsonConfigurationReader.ConfigurationItem">
            <summary>
            Class ConfigurationItem.
            </summary>
        </member>
        <member name="P:Beyova.Configuration.JsonConfigurationReader.ConfigurationItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Beyova.Configuration.JsonConfigurationReader.ConfigurationItem.Assembly">
            <summary>
            Gets or sets the assembly.
            </summary>
            <value>The assembly.</value>
        </member>
        <member name="P:Beyova.Configuration.JsonConfigurationReader.ConfigurationItem.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Beyova.Configuration.JsonConfigurationReader.ConfigurationItem.Environment">
            <summary>
            Gets or sets the environment.
            </summary>
            <value>The environment.</value>
        </member>
        <member name="P:Beyova.Configuration.JsonConfigurationReader.ConfigurationItem.Encrypted">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Beyova.Configuration.JsonConfigurationReader.ConfigurationItem"/> is encrypted.
            </summary>
            <value><c>true</c> if encrypted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Beyova.Configuration.JsonConfigurationReader.ConfigurationItem.MinComponentVersionRequired">
            <summary>
            Gets or sets the minimum component version required.
            </summary>
            <value>The minimum component version required.</value>
        </member>
        <member name="P:Beyova.Configuration.JsonConfigurationReader.ConfigurationItem.MaxComponentVersionLimited">
            <summary>
            Gets or sets the maximum component version limited.
            </summary>
            <value>The maximum component version limited.</value>
        </member>
        <member name="P:Beyova.Configuration.JsonConfigurationReader.ConfigurationItem.IsActive">
            <summary>
            Gets or sets a value indicating whether this instance is active.
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Beyova.Configuration.JsonConfigurationReader.Attribute_Type">
            <summary>
            The XML attribute_ type
            </summary>
        </member>
        <member name="F:Beyova.Configuration.JsonConfigurationReader.Attribute_MinComponentVersionRequire">
            <summary>
            The attribute_ minimum component version require
            </summary>
        </member>
        <member name="F:Beyova.Configuration.JsonConfigurationReader.Attribute_MaxComponentVersionLimited">
            <summary>
            The attribute_ maximum component version limited
            </summary>
        </member>
        <member name="F:Beyova.Configuration.JsonConfigurationReader.Attribute_Version">
            <summary>
            The XML attribute_ version
            </summary>
        </member>
        <member name="F:Beyova.Configuration.JsonConfigurationReader.Attribute_Name">
            <summary>
            The attribute_ name
            </summary>
        </member>
        <member name="F:Beyova.Configuration.JsonConfigurationReader.Attribute_Environment">
            <summary>
            The attribute_ environment
            </summary>
        </member>
        <member name="F:Beyova.Configuration.JsonConfigurationReader.Attribute_Value">
            <summary>
            The XML attribute_ value
            </summary>
        </member>
        <member name="F:Beyova.Configuration.JsonConfigurationReader.Attribute_Encrypted">
            <summary>
            The attribute_ encrypted
            </summary>
        </member>
        <member name="F:Beyova.Configuration.JsonConfigurationReader.ConfigurationKey_SqlConnection">
            <summary>
            The configuration key_ SQL connection
            </summary>
        </member>
        <member name="F:Beyova.Configuration.JsonConfigurationReader.settings">
            <summary>
            The settings
            </summary>
        </member>
        <member name="P:Beyova.Configuration.JsonConfigurationReader.SettingsCount">
            <summary>
            Gets the settings count.
            </summary>
            <value>The settings count.</value>
        </member>
        <member name="P:Beyova.Configuration.JsonConfigurationReader.SqlConnection">
            <summary>
            Gets the SQL connection.
            </summary>
            <value>The SQL connection.</value>
        </member>
        <member name="P:Beyova.Configuration.JsonConfigurationReader.ConfigurationBelongs">
            <summary>
            Gets the configuration belongs.
            </summary>
            <value>The configuration belongs.</value>
        </member>
        <member name="M:Beyova.Configuration.JsonConfigurationReader.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.Configuration.JsonConfigurationReader" /> class.
            </summary>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
        </member>
        <member name="M:Beyova.Configuration.JsonConfigurationReader.GetConfiguration``1(System.String,``0)">
            <summary>
            Gets the configuration.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Beyova.Configuration.JsonConfigurationReader.GetConfigurationAsObject(System.String,System.Object)">
            <summary>
            Gets the configuration as object.
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Object.</returns>
        </member>
        <member name="M:Beyova.Configuration.JsonConfigurationReader.GetConfiguration(System.String,System.String)">
            <summary>
            Gets the configuration.
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.Configuration.JsonConfigurationReader.Initialize(System.Boolean)">
            <summary>
            Initializes the specified throw exception.
            </summary>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <returns>Dictionary&lt;System.String, ConfigurationItem&gt;.</returns>
        </member>
        <member name="M:Beyova.Configuration.JsonConfigurationReader.InitializeByAssembly(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <returns>Dictionary&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="M:Beyova.Configuration.JsonConfigurationReader.InitializeSettings(System.Collections.Generic.IDictionary{System.String,Beyova.Configuration.JsonConfigurationReader.ConfigurationItem},Beyova.ProgrammingIntelligence.BeyovaComponentAttribute,System.String,System.String,System.Boolean)">
            <summary>
            Initializes the settings.
            </summary>
            <param name="settingContainer">The setting container.</param>
            <param name="componentAttribute">The component attribute.</param>
            <param name="jsonString">The json string.</param>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
        </member>
        <member name="M:Beyova.Configuration.JsonConfigurationReader.FillObjectCollection(System.Collections.Generic.IDictionary{System.String,Beyova.Configuration.JsonConfigurationReader.ConfigurationItem},Beyova.ProgrammingIntelligence.BeyovaComponentAttribute,Newtonsoft.Json.Linq.JProperty,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Fills the object collection.
            </summary>
            <param name="container">The container.</param>
            <param name="componentAttribute">The component attribute.</param>
            <param name="itemNode">The XML node.</param>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="configurationSourceName">Name of the configuration source.</param>
            <param name="environment">The environment.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <exception cref="T:System.InvalidOperationException">Failed to FillObjectCollection, Data:  + xmlNode.ToString() + \n\r</exception>
        </member>
        <member name="M:Beyova.Configuration.JsonConfigurationReader.DecryptObject(System.String)">
            <summary>
            Decrypts the object.
            </summary>
            <param name="jsonString">The json string.</param>
            <returns>Newtonsoft.Json.Linq.JToken.</returns>
        </member>
        <member name="M:Beyova.Configuration.JsonConfigurationReader.EncryptObject(System.Object)">
            <summary>
            Encrypts the object.
            </summary>
            <param name="obj">The object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.Configuration.JsonConfigurationReader.IsActive(System.String,System.String,System.String)">
            <summary>
            Determines whether the specified version value is active.
            </summary>
            <param name="versionValue">The version value.</param>
            <param name="minRequired">The minimum required.</param>
            <param name="maxLimited">The maximum limited.</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="M:Beyova.Configuration.JsonConfigurationReader.RefreshSettings">
            <summary>
            Refreshes the settings.
            </summary>
        </member>
        <member name="M:Beyova.Configuration.JsonConfigurationReader.GetConfigurationFilePath(System.String)">
            <summary>
            Gets the default configuration file path.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.Configuration.JsonConfigurationReader.GetValues">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Beyova.Configuration.JsonConfigurationReader.InitializeConfigurationByRemoteUri(System.Collections.Generic.Dictionary{System.String,Beyova.Configuration.JsonConfigurationReader.ConfigurationItem},Beyova.ProgrammingIntelligence.BeyovaComponentAttribute,System.String,Beyova.ProgrammingIntelligence.BeyovaConfigurationAttribute,System.Boolean)">
            <summary>
            Initializes the configuration by remote URI.
            </summary>
            <param name="settingContainer">The setting container.</param>
            <param name="beyovaComponent">The beyova component.</param>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="configurationAttribute">The configuration attribute.</param>
            <param name="throwException">The throw exception.</param>
            <returns>System.Collections.Generic.Dictionary&lt;System.String, Beyova.Configuration.JsonConfigurationReader.ConfigurationItem&gt;.</returns>
        </member>
        <member name="T:Beyova.WorkflowState">
            <summary>
            Enum WorkflowState
            </summary>
        </member>
        <member name="F:Beyova.WorkflowState.None">
            <summary>
                The value indicating that object or operation is none.
            </summary>
        </member>
        <member name="F:Beyova.WorkflowState.Pending">
            <summary>
                The value indicating that object or operation is pending.
            </summary>
        </member>
        <member name="F:Beyova.WorkflowState.Approved">
            <summary>
                The value indicating that object or operation is approved.
            </summary>
        </member>
        <member name="F:Beyova.WorkflowState.Rejected">
            <summary>
                The value indicating that object or operation is rejected
            </summary>
        </member>
        <member name="F:Beyova.WorkflowState.InProcess">
            <summary>
                The value indicating that operation is in process.
            </summary>
        </member>
        <member name="F:Beyova.WorkflowState.Completed">
            <summary>
                The value indicating that object or operation is rejected.
            </summary>
        </member>
        <member name="T:Beyova.DualToken">
            <summary>
            Class DualToken. This class cannot be inherited.
            DualToken is used when a random token is required and needs to be safely stored in somewhere for later use by RSA.
            Common procedures:
            <list type="number">
            <item>
            A pair of RSA keys are generated. Member A get public key while Member B get private key.
            </item>
            <item>
            Member A: new DualToken(), export token for storing in DB or file using <c>GetTokenForStore</c>.
            </item>
            <item>
            Member A call <c>GetTokenForValidate</c> to get token for validation, and give it to Member B. 
            </item>
            <item>
            Member B get token, decrypt it using private key, get raw token and give it to A for validation.
            </item>
            <item>
            Member A call <c>Validate</c> using token from Member B to see whether it is authorized.
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Beyova.DualToken.encoding">
            <summary>
            The encoding
            </summary>
        </member>
        <member name="F:Beyova.DualToken.rawToken">
            <summary>
            The raw token
            </summary>
        </member>
        <member name="F:Beyova.DualToken.encryptedToken">
            <summary>
            The encrypted token
            </summary>
        </member>
        <member name="M:Beyova.DualToken.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.DualToken"/> class.
            </summary>
            <param name="storedToken">The stored token.</param>
        </member>
        <member name="M:Beyova.DualToken.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.DualToken" /> class.
            </summary>
            <param name="length">The length.</param>
        </member>
        <member name="M:Beyova.DualToken.Validate(System.String)">
            <summary>
            Validates the specified token.
            </summary>
            <param name="token">The token.</param>
            <returns><c>true</c> if it is validated, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Beyova.DualToken.GetTokenForStore">
            <summary>
            Gets the token for store.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.DualToken.GetTokenForValidate(System.String)">
            <summary>
            Gets the token for validate.
            </summary>
            <param name="rsaPublicKey">The RSA public key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.DualToken.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Beyova.DualToken.CreateRsaKeys(System.String@,System.String@)">
            <summary>
            Creates the RSA keys.
            </summary>
            <param name="publicKey">The public key.</param>
            <param name="privateKey">The private key.</param>
        </member>
        <member name="M:Beyova.DualToken.Validate(System.String,System.String)">
            <summary>
            Validates the specified stored token.
            </summary>
            <param name="storedToken">The stored token.</param>
            <param name="validateToken">The validate token.</param>
            <returns><c>true</c> if it is validated, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Beyova.NetworkDiagnostic">
            <summary>
            Class NetworkDiagnostic.
            </summary>
        </member>
        <member name="M:Beyova.NetworkDiagnostic.Ping(System.String,System.Nullable{System.Int32},System.Byte[],System.Net.NetworkInformation.PingOptions)">
            <summary>
            Pings the specified host name or address.
            </summary>
            <param name="hostNameOrAddress">The host name or address.</param>
            <param name="timeout">The timeout.</param>
            <param name="buffer">The buffer.</param>
            <param name="options">The options.</param>
            <returns>System.Net.NetworkInformation.PingReply.</returns>
        </member>
        <member name="T:Beyova.LambdaComparer`2">
            <summary>
            Class LambdaComparer.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TCompareType">The type of the t compare type.</typeparam>
        </member>
        <member name="P:Beyova.LambdaComparer`2.Comparer">
            <summary>
            Gets or sets the comparer.
            </summary>
            <value>The comparer.</value>
        </member>
        <member name="P:Beyova.LambdaComparer`2.Comparison">
            <summary>
            Gets the comparison.
            </summary>
            <value>The comparison.</value>
        </member>
        <member name="M:Beyova.LambdaComparer`2.#ctor(System.Func{`0,`1},System.Func{`1,`1,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.LambdaComparer`2" /> class.
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:Beyova.LambdaComparer`2.Compare(`0,`0)">
            <summary>
            When overridden in a derived class, performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero <paramref name="x" /> is less than <paramref name="y" />.Zero <paramref name="x" /> equals <paramref name="y" />.Greater than zero <paramref name="x" /> is greater than <paramref name="y" />.</returns>
        </member>
        <member name="T:Beyova.ComparableLambdaComparer`2">
            <summary>
            Class ComparableLambdaComparer. This class cannot be inherited.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TComparableType">The type of the t comparable type.</typeparam>
        </member>
        <member name="M:Beyova.ComparableLambdaComparer`2.#ctor(System.Func{`0,`1},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.LambdaComparer`2" /> class.
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="isDescending">if set to <c>true</c> [is descending].</param>
        </member>
        <member name="M:Beyova.ComparableLambdaComparer`2.GetDefaultComparison(System.Boolean)">
            <summary>
            Gets the default comparison.
            </summary>
            <param name="isDescending">if set to <c>true</c> [is descending].</param>
            <returns>Func&lt;TComparableType, TComparableType, System.Int32&gt;.</returns>
        </member>
        <member name="T:Beyova.DiagnosticFileLogger">
            <summary>
            Class DiagnosticFileLogger. This class cannot be inherited.
            </summary>
        </member>
        <member name="F:Beyova.DiagnosticFileLogger.diagnosticFileLoggers">
            <summary>
            The diagnostic file loggers
            </summary>
        </member>
        <member name="F:Beyova.DiagnosticFileLogger.traceListener">
            <summary>
            The instance
            </summary>
        </member>
        <member name="F:Beyova.DiagnosticFileLogger.initializeLocker">
            <summary>
            The initialize locker
            </summary>
        </member>
        <member name="M:Beyova.DiagnosticFileLogger.CreateOrUpdateDiagnosticFileLogger(System.String)">
            <summary>
            Creates the or update diagnostic file logger.
            </summary>
            <param name="applicationName">Name of the application.</param>
            <returns>DiagnosticFileLogger.</returns>
        </member>
        <member name="M:Beyova.DiagnosticFileLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.DiagnosticFileLogger"/> class.
            </summary>
            <param name="applicationName">Name of the application.</param>
        </member>
        <member name="M:Beyova.DiagnosticFileLogger.InternalLogMessageWithTimeStamp(System.String)">
            <summary>
            Logs the message with time stamp.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Beyova.DiagnosticFileLogger.InternalLogMessage(System.String)">
            <summary>
            Logs the message.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Beyova.DiagnosticFileLogger.InternalWriteContent(System.String)">
            <summary>
            Writes the content.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Beyova.DiagnosticFileLogger.InternalLogApiEvent(Beyova.ApiTracking.ApiEventLog)">
            <summary>
            Logs the API event.
            </summary>
            <param name="eventLog">The event log.</param>
            <returns>System.Nullable&lt;Guid&gt;.</returns>
        </member>
        <member name="M:Beyova.DiagnosticFileLogger.InternalLogApiTraceLog(Beyova.ApiTracking.ApiTraceLog)">
            <summary>
            Logs the API trace log.
            </summary>
            <param name="traceLog">The trace log.</param>
        </member>
        <member name="M:Beyova.DiagnosticFileLogger.LogApiEvent(Beyova.ApiTracking.ApiEventLog)">
            <summary>
            Logs the API event asynchronous.
            </summary>
            <param name="eventLog">The event log.</param>
        </member>
        <member name="M:Beyova.DiagnosticFileLogger.InternalLogEvent``1(``0)">
            <summary>
            Logs the event.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="eventLog">The event log.</param>
        </member>
        <member name="M:Beyova.DiagnosticFileLogger.LogEventAsync``1(System.String,``0)">
            <summary>
            Logs the event asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="container">The container.</param>
            <param name="eventLog">The event log.</param>
        </member>
        <member name="M:Beyova.DiagnosticFileLogger.LogApiTraceLog(Beyova.ApiTracking.ApiTraceLog)">
            <summary>
            Logs the API trace log asynchronous.
            </summary>
            <param name="traceLog">The trace log.</param>
        </member>
        <member name="M:Beyova.DiagnosticFileLogger.LogException(Beyova.ExceptionSystem.ExceptionInfo)">
            <summary>
            Logs the exception asynchronous.
            </summary>
            <param name="exceptionInfo">The exception information.</param>
        </member>
        <member name="M:Beyova.DiagnosticFileLogger.LogMessage(System.String)">
            <summary>
            Logs the message asynchronous.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Beyova.Sandbox">
            <summary>
            Class Sandbox.
            </summary>
        </member>
        <member name="P:Beyova.Sandbox.AppDomain">
            <summary>
            Gets or sets the application domain.
            </summary>
            <value>The application domain.</value>
        </member>
        <member name="M:Beyova.Sandbox.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.Sandbox"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Beyova.Sandbox.LoadLibrary(System.Byte[])">
            <summary>
            Loads the library.
            </summary>
            <param name="assemblyBytes">The assembly bytes.</param>
        </member>
        <member name="M:Beyova.Sandbox.CreateDynamicAssembly(System.CodeDom.Compiler.CodeDomProvider,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates the dynamic assembly.
            </summary>
            <param name="provider">The provider.</param>
            <param name="referencedAssemblies">The referenced assemblies.</param>
            <param name="namespace">The namespace.</param>
            <param name="usingNameSpaces">The using nameSpaces.</param>
            <param name="classCodesToCompile">The class codes to compile.</param>
            <returns>Assembly.</returns>
            <exception cref="T:Beyova.ExceptionSystem.OperationFailureException">CompileAssemblyFromSource;null</exception>
        </member>
        <member name="M:Beyova.Sandbox.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Beyova.Sandbox.GetCommonAssemblyNameList">
            <summary>
            Gets the common assembly name list.
            </summary>
            <returns>HashSet&lt;System.String&gt;.</returns>
        </member>
        <member name="M:Beyova.Sandbox.GetCommonNamespaces">
            <summary>
            Gets the common namespaces.
            </summary>
            <returns>HashSet&lt;System.String&gt;.</returns>
        </member>
        <member name="T:Beyova.SandboxAssembly">
            <summary>
            Class SandboxAssembly.
            </summary>
        </member>
        <member name="P:Beyova.SandboxAssembly.Assembly">
            <summary>
            Gets or sets the assembly.
            </summary>
            <value>The assembly.</value>
        </member>
        <member name="P:Beyova.SandboxAssembly.Namespace">
            <summary>
            Gets or sets the namespace.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="M:Beyova.SandboxAssembly.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.SandboxAssembly" /> class.
            </summary>
            <param name="_assembly">The _assembly.</param>
            <param name="_namespace">The _namespace.</param>
        </member>
        <member name="M:Beyova.SandboxAssembly.Execute(System.String,System.String,System.Object[])">
            <summary>
            Executes the specified assembly name.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="method">The method.</param>
            <param name="parameters">The parameters.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Beyova.SandboxAssembly.CreateInstance(System.String)">
            <summary>
            Creates the instance.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Beyova.StrickJsonSerializer">
            <summary>
            Class StrickJsonSerializer.
            </summary>
        </member>
        <member name="F:Beyova.StrickJsonSerializer.NullJToken">
            <summary>
            The null j token
            </summary>
        </member>
        <member name="F:Beyova.StrickJsonSerializer.UndefinedJToken">
            <summary>
            The undefined j token
            </summary>
        </member>
        <member name="M:Beyova.StrickJsonSerializer.ToStickJson``1(System.Object,System.Boolean,System.Boolean)">
            <summary>
            To the XML.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anyObject">Any object.</param>
            <param name="indentedFormat">if set to <c>true</c> [indented format].</param>
            <param name="ignoreNullFields">if set to <c>true</c> [ignore null fields].</param>
            <returns>XElement.</returns>
        </member>
        <member name="M:Beyova.StrickJsonSerializer.WriteData(Newtonsoft.Json.JsonWriter,System.Object,System.Type,System.Boolean)">
            <summary>
            Writes the data.
            </summary>
            <param name="writer">The writer.</param>
            <param name="anyObject">Any object.</param>
            <param name="type">The type.</param>
            <param name="ignoreNullFields">if set to <c>true</c> [ignore null fields].</param>
        </member>
        <member name="T:Beyova.JsonXmlSerializer">
            <summary>
            Class JsonXmlSerializer, which is used for converting between Json and Xml
            </summary>
        </member>
        <member name="F:Beyova.JsonXmlSerializer.attributeType">
            <summary>
            The attribute type
            </summary>
        </member>
        <member name="F:Beyova.JsonXmlSerializer.nodeArray">
            <summary>
            The node array
            </summary>
        </member>
        <member name="F:Beyova.JsonXmlSerializer.nodeRoot">
            <summary>
            The node root
            </summary>
        </member>
        <member name="F:Beyova.JsonXmlSerializer.NullJToken">
            <summary>
            The null j token
            </summary>
        </member>
        <member name="F:Beyova.JsonXmlSerializer.UndefinedJToken">
            <summary>
            The undefined j token
            </summary>
        </member>
        <member name="M:Beyova.JsonXmlSerializer.AddIfNotNull(System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
            <summary>
            Adds if not null.
            </summary>
            <param name="xElement">The x element.</param>
            <param name="toAdd">To add.</param>
        </member>
        <member name="M:Beyova.JsonXmlSerializer.ToXml(Newtonsoft.Json.Linq.JToken,System.String,System.String)">
            <summary>
            To the XML.
            </summary>
            <param name="jToken">The j token.</param>
            <param name="nodeName">Name of the node.</param>
            <param name="arrayItemName">Name of the array item.</param>
            <returns>XElement.</returns>
        </member>
        <member name="M:Beyova.JsonXmlSerializer.ToXmlString(Newtonsoft.Json.Linq.JToken,System.String,System.String)">
            <summary>
            To the XML string.
            </summary>
            <param name="jToken">The j token.</param>
            <param name="nodeName">Name of the node.</param>
            <param name="arrayItemName">Name of the array item.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.JsonXmlSerializer.FillXml(System.Xml.XmlWriter,Newtonsoft.Json.Linq.JToken,System.String,System.String)">
            <summary>
            To the XML.
            </summary>
            <param name="writer">The writer.</param>
            <param name="jToken">The j token.</param>
            <param name="nodeName">Name of the node.</param>
            <param name="arrayItemName">Name of the array item.</param>
            <returns>XElement.</returns>
        </member>
        <member name="M:Beyova.JsonXmlSerializer.ToJToken(System.Xml.Linq.XElement)">
            <summary>
            To the j token.
            </summary>
            <param name="xml">The XML.</param>
            <returns>JToken.</returns>
        </member>
        <member name="T:Beyova.Gravity.SecureCommunicationPackage`1">
            <summary>
            Class SecureCommunicationPackage.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Beyova.Gravity.SecureCommunicationPackage`1.PublicKey">
            <summary>
            Gets or sets the public key.
            </summary>
            <value>The public key.</value>
        </member>
        <member name="P:Beyova.Gravity.SecureCommunicationPackage`1.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="T:Beyova.Framework">
            <summary>
            Class Framework.
            </summary>
        </member>
        <member name="F:Beyova.Framework.ConfigurationReader">
            <summary>
            The configuration reader
            </summary>
        </member>
        <member name="M:Beyova.Framework.SetGlobalDefaultApiTracking(Beyova.IApiTracking)">
            <summary>
            Sets the global default api tracking.
            </summary>
            <param name="apiTracking">The API tracking.</param>
        </member>
        <member name="M:Beyova.Framework.AboutService">
            <summary>
            Abouts the service.
            </summary>
            <returns>ServiceVersion.</returns>
        </member>
        <member name="M:Beyova.Framework.GetConfiguration``1(System.String,``0)">
            <summary>
            Gets the configuration.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Beyova.Framework.GetConfiguration(System.String,System.String)">
            <summary>
            Gets the configuration.
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:Beyova.Framework.ApiTracking">
            <summary>
            The API tracking
            </summary>
        </member>
        <member name="P:Beyova.Framework.RootApiTracking">
            <summary>
            Gets the root API tracking.
            </summary>
            <value>The root API tracking.</value>
        </member>
        <member name="M:Beyova.Framework.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Beyova.Framework"/> class.
            </summary>
        </member>
        <member name="M:Beyova.Framework.Initialize">
            <summary>
            Initializes the configuration.
            </summary>
        </member>
        <member name="M:Beyova.Framework.GetDefaultConfigurationReader">
            <summary>
            Gets the default configuration reader.
            </summary>
            <returns>IConfigurationReader.</returns>
        </member>
        <member name="T:Beyova.IConfigurationReader">
            <summary>
            Interface IConfigurationReader
            </summary>
        </member>
        <member name="P:Beyova.IConfigurationReader.SettingsCount">
            <summary>
            Gets the settings count.
            </summary>
            <value>The settings count.</value>
        </member>
        <member name="P:Beyova.IConfigurationReader.SqlConnection">
            <summary>
            Gets the SQL connection.
            </summary>
            <value>The SQL connection.</value>
        </member>
        <member name="P:Beyova.IConfigurationReader.ConfigurationBelongs">
            <summary>
            Gets the configuration belongs.
            </summary>
            <value>The configuration belongs.</value>
        </member>
        <member name="M:Beyova.IConfigurationReader.GetConfiguration``1(System.String,``0)">
            <summary>
            Gets the configuration.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Beyova.IConfigurationReader.GetConfiguration(System.String,System.String)">
            <summary>
            Gets the configuration.
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.IConfigurationReader.GetValues">
            <summary>
            Gets the values.
            </summary>
            <returns>IEnumerable&lt;KeyValuePair&lt;System.String, System.Object&gt;&gt;.</returns>
        </member>
        <member name="M:Beyova.IConfigurationReader.RefreshSettings">
            <summary>
            Refreshes the settings.
            </summary>
        </member>
        <member name="T:Beyova.ICriteria">
            <summary>
            Interface ICriteria
            </summary>
        </member>
        <member name="P:Beyova.ICriteria.Count">
            <summary>
            Gets or sets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Beyova.IApiTracking">
            <summary>
            Interface IApiTracking
            </summary>
        </member>
        <member name="M:Beyova.IApiTracking.LogApiEvent(Beyova.ApiTracking.ApiEventLog)">
            <summary>
            Logs the API event asynchronous.
            </summary>
            <param name="eventLog">The event log.</param>
        </member>
        <member name="M:Beyova.IApiTracking.LogException(Beyova.ExceptionSystem.ExceptionInfo)">
            <summary>
            Logs the exception asynchronous.
            </summary>
            <param name="exceptionInfo">The exception information.</param>
        </member>
        <member name="M:Beyova.IApiTracking.LogApiTraceLog(Beyova.ApiTracking.ApiTraceLog)">
            <summary>
            Logs the API trace log asynchronous.
            </summary>
            <param name="traceLog">The trace log.</param>
        </member>
        <member name="M:Beyova.IApiTracking.LogMessage(System.String)">
            <summary>
            Logs the message asynchronous.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Beyova.ClientEnvironment">
            <summary>
            Class ClientEnvironment
            </summary>
        </member>
        <member name="P:Beyova.ClientEnvironment.Device">
            <summary>
            Gets or sets Value indicating it is device.
            </summary>
            <value>Value indicating it is device.</value>
        </member>
        <member name="P:Beyova.ClientEnvironment.Platform">
            <summary>
            Gets or sets Value indicating it is platform.
            </summary>
            <value>Value indicating it is platform.</value>
        </member>
        <member name="P:Beyova.ClientEnvironment.UserAgent">
            <summary>
            Gets or sets Value indicating it is user agent.
            </summary>
            <value>Value indicating it is user agent.</value>
        </member>
        <member name="P:Beyova.ClientEnvironment.AppVersion">
            <summary>
            Gets or sets Value indicating it is application version.
            e.g.: 1.2.3.123, 1.2.3
            </summary>
            <value>Value indicating it is application version.</value>
        </member>
        <member name="T:Beyova.Gender">
            <summary>
            Enum Gender
            </summary>
        </member>
        <member name="F:Beyova.Gender.Undefined">
            <summary>
            Value indicating it is Undefined
            </summary>
        </member>
        <member name="F:Beyova.Gender.Male">
            <summary>
            Value indicating it is male
            </summary>
        </member>
        <member name="F:Beyova.Gender.Female">
            <summary>
            Value indicating it is female
            </summary>
        </member>
        <member name="T:Beyova.ObjectState">
            <summary>
                Enum values for object status.
            </summary>
        </member>
        <member name="F:Beyova.ObjectState.Normal">
            <summary>
                The value indicating that object is normal.(0x0)
            </summary>
        </member>
        <member name="F:Beyova.ObjectState.Deleted">
            <summary>
                The value indicating that object is deleted logically. (0x1)
            </summary>
        </member>
        <member name="F:Beyova.ObjectState.Invisible">
            <summary>
                The value indicating that object is invisible. (0x2)
            </summary>
        </member>
        <member name="F:Beyova.ObjectState.ReadOnly">
            <summary>
                The value indicating that object is readonly. (0x4)
            </summary>
        </member>
        <member name="F:Beyova.ObjectState.Disabled">
            <summary>
                The value indicating that object is disabled. (0x8)
            </summary>
        </member>
        <member name="T:Beyova.DrawingExtension">
            <summary>
            Extension class for drawing
            </summary>
        </member>
        <member name="M:Beyova.DrawingExtension.PadImage(System.Drawing.Image)">
            <summary>
            Pads the image.
            </summary>
            <param name="originalImage">The original image.</param>
            <returns>Image.</returns>
        </member>
        <member name="M:Beyova.DrawingExtension.GetImageEncoder(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Gets the image encoder.
            </summary>
            <param name="format">The format.</param>
            <returns>ImageCodecInfo.</returns>
        </member>
        <member name="M:Beyova.DrawingExtension.ToBitmap(System.Byte[])">
            <summary>
            To the bitmap.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>Bitmap.</returns>
        </member>
        <member name="M:Beyova.DrawingExtension.Resize(System.Drawing.Bitmap,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Resizes the specified image.
            </summary>
            <param name="image">The image.</param>
            <param name="maxWidth">The maximum width.</param>
            <param name="maxHeight">The maximum height.</param>
            <param name="keepRatio">if set to <c>true</c> [keep ratio].</param>
            <returns>Bitmap.</returns>
        </member>
        <member name="M:Beyova.DrawingExtension.GetBytes(System.Drawing.Bitmap,System.Drawing.Imaging.ImageFormat,System.Int64)">
            <summary>
            Gets the bytes.
            </summary>
            <param name="image">The image.</param>
            <param name="imageFormat">The image format.</param>
            <param name="qualityLevel">The quality level.
            <remarks>
            A quality level of 0 corresponds to the greatest compression, and a quality level of 100 corresponds to the least compression.
            https://msdn.microsoft.com/library/bb882583(v=vs.110).aspx
            </remarks></param>
            <returns>System.Byte[].</returns>
            <exception cref="T:Beyova.ExceptionSystem.OperationFailureException">GetBytes</exception>
        </member>
        <member name="M:Beyova.DrawingExtension.Crop(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Crops the specified image.
            </summary>
            <param name="image">The image.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>Bitmap.</returns>
        </member>
        <member name="T:Beyova.I18NResourceCollection">
            <summary>
            Class I18NResourceCollection.
            </summary>
        </member>
        <member name="F:Beyova.I18NResourceCollection.resourceManager">
            <summary>
            The resource manager
            </summary>
        </member>
        <member name="P:Beyova.I18NResourceCollection.ResourceManager">
            <summary>
            Gets or sets the resource manager.
            </summary>
            <value>The resource manager.</value>
        </member>
        <member name="M:Beyova.I18NResourceCollection.#ctor(System.String,System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.I18NResourceCollection" /> class.
            </summary>
            <param name="resourceBaseName">Name of the resource.</param>
            <param name="resourceAssembly">The resource assembly.</param>
        </member>
        <member name="P:Beyova.I18NResourceCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.String"/> with the specified resource key.
            </summary>
            <param name="resourceKey">The resource key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.I18NResourceCollection.GetResourceString(System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Gets the resource string.
            If cultureCode is specified, then use that.
            Otherwise, use Thread UI culture (the default behavior by .NET) instead.
            </summary>
            <param name="resourceKey">The resource key.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <param name="cultureCode">The culture code.</param>
            <param name="languageCompatibility">if set to <c>true</c> [language compatibility].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.I18NResourceCollection.GetResourceString(System.String,System.String,System.Boolean)">
            <summary>
            Gets the resource string.
            </summary>
            <param name="resourceKey">The resource key.</param>
            <param name="cultureCode">The culture code.</param>
            <param name="languageCompatibility">if set to <c>true</c> [language compatibility].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.I18NResourceCollection.GetResourceStringsByCultureCode(System.String)">
            <summary>
            Gets the resource strings by culture code.
            </summary>
            <param name="cultureCode">The culture code.</param>
            <returns>Dictionary&lt;System.String, System.String&gt;.</returns>
        </member>
        <member name="M:Beyova.I18NResourceCollection.GetResourceStringSet">
            <summary>
            Gets the resource string set.
            </summary>
            <returns>Dictionary&lt;CultureInfo, Dictionary&lt;System.String, System.String&gt;&gt;.</returns>
        </member>
        <member name="T:Beyova.IBaseObject">
            <summary>
            Interface IBaseObject
            </summary>
        </member>
        <member name="P:Beyova.IBaseObject.CreatedBy">
            <summary>
            Gets or sets the created by.
            </summary>
            <value>
            The created by.
            </value>
        </member>
        <member name="P:Beyova.IBaseObject.LastUpdatedBy">
            <summary>
            Gets or sets the last updated by.
            </summary>
            <value>
            The last updated by.
            </value>
        </member>
        <member name="T:Beyova.IGlobalObjectName">
            <summary>
            Interface IGlobalObjectName
            </summary>
        </member>
        <member name="P:Beyova.IGlobalObjectName.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Beyova.IGlobalObjectName.CultureCode">
            <summary>
            Gets or sets the culture code.
            </summary>
            <value>
            The culture code.
            e.g.: zh-CN, en-US, pt-PT, etc.
            </value>
        </member>
        <member name="T:Beyova.IIdentifier">
            <summary>
            Interface for object IIdentifier.
            </summary>
        </member>
        <member name="P:Beyova.IIdentifier.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="T:Beyova.BaseObject">
            <summary>
            Abstract class for base object, with key, created stamp and last updated stamp.
            </summary>
        </member>
        <member name="P:Beyova.BaseObject.CreatedBy">
            <summary>
            Gets or sets the created by.
            </summary>
            <value>
            The created by.
            </value>
        </member>
        <member name="P:Beyova.BaseObject.LastUpdatedBy">
            <summary>
            Gets or sets the last updated by.
            </summary>
            <value>
            The last updated by.
            </value>
        </member>
        <member name="T:Beyova.BaseCriteria">
            <summary>
            Class BaseCriteria.
            </summary>
        </member>
        <member name="P:Beyova.BaseCriteria.Key">
            <summary>
            Gets or sets the key of the object.
            If this value is assigned, other criteria would be ignored.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Beyova.BaseCriteria.Count">
            <summary>
            Gets or sets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Beyova.BaseCriteria.OrderDescending">
            <summary>
            Gets or sets a value indicating whether [order descending].
            </summary>
            <value><c>true</c> if [order descending]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Beyova.BaseCriteria.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.BaseCriteria" /> class.
            </summary>
        </member>
        <member name="T:Beyova.EnvironmentInfo">
            <summary>
            Class EnvironmentInfo.
            </summary>
        </member>
        <member name="P:Beyova.EnvironmentInfo.AssemblyVersion">
            <summary>
            Gets or sets the assembly version.
            </summary>
            <value>The assembly version.</value>
        </member>
        <member name="P:Beyova.EnvironmentInfo.SqlDatabaseEnvironment">
            <summary>
            Gets or sets the server environment.
            </summary>
            <value>The server environment.</value>
        </member>
        <member name="P:Beyova.EnvironmentInfo.ConfigurationBelongs">
            <summary>
            Gets or sets the configuration belongs.
            </summary>
            <value>The configuration belongs.</value>
        </member>
        <member name="P:Beyova.EnvironmentInfo.MemoryUsage">
            <summary>
            Gets or sets the memory usage. Unit: Byte
            </summary>
            <value>The memory usage.</value>
        </member>
        <member name="P:Beyova.EnvironmentInfo.GCMemory">
            <summary>
            Gets or sets the gc memory.
            </summary>
            <value>The gc memory.</value>
        </member>
        <member name="P:Beyova.EnvironmentInfo.CpuUsage">
            <summary>
            Gets or sets the cpu usage. Unit: %.
            </summary>
            <value>The cpu usage.</value>
        </member>
        <member name="P:Beyova.EnvironmentInfo.ServerName">
            <summary>
            Gets or sets the name of the server.
            </summary>
            <value>The name of the server.</value>
        </member>
        <member name="M:Beyova.EnvironmentInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.EnvironmentInfo"/> class.
            </summary>
        </member>
        <member name="M:Beyova.EnvironmentInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Beyova.CollectionExtension">
            <summary>
            Extension class for collection type object.
            </summary>
        </member>
        <member name="F:Beyova.CollectionExtension.keyValueFormat">
            <summary>
            The format
            </summary>
        </member>
        <member name="M:Beyova.CollectionExtension.AddIfNotExists``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,``0,System.Boolean})">
            <summary>
            Adds if not exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="item">The item.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Beyova.CollectionExtension.AddIfNotNull``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Adds if not null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="item">The item.</param>
            <returns><c>true</c> if succeed to add, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.AddIfNotNull``1(System.Collections.Generic.HashSet{``0},``0)">
            <summary>
            Adds if not null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Beyova.CollectionExtension.AddIfNotNull(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
            Adds if not null.
            </summary>
            <param name="collection">The collection.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Beyova.CollectionExtension.AddIfNotExists``1(System.Collections.Generic.HashSet{``0},``0,System.Func{``0,``0,System.Boolean})">
            <summary>
            Adds if not exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="item">The item.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Beyova.CollectionExtension.AddIfNotNull``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Adds if not null.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Beyova.CollectionExtension.AddIfNotNullOrEmpty(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Adds if not null or empty.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Beyova.CollectionExtension.SubCollection``1(System.Collections.Generic.IList{``0},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Subs the collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="startIndex">The start index.</param>
            <param name="count">The count.</param>
            <returns>List&lt;T&gt;.</returns>
            <exception cref="T:Beyova.ExceptionSystem.InvalidObjectException">
            startIndex
            or
            count
            </exception>
        </member>
        <member name="M:Beyova.CollectionExtension.RemoveFrom``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Removes from.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="startIndex">The start index.</param>
            <exception cref="T:Beyova.ExceptionSystem.InvalidObjectException">startIndex</exception>
        </member>
        <member name="M:Beyova.CollectionExtension.GetByLastIndexOf``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Gets the by last index of. (index should >= 1)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="lastIndex">The last index. (should >= 1)</param>
            <returns>T.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.GetByIndexOf``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Gets the by index of. (index should >= 1)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="index">The index.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.Sort``2(System.Collections.Generic.List{``0},System.Func{``0,``1},System.Boolean)">
            <summary>
            Sorts the specified comparable selector.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TComparableType">The type of the t comparable type.</typeparam>
            <param name="list">The list.</param>
            <param name="comparableSelector">The comparable selector.</param>
            <param name="isDescending">if set to <c>true</c> [is descending].</param>
        </member>
        <member name="M:Beyova.CollectionExtension.Sort``2(System.Collections.Generic.List{``0},System.Func{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Sorts the specified list.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TComparableType">The type of the t comparable type.</typeparam>
            <param name="list">The list.</param>
            <param name="comparableSelector">The comparable selector.</param>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:Beyova.CollectionExtension.TryReplace``2(System.Collections.Generic.IList{``0},``0,``1,System.Func{``0,``1,System.Boolean})">
            <summary>
            Try to the replace with specific item. Replaced index would be returned.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TComparerIdentifier">The type of the t comparer identifier.</typeparam>
            <param name="collection">The collection.</param>
            <param name="itemToReplace">The item to replace.</param>
            <param name="comparerIdentifier">The comparer identifier.</param>
            <param name="comparer">The comparer.</param>
            <returns>System.Nullable&lt;System.Int32&gt; for replaced index.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.TryReplaceAll``2(System.Collections.Generic.IList{``0},``0,``1,System.Func{``0,``1,System.Boolean})">
            <summary>
            Try to the replace all with specific item. Replaced count would be returned.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TComparerIdentifier">The type of the t comparer identifier.</typeparam>
            <param name="collection">The collection.</param>
            <param name="itemToReplace">The item to replace.</param>
            <param name="comparerIdentifier">The comparer identifier.</param>
            <param name="comparer">The comparer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.TryGetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Tries the get value.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>TValue.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            To the hash set.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="comparer">The comparer.</param>
            <returns>HashSet&lt;T&gt;.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.ToDictionary``2(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            To the dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="items">The items.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:Beyova.CollectionExtension.ListToXml``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Object})">
            <summary>
            Converts list to XML.
            <remarks>Serialize object to &lt;List&gt;&lt;Item&gt;Value&lt;/Item&gt;&lt;/List&gt;</remarks>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="convertFunc">The convert function.</param>
            <returns>XElement.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.DictionaryToXml``1(System.Collections.Generic.IDictionary{System.String,``0},System.Func{``0,System.String})">
            <summary>
            Dictionaries to XML.
            </summary>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="convertFunc">The convert function.</param>
            <returns>XElement.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.DictionaryToXml``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Xml.Linq.XElement})">
            <summary>
            Dictionaries to XML.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="convertFunc">The convert function.</param>
            <returns>XElement.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.XmlToList``1(System.Xml.Linq.XElement,System.Func{System.Xml.Linq.XElement,``0})">
            <summary>
            XMLs to list.
            The Xml need to match the format which equals to result from 
            <see cref="M:Beyova.CollectionExtension.ListToXml``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Object})" />.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml">The XML.</param>
            <param name="xmlNodeToEntity">The XML node to entity.</param>
            <returns>List{System.String}.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.XmlToDictionary``1(System.Xml.Linq.XElement,System.Func{System.Xml.Linq.XElement,``0})">
            <summary>
            XMLs to dictionary.
            </summary>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="xml">The XML.</param>
            <param name="xmlNodeToEntity">The XML node to entity.</param>
            <returns>Dictionary&lt;System.String, TValue&gt;.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.XmlToDictionary``2(System.Xml.Linq.XElement,System.Func{System.Xml.Linq.XElement,System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            XMLs to dictionary.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="xml">The XML.</param>
            <param name="xmlNodeToEntity">The XML node to entity.</param>
            <returns>Dictionary&lt;TKey, TValue&gt;.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.XmlToList(System.Xml.Linq.XElement)">
            <summary>
            XMLs to list.
            </summary>
            <param name="xml">The XML.</param>
            <returns>List&lt;System.String&gt;.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.XmlToList(System.String)">
            <summary>
            XMLs to list.
            The Xml need to match the format which equals to result from <see cref="M:Beyova.CollectionExtension.ListToXml``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Object})" />.
            </summary>
            <param name="xmlString">The XML string.</param>
            <returns>List{System.String}.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.JoinWithinFormat``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Joins the within format.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <param name="format">The format. {0} would be used for index, {1} would be used as value.</param>
            <returns>
            System.String.
            </returns>
        </member>
        <member name="M:Beyova.CollectionExtension.HasItem``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the specified instance has item.
            <remarks><c>Instance</c> can be null. Return true only when instance is not null and has item.</remarks>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <returns><c>true</c> if the specified instance has item; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.Join``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String})">
            <summary>
            Joins the specified instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <param name="separator">The separator.</param>
            <param name="valueSelector">The value selector.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.ToKeyValueString(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            To the key value string.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="encodeHtml">if set to <c>true</c> [encode HTML].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.FillValuesByKeyValueString(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Fills the values by key value string.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="keyValueString">The key value string.</param>
        </member>
        <member name="M:Beyova.CollectionExtension.Contains(System.String[],System.String,System.Boolean)">
            <summary>
            Determines whether [contains] [the specified string array].
            </summary>
            <param name="stringArray">The string array.</param>
            <param name="value">The value.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns>
              <c>true</c> if [contains] [the specified string array]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.TryGetValue(System.Web.HttpCookieCollection,System.String)">
            <summary>
            Tries the get value.
            </summary>
            <param name="cookieCollection">The cookie collection.</param>
            <param name="key">The key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.SafeFirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Safe to get first or default. If instance is null, return default(T);
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.SafeFirstOrDefaultValue``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Safes the first or default value.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <returns>TValue.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.FirstOrDefault``1(``0[])">
            <summary>
            Firsts the or default.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.FirstOrDefault``1(System.Array)">
            <summary>
            Firsts the or default.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.SafeFirstOrDefault``1(System.Array)">
            <summary>
            Safes the first or default.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.SafeFirstOrDefault``1(``0[])">
            <summary>
            Safes the first or default.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.CreateList``1(``0)">
            <summary>
            Creates the list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anyObject">Any object.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.AsList``1(``0)">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anyObject">Any object.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.AsCollection``1(``0)">
            <summary>
            Ases the collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anyObject">Any object.</param>
            <returns>Collection&lt;T&gt;.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.AsArray``1(``0)">
            <summary>
            Ases the array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anyObject">Any object.</param>
            <returns>T[].</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.AsDictionary``2(``1,``0)">
            <summary>
            Ases the dictionary.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="anyObject">Any object.</param>
            <param name="key">The key.</param>
            <returns>Dictionary&lt;TKey, TValue&gt;.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.AddRange``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the range.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="hashSet">The hash set.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:Beyova.CollectionExtension.AddRange``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Boolean)">
            <summary>
            Adds the range.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="items">The items.</param>
            <param name="overrideIfExists">if set to <c>true</c> [override if exists].</param>
        </member>
        <member name="M:Beyova.CollectionExtension.AddRange(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds the range.
            </summary>
            <param name="nameValueCollection">The name value collection.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:Beyova.CollectionExtension.Merge(System.Collections.Specialized.NameValueCollection,System.String,System.String,System.Boolean)">
            <summary>
            Merges the specified name value collection.
            </summary>
            <param name="nameValueCollection">The name value collection.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="overrideIfExists">if set to <c>true</c> [override if exists].</param>
        </member>
        <member name="M:Beyova.CollectionExtension.AddRange(System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds the range.
            </summary>
            <param name="nameValueCollection">The name value collection.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:Beyova.CollectionExtension.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Unions the specified item2.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <param name="keepDuplicated">if set to <c>true</c> [keep duplicated].</param>
            <returns></returns>
        </member>
        <member name="M:Beyova.CollectionExtension.FindAndRemove``2(System.Collections.Generic.IList{``0},``1,System.Func{``0,``1,System.Boolean})">
            <summary>
            Finds the first match and remove it from list.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TComparerIdentifier">The type of the t comparer identifier.</typeparam>
            <param name="collection">The collection.</param>
            <param name="comparerIdentifier">The comparer identifier.</param>
            <param name="comparer">The comparer.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.SafeGetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Safe to get value. Only when instance is not null and key is contained, return value. Otherwise return default(T).
            </summary>
            <typeparam name="TKey">T of the key.</typeparam>
            <typeparam name="TValue">T of the value.</typeparam>
            <param name="instance">The instance.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Beyova.CollectionExtension.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Gets the or add.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="instance">The instance.</param>
            <param name="key">The key.</param>
            <param name="valueForCreate">The value for create.</param>
            <returns>TValue.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.Merge``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Boolean)">
            <summary>
            Merges the specified instance.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="instance">The instance.</param>
            <param name="keyValueCollection">The key value collection.</param>
            <param name="overrideIfExists">if set to <c>true</c> [override if exists].</param>
        </member>
        <member name="M:Beyova.CollectionExtension.Load``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Loads the specified instance.
            </summary>
            <typeparam name="TKey">T of the key.</typeparam>
            <typeparam name="TValue">T of the value.</typeparam>
            <param name="instance">The instance.</param>
            <param name="keyValueCollection">The key value collection.</param>
        </member>
        <member name="M:Beyova.CollectionExtension.ToKeyValueCollection``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            To the key value collection.
            </summary>
            <typeparam name="TKey">T of the key.</typeparam>
            <typeparam name="TValue">T of the value.</typeparam>
            <param name="instance">The instance.</param>
            <returns>
            List{KeyValuePair{``0``1}}.
            </returns>
        </member>
        <member name="M:Beyova.CollectionExtension.ToDictionary``2(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            To the dictionary.
            </summary>
            <typeparam name="TKey">T of the key.</typeparam>
            <typeparam name="TValue">T of the value.</typeparam>
            <param name="instance">The instance.</param>
            <returns>
            Dictionary{``0``1}.
            </returns>
        </member>
        <member name="M:Beyova.CollectionExtension.Merge``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Boolean)">
            <summary>
            Merges the specified instance.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="instance">The instance.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="overrideIfExists">if set to <c>true</c> [override if exists].</param>
            <returns><c>true</c> if value is inserted, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.Merge``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``0,``1,``1,System.Boolean})">
            <summary>
            Merges the specified key.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="instance">The instance.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="determineOverride">The determine override.</param>
            <returns><c>true</c> if it is added, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.Merge``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1},System.Boolean)">
            <summary>
            Merges the specified instance.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="instance">The instance.</param>
            <param name="mergeObject">The merge object.</param>
            <param name="overrideIfExists">if set to <c>true</c> [override if exists].</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.Merge``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1},System.Func{``0,``1,``1,System.Boolean})">
            <summary>
            Merges the specified merge object.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="instance">The instance.</param>
            <param name="mergeObject">The merge object.</param>
            <param name="determineOverride">The determine override.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.ToXml``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            To the XML.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="instance">The instance.</param>
            <returns>XElement.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.ToXmlString``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            To the XML string.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="instance">The instance.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.FillByXml``2(System.Collections.Generic.Dictionary{``0,``1},System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Fills the by XML.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="instance">The instance.</param>
            <param name="xml">The XML.</param>
            <param name="clearExisting">if set to <c>true</c> [clear existing].</param>
        </member>
        <member name="M:Beyova.CollectionExtension.SafeTryGetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1@)">
            <summary>
            Safes the try get value.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="instance">The instance.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if succeed to get value, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.SafeTryGetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Safes the try get value.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="instance">The instance.</param>
            <param name="key">The key.</param>
            <returns>TValue.</returns>
        </member>
        <member name="M:Beyova.CollectionExtension.ToKeyValuePairString``2(System.Collections.Generic.Dictionary{``0,``1},System.Char,System.Boolean)">
            <summary>
            To the key value pair string.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="separatorChar">The separator character.</param>
            <param name="encodeKeyValue">if set to <c>true</c> [encode key value].</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Beyova.ExceptionExtension">
            <summary>
            Class ExceptionExtension.
            </summary>
        </member>
        <member name="M:Beyova.ExceptionExtension.CheckNullObject(System.Object,System.String,System.String,System.String,System.Int32)">
            <summary>
            Checks the null object.
            </summary>
            <param name="anyObject">Any object.</param>
            <param name="objectIdentity">The object identity.</param>
            <param name="memberName">Name of the member.</param>
            <param name="sourceFilePath">The source file path.</param>
            <param name="sourceLineNumber">The source line number.</param>
            <exception cref="T:Beyova.ExceptionSystem.NullObjectException"></exception>
        </member>
        <member name="M:Beyova.ExceptionExtension.CheckEmptyString(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Checks the empty string.
            </summary>
            <param name="anyString">Any string.</param>
            <param name="objectIdentity">The object identity.</param>
            <param name="memberName">Name of the member.</param>
            <param name="sourceFilePath">The source file path.</param>
            <param name="sourceLineNumber">The source line number.</param>
            <exception cref="T:Beyova.ExceptionSystem.NullObjectException"></exception>
        </member>
        <member name="M:Beyova.ExceptionExtension.ThrowOperationException(System.Object,System.String,Beyova.ExceptionSystem.FriendlyHint,System.String,System.String,System.Int32)">
            <summary>
            Throws the operation exception.
            </summary>
            <param name="data">The data.</param>
            <param name="minor">The minor.</param>
            <param name="hint">The hint.</param>
            <param name="memberName">Name of the member.</param>
            <param name="sourceFilePath">The source file path.</param>
            <param name="sourceLineNumber">The source line number.</param>
            <returns>OperationFailureException.</returns>
            <exception cref="T:Beyova.ExceptionSystem.OperationFailureException"></exception>
            <exception cref="T:Beyova.ExceptionSystem.ExceptionScene"></exception>
        </member>
        <member name="M:Beyova.ExceptionExtension.RootException(System.Exception)">
            <summary>
            Roots the exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns>Exception.</returns>
        </member>
        <member name="M:Beyova.ExceptionExtension.FormatToString(System.Exception)">
            <summary>
            Formats to string.
            </summary>
            <param name="exception">The exception.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.ExceptionExtension.FormatToString(System.Text.StringBuilder,System.Exception,System.Int32)">
            <summary>
            Formats to string.
            </summary>
            <param name="stringBuilder">The string builder.</param>
            <param name="exception">The exception.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Beyova.ExceptionExtension.AppendIndent(System.Text.StringBuilder,System.Int32)">
            <summary>
            Appends the indent.
            Returns  the same <see cref="T:System.Text.StringBuilder"/> instance to make sure it supports chain based actions.
            </summary>
            <param name="stringBuilder">The string builder.</param>
            <param name="level">The level.</param>
            <returns>System.Text.StringBuilder.</returns>
        </member>
        <member name="M:Beyova.ExceptionExtension.GenerateDataString(System.Web.HttpContext)">
            <summary>
            Generates the data string.
            </summary>
            <param name="obj">The object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.ExceptionExtension.GenerateDataString(System.Net.HttpListenerContext)">
            <summary>
            Generates the data string.
            </summary>
            <param name="obj">The object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.ExceptionExtension.GenerateDataString(System.Object)">
            <summary>
            Generates the data string.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.ExceptionExtension.Handle(System.Exception,System.Object,Beyova.ExceptionSystem.FriendlyHint,System.String,System.String,System.Int32)">
            <summary>
            Handles the exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="data">The data.</param>
            <param name="hint">The hint.</param>
            <param name="operationName">Name of the operation.</param>
            <param name="sourceFilePath">The source file path.</param>
            <param name="sourceLineNumber">The source line number.</param>
            <returns>BaseServiceException.</returns>
        </member>
        <member name="M:Beyova.ExceptionExtension.ToExceptionInfo(System.Exception,Beyova.ExceptionSystem.ExceptionInfo.ExceptionCriticality,System.String)">
            <summary>
            To the exception information.
            </summary>
            <param name="exception">The exception.</param>
            <param name="level">The level.</param>
            <param name="operatorIdentifier">The operator identifier.</param>
            <returns>ExceptionInfo.</returns>
        </member>
        <member name="M:Beyova.ExceptionExtension.ToExceptionInfo(System.Exception,System.Nullable{System.Guid},Beyova.ExceptionSystem.ExceptionInfo.ExceptionCriticality)">
            <summary>
            To the exception information.
            </summary>
            <param name="exception">The exception.</param>
            <param name="key">The key.</param>
            <param name="level">The level.</param>
            <returns>ExceptionInfo.</returns>
        </member>
        <member name="M:Beyova.ExceptionExtension.ToException(Beyova.ExceptionSystem.ExceptionInfo)">
            <summary>
            To the exception.
            </summary>
            <param name="exceptionInfo">The exception information.</param>
            <returns>System.Exception.</returns>
        </member>
        <member name="T:Beyova.JsonExtension">
            <summary>
            Class JsonExtension.
            </summary>
        </member>
        <member name="F:Beyova.JsonExtension.IsoDateTimeConverter">
            <summary>
            The iso date time converter
            </summary>
        </member>
        <member name="M:Beyova.JsonExtension.ToJson(System.Object,System.Boolean,Newtonsoft.Json.JsonConverter[])">
            <summary>
            To the json.
            If <c>converters</c> is not specified, isoDateTimeConverter (DateTimeFormat = "yyyy-MM-ddTHH:mm:ss.fffZ" and DateTimeStyles = DateTimeStyles.AdjustToUniversal) would be used by default.
            </summary>
            <param name="anyObject">Any object.</param>
            <param name="indentedFormat">The indented format.</param>
            <param name="converters">The converters.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.JsonExtension.ToJson(System.Object)">
            <summary>
            To the json.
            </summary>
            <param name="anyObject">Any object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.JsonExtension.TryConvertJsonToObject``1(System.String,System.Exception@)">
            <summary>
            Tries the convert json to object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonString">The json string.</param>
            <param name="exception">The exception.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Beyova.JsonExtension.TryConvertJsonToObject(System.String,System.Exception@)">
            <summary>
            Tries the convert json to object.
            </summary>
            <param name="jsonString">The json string.</param>
            <param name="exception">The exception.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Beyova.JsonExtension.TryConvertJsonToObject``1(System.String)">
            <summary>
            Tries the convert json to object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonString">The json string.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Beyova.JsonExtension.TryConvertJsonToObject(System.String)">
            <summary>
            Tries the convert json to object.
            </summary>
            <param name="jsonString">The json string.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Beyova.JsonExtension.GetJTokenByXPath(Newtonsoft.Json.Linq.JToken,System.String)">
            <summary>
            Gets the JSON object by specific x-path.
            </summary>
            <param name="jObject">The JSON object in <see cref="T:Newtonsoft.Json.Linq.JObject" /> type.</param>
            <param name="xPath">The x-path.</param>
            <returns>
            The matched <see cref="T:Newtonsoft.Json.Linq.JToken" /> instance. If not found, return null.
            </returns>
            <example>
            Samples below show you how to <c>XPath</c> method and the expected result.
              <code>
            string json = @"{Property1: {Array:['item1','item2','item3'],Count:3}, Property2: 'hello'}".Replace('\'', '"');
            var obj = JToken.Parse(json);   //Parse JSON object from string.
            obj = obj.XPath("Property1/Array"); //obj = {Array:['item1','item2','item3']}
            var result = obj.XPath("/Property1/Count"); // obj = {Count:3}
            var result2 = obj.XPath("/Property1/Array[2]"); //obj = "item3"
              </code>
            Note that, if the xPath starts "/", it means to be from the root node, otherwise, from current node.
              </example>
        </member>
        <member name="M:Beyova.JsonExtension.XPath(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets the JSON object by specific x-path.
            </summary>
            <param name="jObject">The JSON object in <see cref="T:Newtonsoft.Json.Linq.JObject" /> type.</param>
            <param name="xPath">The x-path.</param>
            <returns>
            The matched <see cref="T:Newtonsoft.Json.Linq.JToken" /> instance. If not found, return null.
            </returns>
            <example>
            Samples below show you how to <c>XPath</c> method and the expected result.
              <code>
            string json = @"{Property1: {Array:['item1','item2','item3'],Count:3}, Property2: 'hello'}".Replace('\'', '"');
            var obj = JToken.Parse(json);   //Parse JSON object from string.
            obj = obj.XPath("Property1/Array"); //obj = {Array:['item1','item2','item3']}
            var result = obj.XPath("/Property1/Count"); // obj = {Count:3}
            var result2 = obj.XPath("/Property1/Array[2]"); //obj = "item3"
              </code>
            Note that, if the xPath starts "/", it means to be from the root node, otherwise, from current node.
              </example>
        </member>
        <member name="M:Beyova.JsonExtension.XPath(Newtonsoft.Json.Linq.JToken,System.String)">
            <summary>
            Gets the JSON object by specific x-path.
            </summary>
            <param name="jObject">The JSON object in <see cref="T:Newtonsoft.Json.Linq.JToken" /> type.</param>
            <param name="xPath">The x-path.</param>
            <returns>
            The matched <see cref="T:Newtonsoft.Json.Linq.JToken" /> instance. If not found, return null.
            </returns>
            <example>
            Samples below show you how to <c>XPath</c> method and the expected result.
              <code>
            string json = @"{Property1: {Array:['item1','item2','item3'],Count:3}, Property2: 'hello'}".Replace('\'', '"');
            var obj = JToken.Parse(json);   //Parse JSON object from string.
            obj = obj.XPath("Property1/Array"); //obj = {Array:['item1','item2','item3']}
            var result = obj.XPath("/Property1/Count"); // obj = {Count:3}
            var result2 = obj.XPath("/Property1/Array[2]"); //obj = "item3"
              </code>
            Note that, if the xPath starts "/", it means to be from the root node, otherwise, from current node.
              </example>
        </member>
        <member name="M:Beyova.JsonExtension.TryGetValue``1(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Tries to get value.
            If jObject is null, return default value of T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jObject">The j object.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Beyova.JsonExtension.TryDeserializeAsObject``1(System.String)">
            <summary>
            Tries to deserialize object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Beyova.JsonExtension.GetProperty(Newtonsoft.Json.Linq.JObject,System.String,System.Boolean)">
            <summary>
            Finds the object.
            </summary>
            <param name="jObject">The j object.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns>JToken.</returns>
        </member>
        <member name="T:Beyova.SerializationExtension">
            <summary>
            Extension class for mail.
            </summary>
        </member>
        <member name="F:Beyova.SerializationExtension.formatter">
            <summary>
            The formatter
            </summary>
        </member>
        <member name="F:Beyova.SerializationExtension.SafeJsonSerializationSettings">
            <summary>
            The safe json serialization settings
            </summary>
        </member>
        <member name="M:Beyova.SerializationExtension.SerializeToStream(System.Object)">
            <summary>
            Serializes to stream.
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>MemoryStream.</returns>
            <exception cref="T:Beyova.ExceptionSystem.OperationFailureException">SerializeToStream</exception>
        </member>
        <member name="M:Beyova.SerializationExtension.SerializeToByteArray(System.Object)">
            <summary>
            Serializes to byte array.
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:Beyova.SerializationExtension.SerializeToBase64String(System.Object)">
            <summary>
            Serializes to base64 string.
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>System.String.</returns>
            <exception cref="T:Beyova.ExceptionSystem.OperationFailureException">SerializeToBase64String</exception>
        </member>
        <member name="M:Beyova.SerializationExtension.SerializeToXml``1(``0,System.Text.Encoding,System.Boolean,System.Boolean)">
            <summary>
            Serializes to XML.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectToSerialize">The object to serialize.</param>
            <param name="encoding">The encoding.</param>
            <param name="omitXmlDeclaration">if set to <c>true</c> [omit XML declaration].</param>
            <param name="indentedXml">if set to <c>true</c> [indented XML].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.SerializationExtension.DeserializeToObject(System.IO.MemoryStream,System.Boolean)">
            <summary>
            Deserializes to object.
            </summary>
            <param name="stream">The stream.</param>
            <param name="closeStream">if set to <c>true</c> [close stream].</param>
            <returns>System.Object.</returns>
            <exception cref="T:Beyova.ExceptionSystem.OperationFailureException">DeserializeToObject</exception>
        </member>
        <member name="M:Beyova.SerializationExtension.DeserializeFromBase64StringToObject(System.String)">
            <summary>
            Deserializes from base64 string to object.
            </summary>
            <param name="base64String">The base64 string.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Beyova.SerializationExtension.DeserializeToObject(System.Byte[])">
            <summary>
            Deserializes to object.
            </summary>
            <param name="byteArray">The byte array.</param>
            <returns>System.Object.</returns>
            <exception cref="T:Beyova.ExceptionSystem.OperationFailureException">DeserializeToObject</exception>
        </member>
        <member name="M:Beyova.SerializationExtension.DeserializeToObject``1(System.IO.MemoryStream)">
            <summary>
            Deserializes to object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream">The stream.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Beyova.SerializationExtension.DeserializeToObject``1(System.Byte[])">
            <summary>
            Deserializes to object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bytes">The bytes.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Beyova.SerializationExtension.DeserializeToObject``1(System.String)">
            <summary>
            Deserailizes to object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="base64String">The base64 string.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Beyova.SerializationExtension.DeserializeXmlToObject``1(System.String,System.Text.Encoding)">
            <summary>
            Deserializes to object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml">The XML.</param>
            <param name="encoding">The encoding.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Beyova.SerializationExtension.DeserializeXmlToObject``1(System.Xml.Linq.XElement,System.Text.Encoding)">
            <summary>
            Deserializes to object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml">The XML.</param>
            <param name="encoding">The encoding.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Beyova.SerializationExtension.ToPureXml(System.Object,System.Boolean)">
            <summary>
            To the pure XML.
            </summary>
            <param name="anyObject">Any object.</param>
            <param name="createDeclaration">if set to <c>true</c> [create declaration].</param>
            <returns>XElement.</returns>
        </member>
        <member name="M:Beyova.SerializationExtension.PureXmlToObject``1(System.Xml.Linq.XElement)">
            <summary>
            Converts from pure XML to object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlObject">The XML object.</param>
            <returns>T.</returns>
        </member>
        <member name="T:Beyova.SerializableDictionary`2">
            <summary>
            Class for Serializable Dictionary, which is inherited from <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:Beyova.SerializableDictionary`2.xml_Root">
            <summary>
            The XML_ root
            </summary>
        </member>
        <member name="M:Beyova.SerializableDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.SerializableDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Beyova.SerializableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.SerializableDictionary`2"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Beyova.SerializableDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.SerializableDictionary`2"/> class.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Generic.Dictionary`2" /> can contain.</param>
        </member>
        <member name="M:Beyova.SerializableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.SerializableDictionary`2"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Beyova.SerializableDictionary`2.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.
            </returns>
        </member>
        <member name="M:Beyova.SerializableDictionary`2.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads the XML.
            </summary>
            <param name="xmlReader">The XML reader.</param>
        </member>
        <member name="M:Beyova.SerializableDictionary`2.FillByXml(System.String)">
            <summary>
            Fills the by XML.
            </summary>
            <param name="xmlString">The XML string.</param>
        </member>
        <member name="M:Beyova.SerializableDictionary`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the XML.
            </summary>
            <param name="xmlWriter">The XML writer.</param>
        </member>
        <member name="M:Beyova.SerializableDictionary`2.ToXmlString">
            <summary>
            Serializes to string.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.SerializableDictionary`2.ToXml">
            <summary>
            To the XML.
            </summary>
            <returns>XElement.</returns>
        </member>
        <member name="M:Beyova.SerializableDictionary`2.FillByXml(System.Xml.Linq.XElement)">
            <summary>
            Fills the by XML.
            </summary>
            <param name="xml">The XML.</param>
        </member>
        <member name="T:Beyova.WinFormUIExtension">
            <summary>
            Win form UI extensions.
            </summary>
        </member>
        <member name="M:Beyova.WinFormUIExtension.BindTreeNodeCheckboxEvent(System.Windows.Forms.TreeView)">
            <summary>
            Binds the tree node checkbox event.
            </summary>
            <param name="treeViewInstance">The tree view instance.</param>
        </member>
        <member name="M:Beyova.WinFormUIExtension.TreeNodeAfterCheck(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Handles the AfterCheck event of the tree view controls.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.TreeViewEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Beyova.WinFormUIExtension.CheckAllSubItems(System.Windows.Forms.TreeNode,System.Boolean)">
            <summary>
            Checks all sub items.
            </summary>
            <param name="node">The node.</param>
            <param name="isChecked">if set to <c>true</c> [is checked].</param>
        </member>
        <member name="M:Beyova.WinFormUIExtension.CheckAllParentItems(System.Windows.Forms.TreeNode,System.Boolean)">
            <summary>
            Checks all parent items.
            </summary>
            <param name="node">The node.</param>
            <param name="isChecked">if set to <c>true</c> [is checked].</param>
        </member>
        <member name="M:Beyova.WinFormUIExtension.IsAllSubItemsChecked(System.Windows.Forms.TreeNode)">
            <summary>
            Determines whether [is all sub items checked] [the specified node].
            </summary>
            <param name="node">The node.</param>
            <returns>
              <c>true</c> if [is all sub items checked] [the specified node]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Beyova.StringRegexExtension">
            <summary>
            Extension class for string format validation.
            </summary>
        </member>
        <member name="F:Beyova.StringRegexExtension.startSymbol">
            <summary>
            The start symbol
            </summary>
        </member>
        <member name="F:Beyova.StringRegexExtension.endSymbol">
            <summary>
            The end symbol
            </summary>
        </member>
        <member name="M:Beyova.StringRegexExtension.AsQuotedString(System.String)">
            <summary>
            Ases the quoted string.
            </summary>
            <param name="anyString">Any string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.StartWithRegularExpressionString(System.String,System.String,System.Boolean)">
            <summary>
            Starts the with regular expression string.
            </summary>
            <param name="text">The text.</param>
            <param name="regularExpressionString">The regular expression string.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns><c>true</c> if given text starts with specific regular expression string, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.EndWithRegularExpressionString(System.String,System.String,System.Boolean)">
            <summary>
            Ends the with regular expression string.
            </summary>
            <param name="text">The text.</param>
            <param name="regularExpressionString">The regular expression string.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns><c>true</c> if given text ends with specific regular expression string, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.SplitWithRegularExpressionString(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Splits the with regular expression string.
            </summary>
            <param name="text">The text.</param>
            <param name="regularExpressionString">The regular expression string.</param>
            <param name="includeCapture">if set to <c>true</c> [include capture].</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns>System.String[].</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.ToRegularExpression(System.Char)">
            <summary>
            To the regular expression.
            </summary>
            <param name="anyChar">Any character.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.ToRegularExpression(System.String)">
            <summary>
            To the regular expression.
            </summary>
            <param name="anyString">Any string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="F:Beyova.StringRegexExtension.cellPhoneRegex">
            <summary>
            The cell phone regex
            </summary>
        </member>
        <member name="F:Beyova.StringRegexExtension.emailRegex">
            <summary>
            The email regex
            </summary>
        </member>
        <member name="F:Beyova.StringRegexExtension.macAddressRegex">
            <summary>
            The mac address regex
            </summary>
        </member>
        <member name="M:Beyova.StringRegexExtension.IsNumeric(System.String,System.Decimal)">
            <summary>
            Determines whether the specified string obj is number.
            </summary>
            <param name="stringObj">The string obj.</param>
            <param name="min">The min.</param>
            <returns><c>true</c> if the specified string obj is number; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.IsEmailAddress(System.String)">
            <summary>
            Determines whether [is email address] [the specified string object].
            </summary>
            <param name="stringObject">The string object.</param>
            <returns><c>true</c> if [is email address] [the specified string object]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.IsCellphone(System.String)">
            <summary>
            Determines whether [is cellphone] [the specified string object].
            </summary>
            <param name="stringObject">The string object.</param>
            <returns><c>true</c> if [is cell phone] [the specified string object]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.IndexOfChineseCharset(System.String)">
            <summary>
            Indexes the of chinese charset.
            </summary>
            <param name="stringToCheck">The string to check.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.ContainsChineseCharset(System.String)">
            <summary>
            Determines whether [contains chinese charset] [the specified string to check].
            </summary>
            <param name="stringToCheck">The string to check.</param>
            <returns><c>true</c> if [contains chinese charset] [the specified string to check]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.IsIpV4Address(System.String)">
            <summary>
            Determines whether [is ip v4 address] [the specified ip string].
            </summary>
            <param name="ipString">The ip string.</param>
            <returns><c>true</c> if [is ip v4 address] [the specified ip string]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.IsMacAddress(System.String)">
            <summary>
            Determines whether [is mac address] [the specified mac address].
            </summary>
            <param name="macAddress">The mac address.</param>
            <returns><c>true</c> if [is mac address] [the specified mac address]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.Replace(System.String,System.Char[],System.Char)">
            <summary>
            Replaces the specified old values.
            </summary>
            <param name="anyString">Any string.</param>
            <param name="oldValues">The old values.</param>
            <param name="newValue">The new value.</param>
            <returns></returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.Replace(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Replaces the specified replacements.
            </summary>
            <param name="anyString">Any string.</param>
            <param name="replacements">The replacements.</param>
            <returns></returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.Replace(System.String,System.String[],System.String)">
            <summary>
            Replaces the specified old values.
            </summary>
            <param name="anyString">Any string.</param>
            <param name="oldValues">The old values.</param>
            <param name="newValue">The new value.</param>
            <returns></returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.SafeToUpper(System.String)">
            <summary>
            Safes to upper.
            </summary>
            <param name="anyString">Any string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.SafeToLower(System.String)">
            <summary>
            Safes to lower.
            </summary>
            <param name="anyString">Any string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.ToFirstUpper(System.String)">
            <summary>
            To the first upper.
            </summary>
            <param name="anyString">Any string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.GetTopNCharacter(System.String,System.Int32,System.String)">
            <summary>
            Gets the top n character.
            </summary>
            <param name="anyString">Any string.</param>
            <param name="maxLength">The maximum length. The length does not contain suffix.</param>
            <param name="suffix">The suffix.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.ToRegularCaseIgnoringExpression(System.String)">
            <summary>
            To the regular case ignoring expression.
            </summary>
            <param name="anyString">Any string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.ToCultureInfo(System.String,System.Boolean)">
            <summary>
            To the culture information.
            </summary>
            <param name="cultureCode">The culture code.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <returns>CultureInfo.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.Capitalize(System.String)">
            <summary>
            Capitalizes the specified any string.
            </summary>
            <param name="anyString">Any string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.Proper(System.String)">
            <summary>
            Propers the specified any string.
            </summary>
            <param name="anyString">Any string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.SubStringBeforeFirstMatch(System.String,System.String)">
            <summary>
            Subs the string before first match.
            </summary>
            <param name="original">The original.</param>
            <param name="firstMatch">The first match.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.SubStringBeforeLastMatch(System.String,System.String)">
            <summary>
            Subs the string before first match.
            </summary>
            <param name="original">The original.</param>
            <param name="lastMatch">The last match.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.SubStringAfterFirstMatch(System.String,System.String)">
            <summary>
            Subs the string after first match.
            </summary>
            <param name="original">The original.</param>
            <param name="firstMatch">The first match.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.SubStringAfterLastMatch(System.String,System.String)">
            <summary>
            Subs the string after last match.
            </summary>
            <param name="original">The original.</param>
            <param name="lastMatch">The last match.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.SubStringBeforeFirstMatch(System.String,System.Char)">
            <summary>
            Subs the string before first match.
            </summary>
            <param name="original">The original.</param>
            <param name="firstMatch">The first match.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.FindCommonStartString(System.String,System.String,System.Boolean)">
            <summary>
            Finds the common start string.
            </summary>
            <param name="string1">The string1.</param>
            <param name="string2">The string2.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.AppendIndent(System.Text.StringBuilder,System.Char,System.Int32)">
            <summary>
            Appends the indent.
            </summary>
            <param name="builder">The builder.</param>
            <param name="indentChar">The indent character.</param>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:Beyova.StringRegexExtension.AppendIndent(System.Text.StringBuilder,System.String,System.Int32)">
            <summary>
            Appends the indent.
            </summary>
            <param name="builder">The builder.</param>
            <param name="indentString">The indent string.</param>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:Beyova.StringRegexExtension.AppendLineWithFormat(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
            Appends the line with format.
            </summary>
            <param name="builder">The builder.</param>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Beyova.StringRegexExtension.AppendLineWithFormat(System.Text.StringBuilder,System.Char,System.Int32,System.String,System.Object[])">
            <summary>
            Appends the line with format.
            </summary>
            <param name="builder">The builder.</param>
            <param name="indentChar">The indent character.</param>
            <param name="indentAmount">The indent amount.</param>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Beyova.StringRegexExtension.RemoveLast(System.Text.StringBuilder,System.Int32)">
            <summary>
            Removes the last.
            </summary>
            <param name="builder">The builder.</param>
            <param name="count">The count.</param>
        </member>
        <member name="F:Beyova.StringRegexExtension.spaceLines">
            <summary>
            The space lines
            </summary>
        </member>
        <member name="M:Beyova.StringRegexExtension.RemoveLastIfMatch(System.Text.StringBuilder,System.Char,System.Boolean)">
            <summary>
            Removes the last char if it equals to specific char from parameter.
            </summary>
            <param name="builder">The builder.</param>
            <param name="charToMatch">The character to match.</param>
            <param name="trimEndSpacesOrLines">if set to <c>true</c> [trim end spaces].</param>
            <returns>StringBuilder.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.TrimEnd(System.Text.StringBuilder,System.Char[])">
            <summary>
            Trims the end.
            </summary>
            <param name="builder">The builder.</param>
            <param name="charToTrim">The character to trim.</param>
            <returns>StringBuilder.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.InnerString(System.String,System.String,System.String)">
            <summary>
            Inners the string.
            </summary>
            <param name="anyString">Any string.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.WildCardToRegex(System.String)">
            <summary>
            Wilds the card to regex.
            </summary>
            <param name="wildCard">The wild card.</param>
            <returns>Regex.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.SafeMatch(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Safes the match.
            </summary>
            <param name="regex">The regex.</param>
            <param name="input">The input.</param>
            <returns>Match.</returns>
        </member>
        <member name="M:Beyova.StringRegexExtension.SafeMatches(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Safes the matches.
            </summary>
            <param name="regex">The regex.</param>
            <param name="input">The input.</param>
            <returns>MatchCollection.</returns>
        </member>
        <member name="T:Beyova.HttpExtension">
            <summary>
            Extension class for http operations.
            </summary>
        </member>
        <member name="F:Beyova.HttpExtension.domainCredentialRegex">
            <summary>
            The domain credential regex
            </summary>
        </member>
        <member name="F:Beyova.HttpExtension.uriCredentialRegex">
            <summary>
            The URI credential regex
            </summary>
        </member>
        <member name="M:Beyova.HttpExtension.GetPureUri(System.Uri,System.String@)">
            <summary>
            Gets the pure URI.
            </summary>
            <param name="uri">The URI.</param>
            <param name="userInfo">The user information.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.HttpExtension.ToFullRawUrl(System.Web.HttpRequest)">
            <summary>
            To the full raw URL.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.HttpExtension.ToFullRawUrl(Beyova.RestApi.RuntimeContext)">
            <summary>
            To the full raw URL.
            </summary>
            <param name="runtimeContext">The runtime context.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.HttpExtension.ParseToAccessCredential(System.String)">
            <summary>
            Parses to access credential. Acceptable string samples: cnsh\rynn.wang:12345, cnsh\rynn.wang, rynn.wang:12345, rynn.wang, rynn.wang@cnsh, rynn.wang:12345@cnsh
            </summary>
            <param name="accountString">The account string.</param>
            <returns>AccessCredential.</returns>
        </member>
        <member name="M:Beyova.HttpExtension.ReadResponseAsT``1(System.Net.HttpWebRequest,System.Func{System.Net.WebResponse,``0},System.Net.HttpStatusCode@,System.Net.WebHeaderCollection@,System.Net.CookieCollection@)">
            <summary>
            Reads the response as t.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="httpWebRequest">The HTTP web request.</param>
            <param name="responseDelegate">The response delegate.</param>
            <param name="statusCode">The status code.</param>
            <param name="headers">The headers.</param>
            <param name="cookieCollection">The cookie collection.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Beyova.HttpExtension.ReadResponseAsText(System.Net.HttpWebRequest,System.Text.Encoding,System.Net.HttpStatusCode@,System.Net.WebHeaderCollection@,System.Net.CookieCollection@)">
            <summary>
            Reads the response as text.
            </summary>
            <param name="httpWebRequest">The HTTP web request.</param>
            <param name="encoding">The encoding.</param>
            <param name="statusCode">The status code.</param>
            <param name="headers">The headers.</param>
            <param name="cookieCollection">The cookie collection.</param>
            <returns>System.String.</returns>
            <exception cref="T:Beyova.ExceptionSystem.OperationFailureException">ReadResponseAsText</exception>
        </member>
        <member name="M:Beyova.HttpExtension.ReadResponseAsBytes(System.Net.HttpWebRequest,System.Net.HttpStatusCode@,System.Net.WebHeaderCollection@,System.Net.CookieCollection@)">
            <summary>
            Reads the response as bytes.
            </summary>
            <param name="httpWebRequest">The HTTP web request.</param>
            <param name="statusCode">The status code.</param>
            <param name="headers">The headers.</param>
            <param name="cookieCollection">The cookie collection.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:Beyova.HttpExtension.ReadResponseAsText(System.Net.HttpWebRequest,System.Text.Encoding)">
            <summary>
            Reads the response as text.
            </summary>
            <param name="httpWebRequest">The HTTP web request.</param>
            <param name="encoding">The encoding.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.HttpExtension.ReadResponseAsBytes(System.Net.HttpWebRequest)">
            <summary>
            Reads the response as bytes.
            </summary>
            <param name="httpWebRequest">The HTTP web request.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:Beyova.HttpExtension.ReadResponseAsTextAsync(System.Net.HttpWebRequest,System.Text.Encoding,System.Nullable{System.Int32})">
            <summary>
            Reads the response as text asynchronous.
            </summary>
            <param name="httpWebRequest">The HTTP web request.</param>
            <param name="encoding">The encoding.</param>
            <param name="timeout">The timeout.</param>
            <returns>Task&lt;System.String&gt;.</returns>
        </member>
        <member name="M:Beyova.HttpExtension.ReadResponseAsTextUsingTraditionalAsync(System.Net.HttpWebRequest,System.Action{System.String},System.Text.Encoding,System.Nullable{System.Int32})">
            <summary>
            Reads the asynchronous response as text.
            </summary>
            <param name="httpWebRequest">The HTTP web request.</param>
            <param name="callback">The callback.</param>
            <param name="encoding">The encoding.</param>
            <param name="timeout">The timeout.</param>
            <exception cref="T:Beyova.ExceptionSystem.OperationFailureException">ReadResponseAsTextAsTraditionalAsync</exception>
        </member>
        <member name="M:Beyova.HttpExtension.ReadAsText(System.Net.WebResponse,System.Text.Encoding,System.Boolean)">
            <summary>
            Reads as text. This method would try to detect GZip and decode it correctly.
            </summary>
            <param name="webResponse">The web response.</param>
            <param name="encoding">The encoding.</param>
            <param name="closeResponse">The close response.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.HttpExtension.InternalReadAsText(System.Net.WebResponse,System.Text.Encoding,System.Boolean)">
            <summary>
            Reads as text.
            </summary>
            <param name="webResponse">The web response.</param>
            <param name="encoding">The encoding.</param>
            <param name="closeResponse">if set to <c>true</c> [close response].</param>
            <returns>System.String.</returns>
            <exception cref="T:Beyova.ExceptionSystem.OperationFailureException">ReadAsText</exception>
        </member>
        <member name="M:Beyova.HttpExtension.InternalReadAsGZipText(System.Net.WebResponse,System.Text.Encoding,System.Boolean)">
            <summary>
            Reads as GZip text.
            </summary>
            <param name="webResponse">The web response.</param>
            <param name="encoding">The encoding.</param>
            <param name="closeResponse">if set to <c>true</c> [close response].</param>
            <returns>System.String.</returns>
            <exception cref="T:Beyova.ExceptionSystem.OperationFailureException">ReadAsGZipText</exception>
        </member>
        <member name="M:Beyova.HttpExtension.InternalReadAsBytes(System.Net.WebResponse,System.Boolean)">
            <summary>
            Reads as bytes.
            </summary>
            <param name="webResponse">The web response.</param>
            <param name="closeResponse">if set to <c>true</c> [close response].</param>
            <returns>System.Byte[].</returns>
            <exception cref="T:Beyova.ExceptionSystem.OperationFailureException">ReadAsBytes</exception>
        </member>
        <member name="M:Beyova.HttpExtension.FillFileData(System.Net.HttpWebRequest,System.Collections.Specialized.NameValueCollection,System.Collections.Generic.Dictionary{System.String,System.Byte[]},System.String)">
            <summary>
            Fills the file data.
            <remarks>
            Reference: http://stackoverflow.com/questions/566462/upload-files-with-httpwebrequest-multipart-form-data
            </remarks>
            </summary>
            <param name="httpWebRequest">The HTTP web request.</param>
            <param name="postData">The post data.</param>
            <param name="fileCollection">The file collection.
            Key: file name. e.g.: sample.txt
            Value: file data in byte array.</param>
            <param name="paramName">Name of the parameter.</param>
        </member>
        <member name="M:Beyova.HttpExtension.FillFileData(System.Net.HttpWebRequest,System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
            Fills the file data on HTTP web request.
            </summary>
            <param name="httpWebRequest">The HTTP web request.</param>
            <param name="postData">The post data.</param>
            <param name="fileFullName">Full name of the file.</param>
            <param name="paramName">Name of the param.</param>
            <exception cref="T:Beyova.ExceptionSystem.OperationFailureException">FillFileData</exception>
        </member>
        <member name="M:Beyova.HttpExtension.FillData(System.Net.HttpWebRequest,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Encoding)">
            <summary>
            Fills post data on HttpWebRequest.
            </summary>
            <param name="httpWebRequest">The HttpWebRequest instance.</param>
            <param name="method">The method.</param>
            <param name="dataMappings">The data mappings.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Beyova.HttpExtension.InternalFillData(System.Net.HttpWebRequest,System.String,System.Byte[],System.String)">
            <summary>
            Internals the fill data.
            </summary>
            <param name="httpWebRequest">The HTTP web request.</param>
            <param name="method">The method.</param>
            <param name="data">The data.</param>
            <param name="contentType">Type of the content.</param>
        </member>
        <member name="M:Beyova.HttpExtension.InternalFillData(System.Net.HttpWebRequest,System.String,System.String,System.Text.Encoding,System.String)">
            <summary>
            Internals the fill data.
            </summary>
            <param name="httpWebRequest">The HTTP web request.</param>
            <param name="method">The method.</param>
            <param name="data">The data.</param>
            <param name="encodingToByte">The encoding to byte.</param>
            <param name="contentType">Type of the content.</param>
        </member>
        <member name="M:Beyova.HttpExtension.FillData(System.Net.HttpWebRequest,System.String,System.Byte[],System.String)">
            <summary>
            Fills the data on HTTP web request.
            </summary>
            <param name="httpWebRequest">The HTTP web request.</param>
            <param name="method">The method.</param>
            <param name="data">The data.</param>
            <param name="contentType">Type of the content.</param>
        </member>
        <member name="M:Beyova.HttpExtension.FillData(System.Net.HttpWebRequest,System.Byte[],System.String)">
            <summary>
            Fills the data.
            </summary>
            <param name="httpWebRequest">The HTTP web request.</param>
            <param name="data">The data.</param>
            <param name="contentType">Type of the content.</param>
        </member>
        <member name="M:Beyova.HttpExtension.FillData(System.Net.HttpWebRequest,System.String,System.String,System.String)">
            <summary>
            Fills the data on HTTP web request.
            </summary>
            <param name="httpWebRequest">The HTTP web request.</param>
            <param name="method">The method.</param>
            <param name="data">The data.</param>
            <param name="contentType">Type of the content.</param>
        </member>
        <member name="M:Beyova.HttpExtension.FillData(System.Net.HttpWebRequest,System.String,System.Text.Encoding,System.String)">
            <summary>
            Fills the data.
            </summary>
            <param name="httpWebRequest">The HTTP web request.</param>
            <param name="data">The data.</param>
            <param name="encoding">The encoding.</param>
            <param name="contentType">Type of the content.</param>
        </member>
        <member name="M:Beyova.HttpExtension.FillData(System.Net.HttpWebRequest,System.String,System.String,System.Text.Encoding,System.String)">
            <summary>
            Fills the data on HTTP web request.
            </summary>
            <param name="httpWebRequest">The HTTP web request.</param>
            <param name="method">The method.</param>
            <param name="data">The data.</param>
            <param name="encodingToByte">The encoding to byte.</param>
            <param name="contentType">Type of the content.</param>
        </member>
        <member name="M:Beyova.HttpExtension.FillFileDataAsync(System.Net.HttpWebRequest,System.Collections.Specialized.NameValueCollection,System.Collections.Generic.Dictionary{System.String,System.Byte[]},System.String)">
            <summary>
            Fills the file data.
            <remarks>
            Reference: http://stackoverflow.com/questions/566462/upload-files-with-httpwebrequest-multipart-form-data
            </remarks>
            </summary>
            <param name="httpWebRequest">The HTTP web request.</param>
            <param name="postData">The post data.</param>
            <param name="fileCollection">The file collection.
            Key: file name. e.g.: sample.txt
            Value: file data in byte array.</param>
            <param name="paramName">Name of the parameter.</param>
        </member>
        <member name="M:Beyova.HttpExtension.FillFileDataAsync(System.Net.HttpWebRequest,System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
            Fills the file data on HTTP web request.
            </summary>
            <param name="httpWebRequest">The HTTP web request.</param>
            <param name="postData">The post data.</param>
            <param name="fileFullName">Full name of the file.</param>
            <param name="paramName">Name of the param.</param>
            <exception cref="T:Beyova.ExceptionSystem.OperationFailureException">FillFileData</exception>
        </member>
        <member name="M:Beyova.HttpExtension.FillDataAsync(System.Net.HttpWebRequest,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Encoding)">
            <summary>
            Fills post data on HttpWebRequest.
            </summary>
            <param name="httpWebRequest">The HttpWebRequest instance.</param>
            <param name="method">The method.</param>
            <param name="dataMappings">The data mappings.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Beyova.HttpExtension.InternalFillDataAsync(System.Net.HttpWebRequest,System.String,System.Byte[],System.String)">
            <summary>
            Internals the fill data.
            </summary>
            <param name="httpWebRequest">The HTTP web request.</param>
            <param name="method">The method.</param>
            <param name="data">The data.</param>
            <param name="contentType">Type of the content.</param>
        </member>
        <member name="M:Beyova.HttpExtension.InternalFillDataAsync(System.Net.HttpWebRequest,System.String,System.String,System.Text.Encoding,System.String)">
            <summary>
            Internals the fill data.
            </summary>
            <param name="httpWebRequest">The HTTP web request.</param>
            <param name="method">The method.</param>
            <param name="data">The data.</param>
            <param name="encodingToByte">The encoding to byte.</param>
            <param name="contentType">Type of the content.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Beyova.HttpExtension.FillDataAsync(System.Net.HttpWebRequest,System.Byte[],System.String)">
            <summary>
            Fills the data.
            </summary>
            <param name="httpWebRequest">The HTTP web request.</param>
            <param name="data">The data.</param>
            <param name="contentType">Type of the content.</param>
        </member>
        <member name="M:Beyova.HttpExtension.FillDataAsync(System.Net.HttpWebRequest,System.String,System.Text.Encoding,System.String)">
            <summary>
            Fills the data.
            </summary>
            <param name="httpWebRequest">The HTTP web request.</param>
            <param name="data">The data.</param>
            <param name="encoding">The encoding.</param>
            <param name="contentType">Type of the content.</param>
        </member>
        <member name="M:Beyova.HttpExtension.FillDataAsync(System.Net.HttpWebRequest,System.String,System.String,System.Text.Encoding,System.String)">
            <summary>
            Fills the data on HTTP web request.
            </summary>
            <param name="httpWebRequest">The HTTP web request.</param>
            <param name="method">The method.</param>
            <param name="data">The data.</param>
            <param name="encodingToByte">The encoding to byte.</param>
            <param name="contentType">Type of the content.</param>
        </member>
        <member name="M:Beyova.HttpExtension.GetPostData(System.Web.HttpRequest)">
            <summary>
            Gets the post data from HTTP web request.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:Beyova.HttpExtension.GetPostData(System.Web.HttpRequestBase)">
            <summary>
            Gets the post data.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:Beyova.HttpExtension.GetPostData(System.Net.HttpListenerRequest)">
            <summary>
            Gets the post data.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:Beyova.HttpExtension.GetPostJson(System.Web.HttpRequest,System.Text.Encoding)">
            <summary>
            Gets the post json.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <param name="encoding">The encoding.</param>
            <returns>System.String.</returns>
            <exception cref="T:Beyova.ExceptionSystem.OperationFailureException">GetPostJson</exception>
        </member>
        <member name="M:Beyova.HttpExtension.GetPostJson(System.Web.HttpRequestBase,System.Text.Encoding)">
            <summary>
            Gets the post json.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <param name="encoding">The encoding.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.HttpExtension.GetPostJson(System.Net.HttpListenerRequest,System.Text.Encoding)">
            <summary>
            Gets the post json.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <param name="encoding">The encoding.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.HttpExtension.WriteAllContent(System.Net.HttpListenerResponse,System.String,System.Text.Encoding,System.String,System.Boolean)">
            <summary>
            Writes the content.
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="content">The content.</param>
            <param name="encoding">The encoding.</param>
            <param name="contentType">Type of the content.</param>
            <param name="closeStream">if set to <c>true</c> [close stream].</param>
            <exception cref="T:Beyova.ExceptionSystem.InvalidObjectException">WriteContent</exception>
            <exception cref="T:Beyova.ExceptionSystem.InvalidObjectException">WriteContent</exception>
        </member>
        <member name="M:Beyova.HttpExtension.WriteContent(System.Web.HttpResponseBase,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Writes the content.
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="content">The content.</param>
            <param name="encoding">The encoding.</param>
            <param name="closeStream">if set to <c>true</c> [close stream].</param>
            <exception cref="T:Beyova.ExceptionSystem.InvalidObjectException">WriteContent</exception>
        </member>
        <member name="M:Beyova.HttpExtension.WriteContent(System.Web.HttpResponse,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Writes the content.
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="content">The content.</param>
            <param name="encoding">The encoding.</param>
            <param name="closeStream">if set to <c>true</c> [close stream].</param>
            <exception cref="T:Beyova.ExceptionSystem.InvalidObjectException">WriteContent</exception>
        </member>
        <member name="F:Beyova.HttpExtension.rawRequestSeperatorRegex">
            <summary>
            The raw request seperator regex
            </summary>
        </member>
        <member name="F:Beyova.HttpExtension.headerRegex">
            <summary>
            The header regex
            </summary>
        </member>
        <member name="F:Beyova.HttpExtension.destinationUrlRegex">
            <summary>
            The destination URL regex
            </summary>
        </member>
        <member name="M:Beyova.HttpExtension.CreateHttpWebRequestByRaw(System.String,System.Text.Encoding)">
            <summary>
            Creates the HTTP web request by raw. <c>Raw</c> can be from Fiddler.
            </summary>
            <param name="raw">The raw.</param>
            <param name="encoding">The encoding.</param>
            <returns>HttpWebRequest.</returns>
            <exception cref="T:Beyova.ExceptionSystem.InvalidObjectException">
            raw
            or
            raw.destination
            </exception>
        </member>
        <member name="M:Beyova.HttpExtension.ToRaw(System.Net.HttpWebRequest)">
            <summary>
            To the raw.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.HttpExtension.CreateHttpWebRequest(System.String,System.String,System.String,System.String,System.Net.CookieContainer,System.String,System.String,System.Boolean)">
            <summary>
            Creates the HTTP web request.
            </summary>
            <param name="destinationUrl">The destination URL.</param>
            <param name="httpMethod">Type of the method.</param>
            <param name="referrer">The referrer.</param>
            <param name="userAgent">The user agent.</param>
            <param name="cookieContainer">The cookie container.</param>
            <param name="cookieString">The cookie string.</param>
            <param name="accept">The accept.</param>
            <param name="acceptGZip">The accept g zip.</param>
            <returns>HttpWebRequest.</returns>
        </member>
        <member name="M:Beyova.HttpExtension.CreateHttpWebRequest(System.Uri,System.String)">
            <summary>
            Creates the HTTP web request.
            </summary>
            <param name="uriObject">The URI object.</param>
            <param name="method">The method.</param>
            <returns>HttpWebRequest.</returns>
        </member>
        <member name="M:Beyova.HttpExtension.SetBasicAuthentication(System.Net.HttpWebRequest,System.String,System.String)">
            <summary>
            Sets the basic authentication.
            </summary>
            <param name="request">The request.</param>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:Beyova.HttpExtension.SetCookieByString(System.Net.CookieCollection,System.String,System.String)">
            <summary>
            Sets the cookie by string.
            </summary>
            <param name="cookieCollection">The cookie collection.</param>
            <param name="cookieString">The cookie string.</param>
            <param name="hostDomain">The host domain.</param>
        </member>
        <member name="M:Beyova.HttpExtension.SetCookieByString(System.Net.CookieContainer,System.String,System.Uri)">
            <summary>
            Sets the cookie by string.
            </summary>
            <param name="cookieContainer">The cookie container.</param>
            <param name="cookieString">The cookie string.</param>
            <param name="hostDomain">The host domain.</param>
        </member>
        <member name="M:Beyova.HttpExtension.ToCookieRawString(System.Net.CookieCollection)">
            <summary>
            Automatics the cookie raw string.
            </summary>
            <param name="cookieCollection">The cookie collection.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.HttpExtension.ToKeyValueStringWithUrlEncode(System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            To the key value string.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="needUrlEncode">if set to <c>true</c> [need URL encode].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.HttpExtension.SupplyBinaryDownload(System.Web.HttpResponse,System.String,System.String)">
            <summary>
            Supply binary download via HttpResponse
            </summary>
            <param name="response">The response.</param>
            <param name="physicalPath">The physical path.</param>
            <param name="originalFullFileName">Name of the original full file.</param>
            <exception cref="T:Beyova.ExceptionSystem.OperationFailureException">SupplyBinaryDownload</exception>
        </member>
        <member name="M:Beyova.HttpExtension.SupplyBinaryDownload(System.Web.HttpContext,System.String,System.String)">
            <summary>
            Supplies the binary download.
            </summary>
            <param name="context">The context.</param>
            <param name="physicalPath">The physical path.</param>
            <param name="originalFullFileName">Name of the original full file.</param>
        </member>
        <member name="M:Beyova.HttpExtension.GetPostedFile(System.Web.HttpPostedFileBase)">
            <summary>
            Gets the posted file.
            </summary>
            <param name="httpFileBase">The HTTP file base.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:Beyova.HttpExtension.ParseToKeyValuePairCollection(System.String,System.Char)">
            <summary>
            Parses to key value pair collection.
            <remarks>
            Define separator = '&amp;',
            Parse string like a=1&amp;b=2&amp;c=3 into name value collection.
            Define separator = ';',
            Parse string like a=1;b=2;c=3 into name value collection.
            </remarks></summary>
            <param name="keyValuePairString">The key value pair string.</param>
            <param name="separator">The separator. Default is '&amp;'.</param>
            <returns>System.Collections.Specialized.NameValueCollection.</returns>
        </member>
        <member name="T:Beyova.HttpExtension.AsyncHttpState">
            <summary>
            Class AsyncHttpState.
            </summary>
        </member>
        <member name="F:Beyova.HttpExtension.AsyncHttpState.allDone">
            <summary>
            All done
            </summary>
        </member>
        <member name="F:Beyova.HttpExtension.AsyncHttpState.responseCallback">
            <summary>
            The response callback
            </summary>
        </member>
        <member name="P:Beyova.HttpExtension.AsyncHttpState.Timeout">
            <summary>
            Gets or sets the timeout.
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="P:Beyova.HttpExtension.AsyncHttpState.RequestUri">
            <summary>
            Gets the request URI.
            </summary>
            <value>The request URI.</value>
        </member>
        <member name="P:Beyova.HttpExtension.AsyncHttpState.RequestUrl">
            <summary>
            Gets the request URL.
            </summary>
            <value>The request URL.</value>
        </member>
        <member name="P:Beyova.HttpExtension.AsyncHttpState.Request">
            <summary>
            Gets or sets the request.
            </summary>
            <value>The request.</value>
        </member>
        <member name="P:Beyova.HttpExtension.AsyncHttpState.Response">
            <summary>
            Gets or sets the response.
            </summary>
            <value>The response.</value>
        </member>
        <member name="M:Beyova.HttpExtension.AsyncHttpState.#ctor(System.Net.HttpWebRequest,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.HttpExtension.AsyncHttpState" /> class.
            </summary>
            <param name="request">The request.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:Beyova.HttpExtension.AsyncHttpState.GetResponseAsync(System.Action{System.Net.WebResponse})">
            <summary>
            Gets the response asynchronous.
            </summary>
            <param name="callback">The callback.</param>
            <exception cref="T:Beyova.ExceptionSystem.DataConflictException">callback;AsyncHttpState;null</exception>
        </member>
        <member name="M:Beyova.HttpExtension.AsyncHttpState.TimeoutCallback(System.Object,System.Boolean)">
            <summary>
            Timeouts the callback.
            </summary>
            <param name="state">The state.</param>
            <param name="timedOut">if set to <c>true</c> [timed out].</param>
        </member>
        <member name="M:Beyova.HttpExtension.AsyncHttpState.ResponseCallback(System.IAsyncResult)">
            <summary>
            Responses the callback.
            </summary>
            <param name="asynchronousResult">The asynchronous result.</param>
            <exception cref="T:Beyova.ExceptionSystem.OperationFailureException">ResponseCallback</exception>
        </member>
        <member name="M:Beyova.HttpExtension.ProceedResponseAsync(System.Net.HttpWebRequest,System.Action{System.Net.WebResponse})">
            <summary>
            Proceeds the response asynchronous.
            </summary>
            <param name="request">The request.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Beyova.HttpExtension.TryGetHeader(System.Web.HttpRequest,System.String)">
            <summary>
            Tries the get header.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <param name="headerKey">The header key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.HttpExtension.TryGetHeader(System.Net.HttpWebRequest,System.String)">
            <summary>
            Tries the get header.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <param name="headerKey">The header key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.HttpExtension.CopyHttpRequestToHttpWebRequest(System.Web.HttpRequest,System.String,System.Func{System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection,System.Exception})">
            <summary>
            Copies the HTTP request to HTTP web request.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <param name="destinationHost">The destination host.</param>
            <param name="rewriteDelegate">The rewrite delegate.</param>
            <returns>
            HttpWebRequest.
            </returns>
        </member>
        <member name="F:Beyova.HttpExtension.ignoredHeaders">
            <summary>
            The ignored headers
            </summary>
        </member>
        <member name="M:Beyova.HttpExtension.TransportHttpResponse(System.Net.HttpWebResponse,System.Web.HttpResponse)">
            <summary>
            Transports the HTTP response.
            </summary>
            <param name="sourceResponse">The source response.</param>
            <param name="destinationResponse">The destination response.</param>
        </member>
        <member name="M:Beyova.HttpExtension.TransportHttpResponse(System.Net.WebResponse,System.Web.HttpResponse)">
            <summary>
            Transports the HTTP response.
            </summary>
            <param name="sourceResponse">The source response.</param>
            <param name="destinationResponse">The destination response.</param>
        </member>
        <member name="M:Beyova.HttpExtension.FillHttpRequestToHttpWebRequest(System.Web.HttpRequest,System.Net.HttpWebRequest,System.Func{System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection,System.Exception})">
            <summary>
            Fills the HTTP request to HTTP web request.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <param name="request">The request.</param>
            <param name="rewriteDelegate">The rewrite delegate.</param>
        </member>
        <member name="M:Beyova.HttpExtension.SafeSetHttpHeader(System.Net.HttpWebRequest,System.String,System.Object,System.Boolean)">
            <summary>
            Safes the set HTTP header.
            <remarks>This method would help you to set values for header, especially for those need to be set by property. But following items would be ignored.
            <list type="bullet"><item>host</item><item>connection</item><item>close</item><item>content-length</item><item>proxy-connection</item><item>range</item></list></remarks>
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <param name="headerKey">The header key.</param>
            <param name="value">The value.</param>
            <param name="ignoreIfNullOrEmpty">if set to <c>true</c> [ignore if null or empty].</param>
        </member>
        <member name="M:Beyova.HttpExtension.SafeSetHttpHeader(System.Web.HttpResponse,System.String,System.Object)">
            <summary>
            Safes the set HTTP header.
            </summary>
            <param name="httpResponse">The HTTP response.</param>
            <param name="headerKey">The header key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Beyova.HttpExtension.ConvertHttpStatusCodeToExceptionCode(System.Net.HttpStatusCode,System.Net.WebExceptionStatus)">
            <summary>
            Converts the HTTP status code to exception code.
            </summary>
            <param name="httpStatusCode">The HTTP status code.</param>
            <param name="webExceptionStatus">The web exception status.</param>
            <returns>ExceptionCode.</returns>
        </member>
        <member name="M:Beyova.HttpExtension.IsGZip(System.Net.WebResponse)">
            <summary>
            Determines whether [is g zip] [the specified web response].
            </summary>
            <param name="webResponse">The web response.</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="T:Beyova.MailExtension">
            <summary>
            Extension class for mail.
            </summary>
        </member>
        <member name="F:Beyova.MailExtension.separators">
            <summary>
            The separators
            </summary>
        </member>
        <member name="M:Beyova.MailExtension.GetMailEncoding(System.String)">
            <summary>
            Gets the encoding.
            If failed to get, return UTF-8
            </summary>
            <param name="webName">Name of the web.</param>
            <returns>Encoding.</returns>
        </member>
        <member name="M:Beyova.MailExtension.GetEmailName(System.String)">
            <summary>
            Gets the name of the email.
            </summary>
            <param name="anyEmail">Any email.</param>
            <returns></returns>
        </member>
        <member name="T:Beyova.CommonExtension">
            <summary>
            Extensions for common type and common actions
            </summary>
        </member>
        <member name="F:Beyova.CommonExtension.dateTimeFormat">
            <summary>
            The date time format for commonly use. Format can be used in ToString method of <c>DateTime</c>, whose result should be like 2012-12-01 12:01:02.
            </summary>
        </member>
        <member name="F:Beyova.CommonExtension.localDateTimeFormat">
            <summary>
            The local date time format
            </summary>
        </member>
        <member name="F:Beyova.CommonExtension.fullDateTimeFormat">
            <summary>
            The full date time format. Format can be used in ToString method of <c>DateTime</c>, whose result should be like 2012-12-01 12:01:02.027.
            </summary>
        </member>
        <member name="F:Beyova.CommonExtension.dateFormat">
            <summary>
            The date time format for commonly use. Format can be used in ToString method of <c>DateTime</c>, whose result should be like 2012-12-01.
            </summary>
        </member>
        <member name="F:Beyova.CommonExtension.westenDateFormat">
            <summary>
            The date time format for commonly use. Format can be used in ToString method of <c>DateTime</c>, whose result should be like 2012/12/01.
            </summary>
        </member>
        <member name="F:Beyova.CommonExtension.fullDateTimeTZFormat">
            <summary>
            The full date time tz format
            </summary>
        </member>
        <member name="M:Beyova.CommonExtension.SafeEquals(System.String,System.String,System.StringComparison)">
            <summary>
            Safe equals. Difference with Equals: If both null or value equals, return true, otherwise false. Would not throw NullReferenceException.
            </summary>
            <param name="stringA">The string a.</param>
            <param name="stringB">The string b.</param>
            <param name="comparisonType">Type of the comparison. Default: StringComparison.Ordinal</param>
            <returns><c>true</c> if equals, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.SafeEquals``1(``0,``0)">
            <summary>
            Safe equals. Difference with Equals: If both null or value equals, return true, otherwise false. Would not throw NullReferenceException.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectA">The object a.</param>
            <param name="objectB">The object b.</param>
            <returns><c>true</c> if equals, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.IsInValues``1(``0,System.Collections.Generic.ICollection{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Determines whether [is in values] [the specified values].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anyObject">Any object.</param>
            <param name="values">The values.</param>
            <param name="comparer">The comparer.</param>
            <returns><c>true</c> if [is in values] [the specified values]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.IsInString(System.String,System.Collections.Generic.ICollection{System.String},System.Boolean)">
            <summary>
            Determines whether [is in string] [the specified values].
            </summary>
            <param name="anyString">Any string.</param>
            <param name="values">The values.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns><c>true</c> if [is in string] [the specified values]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.IsInString(System.String,System.String[])">
            <summary>
            Determines whether [is in specific string] case un-sensitively
            </summary>
            <param name="anyString">Any string.</param>
            <param name="values">The values.</param>
            <returns><c>true</c> if [is in string] [the specified values]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.IsInStringExplicitly(System.String,System.String[])">
            <summary>
            Determines whether [is in specific string] explicitly (case sensitively)
            </summary>
            <param name="anyString">Any string.</param>
            <param name="values">The values.</param>
            <returns><c>true</c> if [is in string explicitly] [the specified values]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.CopyInheritedPropertyValueTo``2(``0,``1)">
            <summary>
            Copies the inherited property value to.
            </summary>
            <typeparam name="TSource">The type of the t source.</typeparam>
            <typeparam name="TDestination">The type of the t destination.</typeparam>
            <param name="anyObject">Any object.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Beyova.CommonExtension.CreateXml(System.String)">
            <summary>
            Creates the XML.
            </summary>
            <param name="nodeName">Name of the node.</param>
            <returns>XElement.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.CreateChildNode(System.Xml.Linq.XElement,System.String,System.Object)">
            <summary>
            Creates the child node.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="childNodeName">Name of the child node.</param>
            <param name="value">The value.</param>
            <returns>XElement.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.SafeToString(System.String,System.String)">
            <summary>
            Safe to string.
            </summary>
            <param name="anyObject">Any object.</param>
            <param name="defaultString">The default string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.SafeToString(System.Object,System.String)">
            <summary>
            Safe to string.
            </summary>
            <param name="anyObject">Any object.</param>
            <param name="defaultString">The default string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.CheckXmlNodeName(System.Xml.Linq.XElement,System.String,System.Boolean)">
            <summary>
            Checks the name of the XML node.
            <remarks>
            If <c>nodeName</c> is specified, then method would check null and whether node name is matched.
            Otherwise null check only.
            </remarks>
            </summary>
            <param name="anyXml">Any XML.</param>
            <param name="nodeName">Name of the node.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <exception cref="T:Beyova.ExceptionSystem.InvalidObjectException">Invalid xml name;null</exception>
        </member>
        <member name="M:Beyova.CommonExtension.ObjectToDouble(System.Object,System.Double)">
            <summary>
            To double.
            </summary>
            <param name="data">The data.</param>
            <param name="defaultValue">The default value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ObjectToFloat(System.Object,System.Single)">
            <summary>
            DBs to float.
            </summary>
            <param name="data">The data.</param>
            <param name="defaultValue">The default value.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ObjectToInt32(System.Object,System.Int32)">
            <summary>
            To the int32.
            </summary>
            <param name="data">The data.</param>
            <param name="defaultValue">The default value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ObjectToInt64(System.Object,System.Int64)">
            <summary>
            Databases to int64.
            </summary>
            <param name="data">The data.</param>
            <param name="defaultValue">The default value.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ObjectToNullableInt32(System.Object,System.Nullable{System.Int32})">
            <summary>
            To the nullable int32.
            </summary>
            <param name="data">The data.</param>
            <param name="defaultValue">The default value.</param>
            <returns>System.Nullable{System.Int32}.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ObjectToNullableInt64(System.Object,System.Nullable{System.Int64})">
            <summary>
            Databases to nullable int64.
            </summary>
            <param name="data">The data.</param>
            <param name="defaultValue">The default value.</param>
            <returns>System.Nullable&lt;Int64&gt;.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ObjectToNullableFloat(System.Object,System.Nullable{System.Single})">
            <summary>
            Databases to nullable float.
            </summary>
            <param name="data">The data.</param>
            <param name="defaultValue">The default value.</param>
            <returns>System.Nullable&lt;System.Single&gt;.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ObjectToNullableDouble(System.Object,System.Nullable{System.Double})">
            <summary>
            Databases to nullable double.
            </summary>
            <param name="data">The data.</param>
            <param name="defaultValue">The default value.</param>
            <returns>System.Nullable&lt;System.Double&gt;.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ObjectToNullableDecimal(System.Object,System.Nullable{System.Decimal})">
            <summary>
            Databases to nullable decimal.
            </summary>
            <param name="data">The data.</param>
            <param name="defaultValue">The default value.</param>
            <returns>System.Nullable&lt;System.Decimal&gt;.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ObjectToDateTime(System.Object)">
            <summary>
            DBs to date time.
            </summary>
            <param name="data">The data.</param>
            <returns>System.Nullable{DateTime}.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ObjectToDateTime(System.Object,System.DateTime)">
            <summary>
            To the date time.
            </summary>
            <param name="data">The data.</param>
            <param name="defaultValue">The default value.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ObjectToGuid(System.Object,System.Nullable{System.Guid})">
            <summary>
            To GUID.
            </summary>
            <param name="data">The data.</param>
            <param name="defaultValue">The default value.</param>
            <returns>System.Nullable{Guid}.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ObjectToDecimal(System.Object,System.Decimal)">
            <summary>
            Databases the automatic decimal.
            </summary>
            <param name="data">The data.</param>
            <param name="defaultValue">The default value.</param>
            <returns>System.Decimal.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ObjectToNullableBoolean(System.Object,System.Nullable{System.Boolean})">
            <summary>
            To nullable boolean
            </summary>
            <param name="data">The data.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The nullable boolean value.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ObjectToBoolean(System.Object)">
            <summary>
            DBs to boolean.
            </summary>
            <param name="data">The data.</param>
            <returns>The boolean value. If failed to convert, return <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ObjectToString(System.Object,System.String)">
            <summary>
            To string.
            </summary>
            <param name="data">The data.</param>
            <param name="defaultValue">The default value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ObjectToXml(System.Object,System.Xml.Linq.XElement)">
            <summary>
            Databases to XML.
            </summary>
            <param name="data">The data.</param>
            <param name="defaultXml">The default XML.</param>
            <returns>XElement.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToInt32(System.Guid)">
            <summary>
            To the int32.
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.EnumToString``1(System.Nullable{``0})">
            <summary>
            Enums to string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumValue">The enum value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.EnumToString``1(``0)">
            <summary>
            Enums to string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumValue">The enum value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.EnumToInt32``1(``0)">
            <summary>
            Enums to int32.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumValue">The enum value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.EnumToInt32``1(System.Nullable{``0})">
            <summary>
            Enums to int32.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumValue">The enum value.</param>
            <returns>System.Nullable{System.Int32}.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.Int32ToEnum``1(System.Int32)">
            <summary>
            Int32s to enum.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="intValue">The int value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.Int32ToEnum``1(System.Nullable{System.Int32})">
            <summary>
            Int32s to enum.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="intValue">The int value.</param>
            <returns>System.Nullable&lt;T&gt;.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToBoolean(System.String,System.Boolean)">
            <summary>
            To boolean.
            </summary>
            <param name="stringObject">The string object.</param>
            <param name="defaultValue">if set to <c>true</c> [default value].</param>
            <returns>The boolean result. If failed to concert, return <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToCultureInfo(System.String,System.Globalization.CultureInfo)">
            <summary>
            To the culture info.
            </summary>
            <param name="stringObject">The string object.</param>
            <param name="defaultCultureInfo">The default culture information.</param>
            <returns>CultureInfo.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToInt32(System.String,System.Int32)">
            <summary>
            To the int32.
            </summary>
            <param name="stringObject">The string object.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Int32.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToInt64(System.String,System.Int64)">
            <summary>
            To the int64.
            </summary>
            <param name="stringObject">The string object.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Int64.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToNullableInt32(System.String,System.Nullable{System.Int32})">
            <summary>
            To nullable int32.
            </summary>
            <param name="stringObject">The string object.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Int32.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToNullableDecimal(System.String,System.Nullable{System.Decimal})">
            <summary>
            To the nullable decimal.
            </summary>
            <param name="stringObject">The string object.</param>
            <param name="defaultValue">The default value.</param>
            <returns>System.Nullable&lt;System.Decimal&gt;.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToNullableBoolean(System.String,System.Nullable{System.Boolean})">
            <summary>
            To the nullable boolean.
            </summary>
            <param name="stringObject">The data.</param>
            <param name="defaultValue">if set to <c>true</c> [default value].</param>
            <returns>The nullable boolean value.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToDouble(System.String,System.Double)">
            <summary>
            To the double.
            </summary>
            <param name="stringObject">The string object.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Double.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToDecimal(System.String,System.Decimal)">
            <summary>
            To the decimal.
            </summary>
            <param name="stringObject">The string object.</param>
            <param name="defaultValue">The default value.</param>
            <returns>System.Decimal.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToDouble(System.String,System.Nullable{System.DateTime})">
            <summary>
            To the double.
            </summary>
            <param name="stringObject">The string object.</param>
            <param name="defaultDateTime">The default date time.</param>
            <returns>System.Nullable{DateTime}.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToGuid(System.String,System.Nullable{System.Guid})">
            <summary>
            To the grid.
            </summary>
            <param name="stringObject">The string object.</param>
            <param name="defaultGuid">The default GUID.</param>
            <returns>System.Nullable{Guid}.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.FromStringToDateTime(System.String,System.Nullable{System.DateTime})">
            <summary>
            Converts from the string to date time.
            </summary>
            <param name="stringObject">The string object.</param>
            <param name="defaultDateTime">The default date time.</param>
            <returns>System.Nullable{DateTime}.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.FromStringToDate(System.String,System.Nullable{System.DateTime})">
            <summary>
            Converts from the string to date.
            </summary>
            <param name="stringObject">The string object.</param>
            <param name="defaultDate">The default date.</param>
            <returns>System.Nullable{DateTime}.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToUtc(System.DateTime,System.TimeSpan)">
            <summary>
            To the UTC.
            </summary>
            <param name="dateTimeObject">The date time object.</param>
            <param name="currentTimeZoneOffset">The current time zone offset.</param>
            <returns>
            DateTime.
            </returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToUtc(System.DateTime)">
            <summary>
            To the UTC.
            </summary>
            <param name="dateTimeObject">The date time object.</param>
            <returns>
            DateTime.
            </returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToUtc(System.DateTime,System.Int32)">
            <summary>
            To the UTC.
            </summary>
            <param name="dateTimeObject">The date time object.</param>
            <param name="currentTimeZoneOffsetInMinute">The current time zone offset information minute.</param>
            <returns>
            DateTime.
            </returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToJavaScriptMillisecondsDateTime(System.DateTime)">
            <summary>
            To the JavaScript date time (milli-seconds).
            </summary>
            <param name="dateTimeObject">The date time object.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToJavaScriptSecondsDateTime(System.DateTime)">
            <summary>
            To the JavaScript date time (seconds).
            </summary>
            <param name="dateTimeObject">The date time object.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.JavaScriptLongMillisecondsToDateTime(System.Int64,System.DateTimeKind)">
            <summary>
            Javas the script long milliseconds to date time.
            </summary>
            <param name="javaScriptDateTimeTicks">The java script date time ticks (milli-seconds).</param>
            <param name="dateTimeKind">Kind of the date time.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.JavaScriptLongSecondsToDateTime(System.Int64,System.DateTimeKind)">
            <summary>
            Javas the script long seconds to date time.
            </summary>
            <param name="javaScriptDateTimeSeconds">The java script date time seconds.</param>
            <param name="dateTimeKind">Kind of the date time.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ConvertTimeZoneMinuteToTimeZone(System.Nullable{System.Int32})">
            <summary>
            Converts the time zone minute to time zone.
            </summary>
            <param name="timeZone">The time zone.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ConvertTimeZoneMinuteToTimeZone(System.Int32)">
            <summary>
            Converts the time zone minute to time zone. Output sample: +08:30
            </summary>
            <param name="timeZone">The time zone.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToDifferentTimeZone(System.DateTime,System.TimeSpan,System.TimeSpan)">
            <summary>
            To different time zone.
            </summary>
            <param name="dateTimeObject">The date time object.</param>
            <param name="targetTimeZoneOffset">The target time zone offset.</param>
            <param name="currentTimeZoneOffset">The current time zone offset.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToDifferentTimeZone(System.Nullable{System.DateTime},System.TimeSpan,System.TimeSpan)">
            <summary>
            To the different time zone.
            </summary>
            <param name="dateTimeObject">The date time object.</param>
            <param name="targetTimeZoneOffset">The target time zone offset.</param>
            <param name="currentTimeZoneOffset">The current time zone offset.</param>
            <returns></returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToDifferentTimeZone(System.DateTime,System.TimeZoneInfo)">
            <summary>
            To the different time zone.
            </summary>
            <param name="dateTimeObject">The date time object.</param>
            <param name="timeZone">The time zone.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToDifferentTimeZone(System.Nullable{System.DateTime},System.TimeZoneInfo)">
            <summary>
            To the different time zone.
            </summary>
            <param name="dateTimeObject">The date time object.</param>
            <param name="timeZone">The time zone.</param>
            <returns></returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToDifferentTimeZone(System.DateTime,System.Int32,System.Int32)">
            <summary>
            To the different time zone.
            </summary>
            <param name="dateTimeObject">The date time object.</param>
            <param name="targetTimeZoneOffsetInMinute">The target time zone offset information minute.</param>
            <param name="currentTimeZoneOffsetInMinute">The current time zone offset information minute.</param>
            <returns>
            DateTime.
            </returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToDifferentTimeZone(System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            To the different time zone.
            </summary>
            <param name="dateTimeObject">The date time object.</param>
            <param name="targetTimeZoneOffsetInMinute">The target time zone offset in minute.</param>
            <param name="currentTimeZoneOffsetInMinute">The current time zone offset in minute.</param>
            <returns></returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToDateTimeString(System.Nullable{System.DateTime})">
            <summary>
            To the date time string.
            </summary>
            <param name="dateTimeObject">The date time object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToDateString(System.Nullable{System.DateTime})">
            <summary>
            To the date string.
            </summary>
            <param name="dateTimeObject">The date time object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToLocalDateString(System.DateTime)">
            <summary>
            To the local date string.
            </summary>
            <param name="dateTimeObject">The date time object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToLocalDateString(System.Nullable{System.DateTime})">
            <summary>
            To the local date string.
            </summary>
            <param name="dateTimeObject">The date time object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToFullDateTimeString(System.DateTime)">
            <summary>
            To the full date time string.
            </summary>
            <param name="dateTimeObject">The date time object.</param>
            <returns>
            System.String.
            </returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToFullDateTimeString(System.Nullable{System.DateTime})">
            <summary>
            To the full date time string.
            </summary>
            <param name="dateTimeObject">The date time object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToFullDateTimeTzString(System.DateTime)">
            <summary>
            To the full date time tz string.
            </summary>
            <param name="dateTimeObject">The date time object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToFullDateTimeTzString(System.Nullable{System.DateTime})">
            <summary>
            To the full date time tz string.
            </summary>
            <param name="dateTimeObject">The date time object.</param>
            <returns></returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToLogStampString(System.DateTime)">
            <summary>
            To the log stamp string.
            </summary>
            <param name="dateTimeObject">The date time object.</param>
            <returns></returns>
        </member>
        <member name="M:Beyova.CommonExtension.ToLogStampString(System.Nullable{System.DateTime})">
            <summary>
            To the log stamp string.
            </summary>
            <param name="dateTimeObject">The date time object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.GetFirstDayOfMonth(System.DateTime)">
            <summary>
            Gets the first day of month.
            </summary>
            <param name="dateTimeObject">The date time object.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.GetLastDayOfMonth(System.DateTime)">
            <summary>
            Gets the last day of month.
            </summary>
            <param name="dateTimeObject">The date time object.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.TryGetChildElement(System.Xml.Linq.XElement,System.String[])">
            <summary>
            Tries the get child element.
            </summary>
            <param name="xElement">The x element.</param>
            <param name="elementNames">The element names.</param>
            <returns>XElement.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.TryGetChildElements(System.Xml.Linq.XElement,System.String[])">
            <summary>
            Tries the get child elements.
            </summary>
            <param name="xElement">The x element.</param>
            <param name="elementNames">The element names.</param>
            <returns>List&lt;XElement&gt;.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.TryParseXml(System.String,System.Boolean)">
            <summary>
            Tries the parse XML.
            </summary>
            <param name="xmlString">The XML string.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <returns>XElement.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.TryLoadXml(System.String,System.Boolean)">
            <summary>
            Tries the load XML.
            </summary>
            <param name="xmlPath">The XML path.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <returns>XDocument.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.GetXmlValue(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the value.
            </summary>
            <param name="xElement">The executable element.</param>
            <param name="nodeName">Name of the node.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.SetXmlValue(System.Xml.Linq.XElement,System.String,System.String,System.Boolean)">
            <summary>
            Sets the value.
            </summary>
            <param name="container">The container.</param>
            <param name="nodeName">Name of the node.</param>
            <param name="value">The value.</param>
            <param name="omitCDATA">if set to <c>true</c> [omit CDATA].</param>
        </member>
        <member name="M:Beyova.CommonExtension.TryGetChildValue(System.Xml.Linq.XElement,System.String)">
            <summary>
            Tries the get the value of the first child element by childNodeName. If node is found, return node value, otherwise return string.Empty.
            </summary>
            <param name="anyXml">Any XML.</param>
            <param name="childNodeName">Name of the child node.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.FindChildElementsByTagWithAttribute(System.Xml.Linq.XElement,System.String,System.String,System.String)">
            <summary>
            Finds the child elements by tag with attribute.
            </summary>
            <param name="anyXml">Any XML.</param>
            <param name="tagName">Name of the tag.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="attributeValue">The attribute value.</param>
            <returns>List{XElement}.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.FindChildElementsByTagWithAttribute(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Finds the child elements by tag with attribute.
            </summary>
            <param name="anyXml">Any XML.</param>
            <param name="tagName">Name of the tag.</param>
            <param name="hasAttributeName">Name of the has attribute.</param>
            <returns>List{XElement}.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.FindChildElementsByAttribute(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Finds the child elements by attribute.
            </summary>
            <param name="anyXml">Any XML.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="attributeValue">The attribute value.</param>
            <returns>List{XElement}.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.FindFirstChildElementByAttribute(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Finds the first child element by attribute.
            </summary>
            <param name="anyXml">Any XML.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="attributeValue">The attribute value.</param>
            <returns>XElement.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.FindFirstChildElementByTagWithAttribute(System.Xml.Linq.XElement,System.String,System.String,System.String)">
            <summary>
            Finds the first child element by tag with attribute.
            </summary>
            <param name="anyXml">Any XML.</param>
            <param name="tagName">Name of the tag.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="attributeValue">The attribute value.</param>
            <returns>XElement.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.FindChildElements(System.Xml.Linq.XElement,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Finds the child elements by tag with attribute.
            </summary>
            <param name="anyXml">Any XML.</param>
            <param name="tagName">Name of the tag.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="attributeValue">The attribute value.</param>
            <param name="findOnlyOne">if set to <c>true</c> [find only one].</param>
            <returns>List{XElement}.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.HasElements(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the string value.
            </summary>
            <param name="element">The element.</param>
            <param name="name">The name.</param>
            <returns><c>true</c> if the specified element has elements; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.GetAttributeValue(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the attribute value.
            </summary>
            <param name="xElement">The x element.</param>
            <param name="attribute">The attribute.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.SetValueAsSubElement(System.Xml.Linq.XElement,System.String,System.Object)">
            <summary>
            Sets the value as sub element.
            </summary>
            <param name="xElement">The x element.</param>
            <param name="subNodeName">Name of the sub node.</param>
            <param name="innerValue">The inner value.</param>
            <returns>The added element in sub.</returns>
        </member>
        <member name="F:Beyova.CommonExtension.random">
            <summary>
            The random
            </summary>
        </member>
        <member name="F:Beyova.CommonExtension.alpha">
            <summary>
            The alpha
            </summary>
        </member>
        <member name="M:Beyova.CommonExtension.GetRandom(System.Object,System.Int32,System.Int32)">
            <summary>
            Gets the random. [min, max)
            </summary>
            <param name="anyObject">Any object.</param>
            <param name="max">The maximum. (Can not reach)</param>
            <param name="min">The minimum. (Can reach)</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.CreateRandomNumberString(System.Object,System.Int32)">
            <summary>
            Gets the random number only.
            </summary>
            <param name="anyObject">Any object.</param>
            <param name="length">The length.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.CreateRandomHexString(System.Object,System.Int32)">
            <summary>
            Gets the random hex string.
            </summary>
            <param name="anyObject">Any object.</param>
            <param name="length">The length.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.CreateRandomHex(System.Object,System.Int32)">
            <summary>
            Gets the random hex.
            </summary>
            <param name="anyObject">Any object.</param>
            <param name="length">The length.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:Beyova.CommonExtension.CreateRandomString(System.Object,System.Int32)">
            <summary>
            Gets the random string.
            </summary>
            <param name="anyObject">Any object.</param>
            <param name="length">The length.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.GetEnumDescriptionText``1(``0)">
            <summary>
            Gets the enum contract text.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumValue">The enum value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.ParseToEnum``1(System.String,``0)">
            <summary>
            Parses to enum.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumString">The enum string.</param>
            <param name="defaultValue">The default value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.AddEnumFlag``1(``0,``0)">
            <summary>
            Adds the enum flag.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumValue">The enum value.</param>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.RemoveEnumFlag``1(``0,``0)">
            <summary>
            Removes the enum flag.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumValue">The enum value.</param>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Beyova.CommonExtension.GetEnumFlagValues``1(``0)">
            <summary>
            Gets the enum flag values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumValue">The enum value.</param>
            <returns>System.Collections.Generic.IList&lt;T&gt;.</returns>
        </member>
        <member name="T:Beyova.ReflectionExtension">
            <summary>
            Class ReflectionExtension.
            </summary>
        </member>
        <member name="F:Beyova.ReflectionExtension.Path_BinFolder">
            <summary>
            The path_ bin folder
            </summary>
        </member>
        <member name="F:Beyova.ReflectionExtension.genericClassRegex">
            <summary>
            The generic regex
            </summary>
        </member>
        <member name="F:Beyova.ReflectionExtension.genericCodeLookClassRegex">
            <summary>
            The generic code look class regex
            </summary>
        </member>
        <member name="M:Beyova.ReflectionExtension.GetAppDomainAssemblies(System.AppDomain)">
            <summary>
            Gets the application domain assemblies.
            </summary>
            <param name="appDomain">The application domain.</param>
            <returns>IEnumerable{Assembly}.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.GetAssemblyPublicKeyToken(System.Reflection.Assembly)">
            <summary>
            Gets the assembly public key token.
            </summary>
            <param name="anyAssembly">Any assembly.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.IsSystemAssembly(System.Reflection.Assembly)">
            <summary>
            Determines whether [is system assembly] [the specified assembly].
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.IsSystemAssembly(System.Reflection.AssemblyName)">
            <summary>
            Determines whether [is system assembly] [the specified assembly name].
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.IsOverride(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the specified property information is override.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <returns><c>true</c> if the specified property information is override; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.IsVirtual(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the specified property information is virtual.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <returns><c>true</c> if the specified property information is virtual; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.GetActualAffectedProperties(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Gets the actual affected properties. This method helps to get properties without duplication.
            </summary>
            <param name="anyType">Any type.</param>
            <param name="bindingFlags">The binding flags.</param>
            <returns>List&lt;PropertyInfo&gt;.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.GetActualAffectedFields(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Gets the actual affected fields. This method helps to get fields without duplication.
            </summary>
            <param name="anyType">Any type.</param>
            <param name="bindingFlags">The binding flags.</param>
            <returns>List&lt;FieldInfo&gt;.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates the instance.
            </summary>
            <param name="type">The type.</param>
            <param name="arguments">The arguments.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.CreateInstance``1">
            <summary>
            Creates the instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.CreateGenericInstance(System.Type,System.Type[],System.Object[])">
            <summary>
            Creates the generic instance.
            </summary>
            <param name="type">The type.</param>
            <param name="genericTypes">The generic types.</param>
            <param name="arguments">The arguments.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.GetAssemblyFileVersion(System.Reflection.Assembly)">
            <summary>
            Gets the assembly file version.
            </summary>
            <param name="assemblyObject">The assembly object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.GetAssemblyVersion(System.Reflection.Assembly)">
            <summary>
            Gets the assembly version.
            </summary>
            <param name="assemblyObject">The assembly object.</param>
            <returns>Version.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.GetGenericTypeName(System.String,System.Boolean,System.String[]@,System.String@)">
            <summary>
            Gets the name of the generic type. e.g.: System.Collections.Generic.List`1[Beyova.ServiceCredential]
            </summary>
            <param name="fullName">The full name.</param>
            <param name="isCodeLook">The is code look.</param>
            <param name="genericTypeNames">The generic type names.</param>
            <param name="typeName">Name of the type.</param>
            <returns>
              <c>true</c> if succeed to get, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.SmartGetType(System.String,System.Boolean)">
            <summary>
            Gets the type smartly. It would find type in all related assemblies. And even if type name is generic based, it can still give right result.
            e.g.: System.Collections.Generic.List`1[Beyova.ServiceCredential]
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="isCodeLook">The is code look.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.MatchInterfaceMethod(System.Reflection.MethodInfo,System.Type,System.Boolean)">
            <summary>
            Matches the interface method.
            </summary>
            <param name="methodInfo">The method information.</param>
            <param name="attributeType">Type of the attribute.</param>
            <param name="attributeInherit">if set to <c>true</c> [attribute inherit].</param>
            <returns><c>true</c> if matches interface method, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.GetInterfaceMethod(System.Type,System.String,System.Boolean,System.Type,System.Boolean)">
            <summary>
            Gets the interface method.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <param name="attributeType">Type of the attribute.</param>
            <param name="attributeInherit">if set to <c>true</c> [attribute inherit].</param>
            <returns>MethodInfo.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.GetInterfaceMethods(System.Type,System.Type,System.Boolean)">
            <summary>
            Gets the interface methods.
            </summary>
            <param name="type">The type.</param>
            <param name="attributeType">Type of the attribute.</param>
            <param name="attributeInherit">if set to <c>true</c> [attribute inherit].</param>
            <returns>List&lt;MethodInfo&gt;.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.GetGenericType(System.String,System.String[])">
            <summary>
            Gets the type of the generic.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="genericTypeNames">The generic type names.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.GetPropertyNames(System.Object)">
            <summary>
            Gets the property names.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.GetMethodsFromType(System.Type,Beyova.MethodFiltering)">
            <summary>
            Gets the type of the methods from.
            </summary>
            <param name="type">The type.</param>
            <param name="methodAccessFiltering">The method access filtering.</param>
            <returns>List{MethodInfo}.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.GetParameterTypeFromMethodInfo(System.Reflection.MethodInfo,System.Int32)">
            <summary>
            Gets the parameter type from method info.
            </summary>
            <param name="methodInfo">The method info.</param>
            <param name="index">The index.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.GetParameterTypeFromMethodInfo(System.Reflection.MethodInfo,System.String)">
            <summary>
            Gets the parameter type from method info.
            </summary>
            <param name="methodInfo">The method info.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.IsNullable(System.Type)">
            <summary>
            Determines whether the specified type is nullable.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is nullable; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.IsFieldNullable(System.Type)">
            <summary>
            Determines whether is field nullable (is class or is nullable&lt;&gt;).
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [is field nullable] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.IsDictionary(System.Type)">
            <summary>
            Determines whether the specified type is dictionary.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is dictionary; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.IsCollection(System.Type)">
            <summary>
            Determines whether the specified type is collection.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the specified type is collection; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.TryGetNullableType(System.Type)">
            <summary>
            Gets the type of the nullable.
            <remarks>
            If specific type is not Nullable, return type itself.
            </remarks>
            </summary>
            <param name="type">The type.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.GetNullableType(System.Type)">
            <summary>
            Gets the type of the nullable.
            <remarks>
            If specific type is not Nullable, return null.
            </remarks>
            </summary>
            <param name="type">The type.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.InheritsFrom(System.Type,System.Type)">
            <summary>
            Inheritses from.
            </summary>
            <param name="type">The type.</param>
            <param name="inheritedType">Type of the inherited.</param>
            <returns><c>true</c> if inherits from specific type, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.IsSimpleType(System.Type)">
            <summary>
            Determines whether [is simple type] [the specified type]. Like: Guid, string, int32, int64, etc.
            If it is Nullable&lt;T&gt;, it would detect T directly.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [is simple type] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.HasAttribute``1(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            Determines whether the specified method has attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="method">The method.</param>
            <param name="inherit">The inherit.</param>
            <returns><c>true</c> if the specified method has attribute; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.HasAttribute(System.Reflection.MethodInfo,System.Attribute,System.Boolean)">
            <summary>
            Determines whether the specified method has attribute.
            </summary>
            <param name="method">The method.</param>
            <param name="attribute">The attribute.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns><c>true</c> if the specified method has attribute; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.HasAttribute``1(System.Type,System.Boolean)">
            <summary>
            Determines whether the specified type has attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns><c>true</c> if the specified type has attribute; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.HasAttribute(System.Type,System.Attribute,System.Boolean)">
            <summary>
            Determines whether the specified type has attribute.
            </summary>
            <param name="type">The type.</param>
            <param name="attribute">The attribute.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns><c>true</c> if the specified type has attribute; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.HasInterface(System.Type,System.Type)">
            <summary>
            Determines whether the specified type has interface.
            </summary>
            <param name="type">The type.</param>
            <param name="interfaceType">Type of the interface.</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.MethodInputParametersToCodeLook(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            Methods the input parameters to code look.
            </summary>
            <param name="methodInfo">The method information.</param>
            <param name="includeType">Type of the include.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.ToCodeLook(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            To the code look.
            </summary>
            <param name="methodInfo">The method information.</param>
            <param name="includeType">Type of the include.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.ToCodeLook(System.Reflection.MethodInfo,System.Boolean,System.Collections.Generic.ICollection{System.String})">
            <summary>
            To the code look.
            </summary>
            <param name="methodInfo">The method information.</param>
            <param name="includeType">Type of the include.</param>
            <param name="genericParameterTypeNames">The generic parameter type names.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.ToCodeLook(System.Type,System.Boolean,System.String)">
            <summary>
            To the code look. This method is to convert <see cref="T:System.Type" /> to code based., such as List&lt;String&gt;, System.Nullable&lt;System.Guid&gt;, etc.
            </summary>
            <param name="type">The type.</param>
            <param name="includingNamespace">The including namespace.</param>
            <param name="separator">The seperator.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.GetMethods(System.Type,Beyova.MethodFiltering)">
            <summary>
            Gets the methods.
            </summary>
            <param name="type">The type.</param>
            <param name="methodAccessFiltering">The method access filtering.</param>
            <returns>List{MethodInfo}.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.GetParameterType(System.Reflection.MethodInfo,System.Int32)">
            <summary>
            Gets the parameter type from method info.
            </summary>
            <param name="methodInfo">The method info.</param>
            <param name="index">The index.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets the property value.
            </summary>
            <param name="anyObject">Any object.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.GetCurrentExecutingMethod">
            <summary>
            Gets the current executing method.
            </summary>
            <returns>MethodBase.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.GetMethodInfoWithinAttribute``1(System.Type,System.Boolean,System.Reflection.BindingFlags)">
            <summary>
            Gets the method information within attribute. As MSDN said, you have to assign either <see cref="F:System.Reflection.BindingFlags.Instance"/> or <see cref="F:System.Reflection.BindingFlags.Static"/> for bindingFlags, so that you can get right result.
            </summary>
            <typeparam name="TAttribute">The type of the t attribute.</typeparam>
            <param name="type">The type.</param>
            <param name="inherit">The inherit.</param>
            <param name="bindingFlags">The binding flags.</param>
            <returns>IEnumerable&lt;MethodInfo&gt;.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.IsVoid(System.Type)">
            <summary>
            Determines whether the specified type is void.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is void; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.GetGenericParameterNames(System.Type,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Gets the generic parameter names.
            </summary>
            <param name="type">The type.</param>
            <param name="genericParameterTypeNames">The generic parameter type names.</param>
            <returns>System.Collections.Generic.List&lt;System.String&gt;.</returns>
        </member>
        <member name="T:Beyova.ReflectionExtension.AssemblyDependency">
            <summary>
            Class AssemblyDependency.
            </summary>
        </member>
        <member name="P:Beyova.ReflectionExtension.AssemblyDependency.Last">
            <summary>
            Gets or sets the last.
            </summary>
            <value>The last.</value>
        </member>
        <member name="P:Beyova.ReflectionExtension.AssemblyDependency.Next">
            <summary>
            Gets or sets the next.
            </summary>
            <value>The next.</value>
        </member>
        <member name="P:Beyova.ReflectionExtension.AssemblyDependency.Assembly">
            <summary>
            Gets or sets the assembly.
            </summary>
            <value>The assembly.</value>
        </member>
        <member name="P:Beyova.ReflectionExtension.AssemblyDependency.Level">
            <summary>
            Gets or sets the level.
            </summary>
            <value>The level.</value>
        </member>
        <member name="P:Beyova.ReflectionExtension.AssemblyDependency.ReferencedCount">
            <summary>
            Gets or sets the referenced count.
            </summary>
            <value>The referenced count.</value>
        </member>
        <member name="M:Beyova.ReflectionExtension.GetAssemblyDependencyChain(System.Collections.Generic.ICollection{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Gets the assembly dependency chain.
            </summary>
            <param name="assemblies">The assemblies.</param>
            <param name="descending">The descending.</param>
            <returns>List&lt;Assembly&gt;.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.TryLoadAssembly(System.Reflection.AssemblyName)">
            <summary>
            Tries the load assembly.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <returns>System.Reflection.Assembly.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.FillAssemblyDependency(System.Collections.Generic.List{Beyova.ReflectionExtension.AssemblyDependency},System.Reflection.Assembly,Beyova.ReflectionExtension.AssemblyDependency,System.Int32)">
            <summary>
            Fills the assembly dependency.
            </summary>
            <param name="container">The container.</param>
            <param name="assembly">The assembly.</param>
            <param name="lastDependency">The last dependency.</param>
            <param name="currentLevel">The current level.</param>
        </member>
        <member name="M:Beyova.ReflectionExtension.GetFullName(System.Reflection.MethodBase,System.Type)">
            <summary>
            Gets the full name.
            </summary>
            <param name="methodBase">The method base.</param>
            <param name="requiredAttribute">The required attribute.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.GetFullName(System.Type,System.Type)">
            <summary>
            Gets the full name.
            </summary>
            <param name="type">The type.</param>
            <param name="requiredAttribute">The required attribute.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.GetCurrentMethod">
            <summary>
            Gets the current method.
            </summary>
            <returns>System.Reflection.MethodBase.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.ConvertToObjectByType(System.Type,System.String,System.Boolean)">
            <summary>
            Converts the objects by <see cref="T:System.Type" /> instance.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.ConvertToObject``1(System.String,System.Boolean)">
            <summary>
            Converts to object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <returns>``0.</returns>
            <exception cref="T:Beyova.ExceptionSystem.InvalidObjectException"></exception>
        </member>
        <member name="M:Beyova.ReflectionExtension.InvokeMethod(System.Type,System.Object,System.String,System.Object[],System.Type[],System.Boolean)">
            <summary>
            Invokes the method.
            </summary>
            <param name="objectType">Type of the object.</param>
            <param name="instance">The instance.</param>
            <param name="methodName">Name of the method.</param>
            <param name="invokeParameters">The invoke parameters.</param>
            <param name="genericTypes">The generic types.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.InvalidCastException">Neither objectType or instance is valid.</exception>
        </member>
        <member name="M:Beyova.ReflectionExtension.InvokeStaticGenericMethod(System.Type,System.String,System.Object[],System.Type[],System.Boolean)">
            <summary>
            Invokes the static generic method.
            </summary>
            <param name="objectType">Type of the object.</param>
            <param name="methodName">Name of the method.</param>
            <param name="invokeParameters">The invoke parameters.</param>
            <param name="genericTypes">The generic types.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.CreateSampleObject(System.Type)">
            <summary>
            Creates the sample object.
            </summary>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.CreateSampleObject``1">
            <summary>
            Creates the sample object.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>``0.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.CreatePropertyValue(System.Reflection.PropertyInfo)">
            <summary>
            Creates the property value.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Beyova.ReflectionExtension.GetRandomNumber(System.Int32,System.Int32)">
            <summary>
            Gets the random number.
            </summary>
            <param name="max">The maximum.</param>
            <param name="min">The minimum.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:Beyova.MethodFiltering">
            <summary>
            Class for method filtering
            </summary>
        </member>
        <member name="P:Beyova.MethodFiltering.AllowedAccess">
            <summary>
            Gets or sets the allowed access.
            </summary>
            <value>The allowed access.</value>
        </member>
        <member name="P:Beyova.MethodFiltering.IncludedAttribute">
            <summary>
            Gets or sets the included attributes.
            If is null, it means no filtering based on attribute.
            </summary>
            <value>
            The included attributes.
            </value>
        </member>
        <member name="T:Beyova.ColorUtility">
            <summary>
            Singleton utility class for color.
            </summary>
        </member>
        <member name="F:Beyova.ColorUtility.knownColors">
            <summary>
            The known colors
            </summary>
        </member>
        <member name="M:Beyova.ColorUtility.#ctor">
            <summary>
            Initializes the <see cref="T:Beyova.ColorUtility" /> class.
            </summary>
        </member>
        <member name="M:Beyova.ColorUtility.GetKnownColorSet">
            <summary>
            Gets the known color set.
            </summary>
            <returns>List&lt;Color&gt;.</returns>
        </member>
        <member name="M:Beyova.ColorUtility.GetClosestColor(System.Drawing.Color)">
            <summary>
            Gets the color of the closest.
            </summary>
            <param name="color">The color.</param>
            <returns>KnownColor.</returns>
        </member>
        <member name="M:Beyova.ColorUtility.ColorDiff(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Colors the diff.
            </summary>
            <param name="color">The color.</param>
            <param name="curr">The curr.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Beyova.ColorUtility.GetImageFeatureSet(System.Drawing.Bitmap)">
            <summary>
            Gets the image feature set.
            </summary>
            <param name="image">The image.</param>
            <returns>Dictionary&lt;System.String, System.Int32&gt;.</returns>
        </member>
        <member name="T:Beyova.ContextHelper">
            <summary>
            Class ContextHelper.
            </summary>
        </member>
        <member name="F:Beyova.ContextHelper.threadKey_ApiContext">
            <summary>
            The thread key_ API context
            </summary>
        </member>
        <member name="F:Beyova.ContextHelper.threadKey_TraceContext">
            <summary>
            The thread key_ trace context
            </summary>
        </member>
        <member name="M:Beyova.ContextHelper.GetCurrentOperatorKey">
            <summary>
            Gets the current operator key.
            </summary>
            <returns>Guid.</returns>
        </member>
        <member name="P:Beyova.ContextHelper.CurrentUserInfo">
            <summary>
            Gets the current user information.
            </summary>
            <value>The current user information.</value>
        </member>
        <member name="P:Beyova.ContextHelper.CurrentCredential">
            <summary>
            Gets the current credential.
            </summary>
            <value>The current credential.</value>
        </member>
        <member name="P:Beyova.ContextHelper.CurrentFullIdentifier">
            <summary>
            Gets the current full identifier.
            </summary>
            <value>The current full identifier.</value>
        </member>
        <member name="P:Beyova.ContextHelper.IpAddress">
            <summary>
            Gets or sets the ip address.
            </summary>
            <value>The ip address.</value>
        </member>
        <member name="P:Beyova.ContextHelper.UserAgent">
            <summary>
            Gets or sets the user agent.
            </summary>
            <value>The user agent.</value>
        </member>
        <member name="P:Beyova.ContextHelper.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="P:Beyova.ContextHelper.IsUser">
            <summary>
            Gets a value indicating whether this instance is user.
            </summary>
            <value><c>true</c> if this instance is user; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Beyova.ContextHelper.ApiContext">
            <summary>
            Gets or sets the API context.
            </summary>
            <value>The API context.</value>
        </member>
        <member name="M:Beyova.ContextHelper.ConsistContext(System.Web.HttpRequestBase,System.String)">
            <summary>
            Consists the context.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <param name="settingName">Name of the setting.</param>
        </member>
        <member name="M:Beyova.ContextHelper.ConsistContext(System.Web.HttpRequest,System.String)">
            <summary>
            Consists the context.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <param name="settingName">Name of the setting.</param>
        </member>
        <member name="M:Beyova.ContextHelper.ConsistContext(System.Net.HttpListenerRequest,System.String)">
            <summary>
            Consists the context.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <param name="settingName">Name of the setting.</param>
        </member>
        <member name="M:Beyova.ContextHelper.ConsistContext(System.String,System.String,System.String,System.String)">
            <summary>
            Consists the context.
            </summary>
            <param name="token">The token.</param>
            <param name="settingName">Name of the setting.</param>
            <param name="ipAddress">The ip address.</param>
            <param name="userAgent">The user agent.</param>
        </member>
        <member name="M:Beyova.ContextHelper.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Beyova.ContextHelper.Reinitialize">
            <summary>
            Reinitializes this instance.
            </summary>
        </member>
        <member name="T:Beyova.GuidConverter">
            <summary>
            Class GuidConverter.
            </summary>
        </member>
        <member name="P:Beyova.GuidConverter.GuidFormat">
            <summary>
            Gets or sets the unique identifier format.
            </summary>
            <value>The unique identifier format.</value>
        </member>
        <member name="M:Beyova.GuidConverter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.GuidConverter" /> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:Beyova.GuidConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns><c>true</c> if this instance can convert the specified object type; otherwise, 
            <c>false</c>.</returns>
        </member>
        <member name="M:Beyova.GuidConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Beyova.GuidConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:Beyova.SafeContractResolver">
            <summary>
            Class SafeContractResolver.
            </summary>
        </member>
        <member name="F:Beyova.SafeContractResolver.httpRequestIgnoreProperties">
            <summary>
            The HTTP request ignore properties
            </summary>
        </member>
        <member name="M:Beyova.SafeContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.SafeContractResolver" /> class.
            </summary>
        </member>
        <member name="M:Beyova.SafeContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <summary>
            Creates properties for the given 
            <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.
            </summary>
            <param name="type">The type to create properties for.</param>
            <param name="memberSerialization">The member serialization mode for the type.</param>
            <returns>Properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.</returns>
        </member>
        <member name="T:Beyova.EncodingOrSecurityExtension">
            <summary>
            Class EncodingOrSecurityExtension.
            </summary>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.ToUrlPathEncodedText(System.String)">
            <summary>
            To the URL path encoded text.
            </summary>
            <param name="originalText">The original text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.ToUrlEncodedText(System.String)">
            <summary>
            To the URL encoded text.
            </summary>
            <param name="originalText">The original text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.ToUrlDecodedText(System.String)">
            <summary>
            To the URL decoded text.
            </summary>
            <param name="originalText">The original text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.ToHtmlEncodedText(System.String)">
            <summary>
            To the HTML encoded text.
            </summary>
            <param name="originalText">The original text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.ToHtmlDecodedText(System.String)">
            <summary>
            To the HTML decoded text.
            </summary>
            <param name="originalText">The original text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.EncodeStringToUnicode(System.String)">
            <summary>
            Encodes the string to unicode.
            </summary>
            <param name="sourceText">The SRC text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.DecodeUnicodeToString(System.String)">
            <summary>
            Decodes the unicode to string.
            </summary>
            <param name="sourceText">The source text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.ToBase64(System.String,System.Text.Encoding)">
            <summary>
            Encodes the base64 from string.
            </summary>
            <param name="stringObject">The source.</param>
            <param name="encoding">The encoding.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.ToBase64(System.Byte[])">
            <summary>
            Encodes the base64 from bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.DecodeBase64ToString(System.String,System.Text.Encoding)">
            <summary>
            Decodes the base64 to string.
            </summary>
            <param name="stringObject">The string object.</param>
            <param name="encoding">The encoding.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.DecodeBase64ToBytes(System.String)">
            <summary>
            Decodes the base64 to bytes.
            </summary>
            <param name="result">The result.</param>
            <returns>System.Byte[][].</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.ToMD5Bytes(System.Byte[])">
            <summary>
            To the m d5 bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.ToMD5String(System.String,System.Text.Encoding)">
            <summary>
            To the m d5 string.
            </summary>
            <param name="stringObject">The string object.</param>
            <param name="encoding">The encoding.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.ToMD5Base64String(System.Byte[])">
            <summary>
            To the m d5 base64 string.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.ToMD5String(System.Byte[])">
            <summary>
            To the m d5 string.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.ToBase64Md5(System.Byte[])">
            <summary>
            To the base64 MD5.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.ToSHA1(System.String,System.Text.Encoding)">
            <summary>
            Encrypts to SHA1.
            </summary>
            <param name="stringObject">The string object.</param>
            <param name="encoding">The encoding.</param>
            <returns>System.String.</returns>
            <exception cref="T:Beyova.ExceptionSystem.OperationFailureException">ToSHA1</exception>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.ToSHA1(System.Byte[])">
            <summary>
            Encrypts to SH a1.
            </summary>
            <param name="data">The data.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.GenerateRandom3DESKey(System.Object)">
            <summary>
            Generates the random3 DES key.
            </summary>
            <param name="anyObject">Any object.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.Encrypt3DES(System.String,System.String)">
            <summary>
            Encrypt3s the DES.
            </summary>
            <param name="content">The content.</param>
            <param name="encryptKey">The encrypt key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.Encrypt3DES(System.String,System.String,System.Security.Cryptography.CipherMode,System.Text.Encoding)">
            <summary>
            Encrypt 3DES.
            </summary>
            <param name="content">The content.</param>
            <param name="encryptKey">The encrypt key.</param>
            <param name="cipherMode">The cipher mode.</param>
            <param name="encoding">The encoding.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.Decrypt3DES(System.String,System.String)">
            <summary>
            Decrypt3s the DES.
            </summary>
            <param name="content">The content.</param>
            <param name="encryptKey">The encrypt key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.Decrypt3DES(System.String,System.String,System.Security.Cryptography.CipherMode,System.Text.Encoding)">
            <summary>
            Decrypt3s the DES.
            </summary>
            <param name="content">The content.</param>
            <param name="encryptKey">The encrypt key.</param>
            <param name="cipherMode">The cipher mode.</param>
            <param name="encoding">The encoding.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.RsaEncrypt(System.Byte[],System.String,System.Int32)">
            <summary>
            Encrypts within RSA.
            </summary>
            <param name="dataToEncrypt">The data to encrypt.</param>
            <param name="publicKey">The public key.</param>
            <param name="dwKeySize">Size of the dw key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.RsaDecrypt(System.String,System.String,System.Int32)">
            <summary>
            Decrypts within RSA.
            </summary>
            <param name="content">The content.</param>
            <param name="privateKey">The private key.</param>
            <param name="dwKeySize">Size of the dw key.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.RsaDecrypt(System.Byte[],System.String,System.Int32)">
            <summary>
            RSAs the decrypt.
            </summary>
            <param name="dataToDecrypt">The data to decrypt.</param>
            <param name="privateKey">The private key.</param>
            <param name="dwKeySize">Size of the dw key.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.CreateRsaKeys(System.Object,System.String@,System.String@,System.Int32)">
            <summary>
            Creates the RSA keys.
            </summary>
            <param name="anyObject">Any object.</param>
            <param name="publicKey">The public key.</param>
            <param name="privateKey">The private key.</param>
            <param name="dwKeySize">Size of the dw key.</param>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.GenerateRandomDESKey(System.Object)">
            <summary>
            Generates the random DES key.
            </summary>
            <param name="anyObject">Any object.</param>
            <returns>The <see cref="T:System.Byte" /> array for DES key.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.EncryptDES(System.String,System.String)">
            <summary>
            Encrypts the DES.
            </summary>
            <param name="content">The content.</param>
            <param name="encryptKey">The encrypt key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.DecryptDES(System.String,System.String)">
            <summary>
            Decrypts the DES.
            </summary>
            <param name="content">The content.</param>
            <param name="encryptKey">The encrypt key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="F:Beyova.EncodingOrSecurityExtension.desKeyLength">
            <summary>
            The description key length
            </summary>
        </member>
        <member name="F:Beyova.EncodingOrSecurityExtension.tripleDesKeyLength">
            <summary>
            The triple description key length
            </summary>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.R3DEncrypt3DES(System.String,System.Text.Encoding)">
            <summary>
            Encrypt within 3DES.
            </summary>
            <param name="content">The content.</param>
            <param name="encoding">The encoding.</param>
            <returns>System.String.</returns>
            <exception cref="T:Beyova.ExceptionSystem.OperationFailureException">R3DEncrypt3DES</exception>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.R3DDecrypt3DES(System.String,System.Text.Encoding)">
            <summary>
            Decrypt within 3DES.
            </summary>
            <param name="content">The content.</param>
            <param name="encoding">The encoding.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.ToHMACSHA1(System.String,System.Byte[])">
            <summary>
            To the HMAC SHA1.
            </summary>
            <param name="message">The message.</param>
            <param name="secretKey">The secret key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.ToHMACSHA1(System.String,System.String)">
            <summary>
            To the HMAC SHA1.
            </summary>
            <param name="message">The message.</param>
            <param name="secretKey">The secret key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.SecureHttpInvoke``1(System.Uri,``0,System.String)">
            <summary>
            Secures the synchronize.
            </summary>
            <param name="uri">The URI.</param>
            <param name="data">The data.</param>
            <param name="rsaPublicKey">The RSA public key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.ProcessSecureHttpInvoke``2(System.Web.HttpContext,System.Func{``0,``1},System.Func{System.String,System.String})">
            <summary>
            Processes the secure HTTP invoke.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOuput">The type of the ouput.</typeparam>
            <param name="httpContext">The HTTP context.</param>
            <param name="processFunc">The process function.</param>
            <param name="getPrivateKeyByPublicKey">The get private key by public key.</param>
            <returns>Beyova.ExceptionSystem.BaseException.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.GetSecureCommunicationPackage``1(System.Web.HttpRequest,System.String)">
            <summary>
            Gets the secure communication package.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="httpRequest">The HTTP request.</param>
            <param name="rsaPrivateKey">The RSA private key.</param>
            <returns>SecureSynchronizePackage.</returns>
        </member>
        <member name="M:Beyova.EncodingOrSecurityExtension.ResponseSecureCommunicationPackage``1(System.Web.HttpResponse,``0,System.String)">
            <summary>
            Responses the secure communication package.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="response">The response.</param>
            <param name="responseObject">The response object.</param>
            <param name="rsaPublicKey">The RSA public key.</param>
        </member>
        <member name="T:Beyova.MailSender">
            <summary>
            Class of sender for mails
            </summary>
        </member>
        <member name="P:Beyova.MailSender.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Beyova.MailSender.SmtpAddress">
            <summary>
            Gets or sets the SMTP address.
            </summary>
            <value>
            The SMTP address.
            </value>
        </member>
        <member name="P:Beyova.MailSender.UserName">
            <summary>
            Gets or sets the name of the user.
            </summary>
            <value>
            The name of the user.
            </value>
        </member>
        <member name="P:Beyova.MailSender.FullMailAddress">
            <summary>
            Gets or sets the full mail address.
            </summary>
            <value>
            The full mail address.
            </value>
        </member>
        <member name="P:Beyova.MailSender.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:Beyova.MailSender.SenderIdentity">
            <summary>
            Gets or sets the sender identity.
            </summary>
            <value>
            The sender identity.
            </value>
        </member>
        <member name="M:Beyova.MailSender.#ctor(System.Guid,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.MailSender"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="smtpAddress">The SMTP address.</param>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <param name="fullMailAddress">The full mail address.</param>
        </member>
        <member name="M:Beyova.MailSender.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beyova.MailSender"/> class.
            </summary>
            <param name="smtpAddress">The SMTP address.</param>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <param name="fullMailAddress">The full mail address.</param>
        </member>
        <member name="M:Beyova.MailSender.SendMail(System.Net.Mail.MailMessage,System.String)">
            <summary>
            Sends the mail.
            </summary>
            <param name="mailMessage">The mail message.</param>
            <param name="fromDisplay">From display.</param>
        </member>
        <member name="M:Beyova.MailSender.SendMail(System.String,System.String,System.Boolean,System.Text.Encoding,System.Net.Mail.MailAddress[],System.Net.Mail.MailAddress[],System.Net.Mail.MailAddress[],System.Collections.Generic.List{System.Net.Mail.Attachment},System.Net.Mail.MailPriority)">
            <summary>
            Sends the mail.
            </summary>
            <param name="subject">The subject.</param>
            <param name="body">The body.</param>
            <param name="isHtml">if set to <c>true</c> [is HTML].</param>
            <param name="encoding">The encoding.</param>
            <param name="toList">To list.</param>
            <param name="ccList">The cc list.</param>
            <param name="bccList">The BCC list.</param>
            <param name="attachments">The attachments.</param>
            <param name="mailPriority">The mail priority.</param>
        </member>
        <member name="M:Beyova.MailSender.GenerateMailMessage(System.String,System.String,System.Boolean,System.Text.Encoding,System.Net.Mail.MailAddress[],System.Net.Mail.MailAddress[],System.Net.Mail.MailAddress[],System.Collections.Generic.List{System.Net.Mail.Attachment},System.Net.Mail.MailPriority)">
            <summary>
            Generates the mail message.
            </summary>
            <param name="subject">The subject.</param>
            <param name="body">The body.</param>
            <param name="isHtml">if set to <c>true</c> [is HTML].</param>
            <param name="encoding">The encoding.</param>
            <param name="toList">To list.</param>
            <param name="ccList">The cc list.</param>
            <param name="bccList">The BCC list.</param>
            <param name="attachments">The attachments.</param>
            <param name="mailPriority">The mail priority.</param>
            <returns>MailMessage.</returns>
            <exception cref="T:Beyova.ExceptionSystem.InvalidObjectException">toList</exception>
        </member>
        <member name="M:Beyova.MailSender.GenerateMailMessage(System.String,System.String,System.Net.Mail.MailAddress[],System.Net.Mail.MailAddress[],System.Net.Mail.MailAddress[],System.Collections.Generic.List{System.Net.Mail.Attachment},System.Net.Mail.MailPriority)">
            <summary>
            Generates the mail message.
            </summary>
            <param name="subject">The subject.</param>
            <param name="body">The body.</param>
            <param name="toList">To list.</param>
            <param name="ccList">The cc list.</param>
            <param name="bccList">The BCC list.</param>
            <param name="attachments">The attachments.</param>
            <param name="mailPriority">The mail priority.</param>
            <returns></returns>
        </member>
        <member name="M:Beyova.MailSender.GenerateMailMessage(System.String,System.String,System.Boolean,System.Text.Encoding,System.Net.Mail.MailAddress[],System.Net.Mail.MailAddress[])">
            <summary>
            Generates the mail message.
            </summary>
            <param name="subject">The subject.</param>
            <param name="body">The body.</param>
            <param name="isHtml">if set to <c>true</c> [is HTML].</param>
            <param name="encoding">The encoding.</param>
            <param name="toList">To list.</param>
            <param name="ccList">The cc list.</param>
            <returns></returns>
        </member>
        <member name="M:Beyova.MailSender.GenerateMailMessage(System.String,System.String,System.Net.Mail.MailAddress[],System.Net.Mail.MailAddress[])">
            <summary>
            Generates the mail message.
            </summary>
            <param name="subject">The subject.</param>
            <param name="body">The body.</param>
            <param name="toList">To list.</param>
            <param name="ccList">The cc list.</param>
            <returns>MailMessage.</returns>
        </member>
        <member name="M:Beyova.MailSender.SetPassword(System.String)">
            <summary>
            Sets the password.
            </summary>
            <param name="password">The password.</param>
        </member>
    </members>
</doc>
